bubble.sl
duplication.sl
 Declared variable x
 Declared variable x!
Starting to bound arrays to width 2
Is index! Is index! Is index! Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvsub (bvmul 2 1) (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvsub 1 (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvsub (bvmul 2 1) (bvadd index 2 ))
Inserting an expr into the symbol to bound set:(bvsub 1 (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvmul 2 index)
Inserting an expr into the symbol to bound set:(bvadd (bvmul 2 index) 1 )
Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (=> (and (and (and (< (- (* 2 1) (+ 0 1 )) 2) (>= (- (* 2 1) (+ 0 1 )) 0) ) (and (< (- (* 2 1) (+ 0 2 )) 2) (>= (- (* 2 1) (+ 0 2 )) 0) ) ) (and (< (- 1 (+ 0 1 )) 2) (>= (- 1 (+ 0 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 0 1 ))) (select x (- 1 (+ 0 1 )))) (= (select x (- (* 2 1) (+ 0 2 ))) (select x (- 1 (+ 0 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 1 1 )) 2) (>= (- (* 2 1) (+ 1 1 )) 0) ) (and (< (- (* 2 1) (+ 1 2 )) 2) (>= (- (* 2 1) (+ 1 2 )) 0) ) ) (and (< (- 1 (+ 1 1 )) 2) (>= (- 1 (+ 1 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 1 1 ))) (select x (- 1 (+ 1 1 )))) (= (select x (- (* 2 1) (+ 1 2 ))) (select x (- 1 (+ 1 1 )))) )) )(inv-fn x )))
(constraint (=> (inv-fn x )(and (=> (and (and (< (* 2 0) 2) (>= (* 2 0) 0) ) (and (< (+ (* 2 0) 1 ) 2) (>= (+ (* 2 0) 1 ) 0) ) )(= (select x (* 2 0)) (select x (+ (* 2 0) 1 )))) (=> (and (and (< (* 2 1) 2) (>= (* 2 1) 0) ) (and (< (+ (* 2 1) 1 ) 2) (>= (+ (* 2 1) 1 ) 0) ) )(= (select x (* 2 1)) (select x (+ (* 2 1) 1 )))) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(= (select synth::parameter0 1) (select synth::parameter0 0))
after expanding let:
(= (select synth::parameter0 1) (select synth::parameter0 0))
after removing implications :
(= (select synth::parameter0 1) (select synth::parameter0 0))
About to verify: 

synth_fun::inv-fn -> parameter0[1] == parameter0[0]
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; set_to false
(assert (not (and (=> (forall ((|index#0| Int)) (and (= (select |x| (- (* 2 1) (+ |index#0| 1))) (select |x| (- 1 (+ |index#0| 1)))) (= (select |x| (- (* 2 1) (+ |index#0| 2))) (select |x| (- 1 (+ |index#0| 1)))))) (= (select |x| 1) (select |x| 0))) (=> (= (select |x| 1) (select |x| 0)) (forall ((|index#1| Int)) (= (select |x| (* 2 |index#1|)) (select |x| (+ (* 2 |index#1|) 1))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: x!
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 3
Is index! Is index! Is index! Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvsub (bvmul 2 1) (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvsub 1 (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvsub (bvmul 2 1) (bvadd index 2 ))
Inserting an expr into the symbol to bound set:(bvsub 1 (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvmul 2 index)
Inserting an expr into the symbol to bound set:(bvadd (bvmul 2 index) 1 )
Array size bounded to width 3
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (=> (and (and (and (< (- (* 2 1) (+ 0 1 )) 3) (>= (- (* 2 1) (+ 0 1 )) 0) ) (and (< (- (* 2 1) (+ 0 2 )) 3) (>= (- (* 2 1) (+ 0 2 )) 0) ) ) (and (< (- 1 (+ 0 1 )) 3) (>= (- 1 (+ 0 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 0 1 ))) (select x (- 1 (+ 0 1 )))) (= (select x (- (* 2 1) (+ 0 2 ))) (select x (- 1 (+ 0 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 1 1 )) 3) (>= (- (* 2 1) (+ 1 1 )) 0) ) (and (< (- (* 2 1) (+ 1 2 )) 3) (>= (- (* 2 1) (+ 1 2 )) 0) ) ) (and (< (- 1 (+ 1 1 )) 3) (>= (- 1 (+ 1 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 1 1 ))) (select x (- 1 (+ 1 1 )))) (= (select x (- (* 2 1) (+ 1 2 ))) (select x (- 1 (+ 1 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 2 1 )) 3) (>= (- (* 2 1) (+ 2 1 )) 0) ) (and (< (- (* 2 1) (+ 2 2 )) 3) (>= (- (* 2 1) (+ 2 2 )) 0) ) ) (and (< (- 1 (+ 2 1 )) 3) (>= (- 1 (+ 2 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 2 1 ))) (select x (- 1 (+ 2 1 )))) (= (select x (- (* 2 1) (+ 2 2 ))) (select x (- 1 (+ 2 1 )))) )) )(inv-fn x )))
(constraint (=> (inv-fn x )(and (=> (and (and (< (* 2 0) 3) (>= (* 2 0) 0) ) (and (< (+ (* 2 0) 1 ) 3) (>= (+ (* 2 0) 1 ) 0) ) )(= (select x (* 2 0)) (select x (+ (* 2 0) 1 )))) (=> (and (and (< (* 2 1) 3) (>= (* 2 1) 0) ) (and (< (+ (* 2 1) 1 ) 3) (>= (+ (* 2 1) 1 ) 0) ) )(= (select x (* 2 1)) (select x (+ (* 2 1) 1 )))) (=> (and (and (< (* 2 2) 3) (>= (* 2 2) 0) ) (and (< (+ (* 2 2) 1 ) 3) (>= (+ (* 2 2) 1 ) 0) ) )(= (select x (* 2 2)) (select x (+ (* 2 2) 1 )))) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(= (select synth::parameter0 1) (select synth::parameter0 0))
after expanding let:
(= (select synth::parameter0 1) (select synth::parameter0 0))
after removing implications :
(= (select synth::parameter0 1) (select synth::parameter0 0))
About to verify: 

synth_fun::inv-fn -> parameter0[1] == parameter0[0]
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; set_to false
(assert (not (and (=> (forall ((|index#0| Int)) (and (= (select |x| (- (* 2 1) (+ |index#0| 1))) (select |x| (- 1 (+ |index#0| 1)))) (= (select |x| (- (* 2 1) (+ |index#0| 2))) (select |x| (- 1 (+ |index#0| 1)))))) (= (select |x| 1) (select |x| 0))) (=> (= (select |x| 1) (select |x| 0)) (forall ((|index#1| Int)) (= (select |x| (* 2 |index#1|)) (select |x| (+ (* 2 |index#1|) 1))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: x!
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 4
Is index! Is index! Is index! Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvsub (bvmul 2 1) (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvsub 1 (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvsub (bvmul 2 1) (bvadd index 2 ))
Inserting an expr into the symbol to bound set:(bvsub 1 (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvmul 2 index)
Inserting an expr into the symbol to bound set:(bvadd (bvmul 2 index) 1 )
Array size bounded to width 4
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (=> (and (and (and (< (- (* 2 1) (+ 0 1 )) 4) (>= (- (* 2 1) (+ 0 1 )) 0) ) (and (< (- (* 2 1) (+ 0 2 )) 4) (>= (- (* 2 1) (+ 0 2 )) 0) ) ) (and (< (- 1 (+ 0 1 )) 4) (>= (- 1 (+ 0 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 0 1 ))) (select x (- 1 (+ 0 1 )))) (= (select x (- (* 2 1) (+ 0 2 ))) (select x (- 1 (+ 0 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 1 1 )) 4) (>= (- (* 2 1) (+ 1 1 )) 0) ) (and (< (- (* 2 1) (+ 1 2 )) 4) (>= (- (* 2 1) (+ 1 2 )) 0) ) ) (and (< (- 1 (+ 1 1 )) 4) (>= (- 1 (+ 1 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 1 1 ))) (select x (- 1 (+ 1 1 )))) (= (select x (- (* 2 1) (+ 1 2 ))) (select x (- 1 (+ 1 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 2 1 )) 4) (>= (- (* 2 1) (+ 2 1 )) 0) ) (and (< (- (* 2 1) (+ 2 2 )) 4) (>= (- (* 2 1) (+ 2 2 )) 0) ) ) (and (< (- 1 (+ 2 1 )) 4) (>= (- 1 (+ 2 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 2 1 ))) (select x (- 1 (+ 2 1 )))) (= (select x (- (* 2 1) (+ 2 2 ))) (select x (- 1 (+ 2 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 3 1 )) 4) (>= (- (* 2 1) (+ 3 1 )) 0) ) (and (< (- (* 2 1) (+ 3 2 )) 4) (>= (- (* 2 1) (+ 3 2 )) 0) ) ) (and (< (- 1 (+ 3 1 )) 4) (>= (- 1 (+ 3 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 3 1 ))) (select x (- 1 (+ 3 1 )))) (= (select x (- (* 2 1) (+ 3 2 ))) (select x (- 1 (+ 3 1 )))) )) )(inv-fn x )))
(constraint (=> (inv-fn x )(and (=> (and (and (< (* 2 0) 4) (>= (* 2 0) 0) ) (and (< (+ (* 2 0) 1 ) 4) (>= (+ (* 2 0) 1 ) 0) ) )(= (select x (* 2 0)) (select x (+ (* 2 0) 1 )))) (=> (and (and (< (* 2 1) 4) (>= (* 2 1) 0) ) (and (< (+ (* 2 1) 1 ) 4) (>= (+ (* 2 1) 1 ) 0) ) )(= (select x (* 2 1)) (select x (+ (* 2 1) 1 )))) (=> (and (and (< (* 2 2) 4) (>= (* 2 2) 0) ) (and (< (+ (* 2 2) 1 ) 4) (>= (+ (* 2 2) 1 ) 0) ) )(= (select x (* 2 2)) (select x (+ (* 2 2) 1 )))) (=> (and (and (< (* 2 3) 4) (>= (* 2 3) 0) ) (and (< (+ (* 2 3) 1 ) 4) (>= (+ (* 2 3) 1 ) 0) ) )(= (select x (* 2 3)) (select x (+ (* 2 3) 1 )))) )))
(check-synth)

 no solution with array bound 4
Starting to bound arrays to width 5
Is index! Is index! Is index! Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvsub (bvmul 2 1) (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvsub 1 (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvsub (bvmul 2 1) (bvadd index 2 ))
Inserting an expr into the symbol to bound set:(bvsub 1 (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvmul 2 index)
Inserting an expr into the symbol to bound set:(bvadd (bvmul 2 index) 1 )
Array size bounded to width 5
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (=> (and (and (and (< (- (* 2 1) (+ 0 1 )) 5) (>= (- (* 2 1) (+ 0 1 )) 0) ) (and (< (- (* 2 1) (+ 0 2 )) 5) (>= (- (* 2 1) (+ 0 2 )) 0) ) ) (and (< (- 1 (+ 0 1 )) 5) (>= (- 1 (+ 0 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 0 1 ))) (select x (- 1 (+ 0 1 )))) (= (select x (- (* 2 1) (+ 0 2 ))) (select x (- 1 (+ 0 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 1 1 )) 5) (>= (- (* 2 1) (+ 1 1 )) 0) ) (and (< (- (* 2 1) (+ 1 2 )) 5) (>= (- (* 2 1) (+ 1 2 )) 0) ) ) (and (< (- 1 (+ 1 1 )) 5) (>= (- 1 (+ 1 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 1 1 ))) (select x (- 1 (+ 1 1 )))) (= (select x (- (* 2 1) (+ 1 2 ))) (select x (- 1 (+ 1 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 2 1 )) 5) (>= (- (* 2 1) (+ 2 1 )) 0) ) (and (< (- (* 2 1) (+ 2 2 )) 5) (>= (- (* 2 1) (+ 2 2 )) 0) ) ) (and (< (- 1 (+ 2 1 )) 5) (>= (- 1 (+ 2 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 2 1 ))) (select x (- 1 (+ 2 1 )))) (= (select x (- (* 2 1) (+ 2 2 ))) (select x (- 1 (+ 2 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 3 1 )) 5) (>= (- (* 2 1) (+ 3 1 )) 0) ) (and (< (- (* 2 1) (+ 3 2 )) 5) (>= (- (* 2 1) (+ 3 2 )) 0) ) ) (and (< (- 1 (+ 3 1 )) 5) (>= (- 1 (+ 3 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 3 1 ))) (select x (- 1 (+ 3 1 )))) (= (select x (- (* 2 1) (+ 3 2 ))) (select x (- 1 (+ 3 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 4 1 )) 5) (>= (- (* 2 1) (+ 4 1 )) 0) ) (and (< (- (* 2 1) (+ 4 2 )) 5) (>= (- (* 2 1) (+ 4 2 )) 0) ) ) (and (< (- 1 (+ 4 1 )) 5) (>= (- 1 (+ 4 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 4 1 ))) (select x (- 1 (+ 4 1 )))) (= (select x (- (* 2 1) (+ 4 2 ))) (select x (- 1 (+ 4 1 )))) )) )(inv-fn x )))
(constraint (=> (inv-fn x )(and (=> (and (and (< (* 2 0) 5) (>= (* 2 0) 0) ) (and (< (+ (* 2 0) 1 ) 5) (>= (+ (* 2 0) 1 ) 0) ) )(= (select x (* 2 0)) (select x (+ (* 2 0) 1 )))) (=> (and (and (< (* 2 1) 5) (>= (* 2 1) 0) ) (and (< (+ (* 2 1) 1 ) 5) (>= (+ (* 2 1) 1 ) 0) ) )(= (select x (* 2 1)) (select x (+ (* 2 1) 1 )))) (=> (and (and (< (* 2 2) 5) (>= (* 2 2) 0) ) (and (< (+ (* 2 2) 1 ) 5) (>= (+ (* 2 2) 1 ) 0) ) )(= (select x (* 2 2)) (select x (+ (* 2 2) 1 )))) (=> (and (and (< (* 2 3) 5) (>= (* 2 3) 0) ) (and (< (+ (* 2 3) 1 ) 5) (>= (+ (* 2 3) 1 ) 0) ) )(= (select x (* 2 3)) (select x (+ (* 2 3) 1 )))) (=> (and (and (< (* 2 4) 5) (>= (* 2 4) 0) ) (and (< (+ (* 2 4) 1 ) 5) (>= (+ (* 2 4) 1 ) 0) ) )(= (select x (* 2 4)) (select x (+ (* 2 4) 1 )))) )))
(check-synth)

 no solution with array bound 5
Starting to bound arrays to width 6
Is index! Is index! Is index! Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvsub (bvmul 2 1) (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvsub 1 (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvsub (bvmul 2 1) (bvadd index 2 ))
Inserting an expr into the symbol to bound set:(bvsub 1 (bvadd index 1 ))
Inserting an expr into the symbol to bound set:(bvmul 2 index)
Inserting an expr into the symbol to bound set:(bvadd (bvmul 2 index) 1 )
Array size bounded to width 6
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (=> (and (and (and (< (- (* 2 1) (+ 0 1 )) 6) (>= (- (* 2 1) (+ 0 1 )) 0) ) (and (< (- (* 2 1) (+ 0 2 )) 6) (>= (- (* 2 1) (+ 0 2 )) 0) ) ) (and (< (- 1 (+ 0 1 )) 6) (>= (- 1 (+ 0 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 0 1 ))) (select x (- 1 (+ 0 1 )))) (= (select x (- (* 2 1) (+ 0 2 ))) (select x (- 1 (+ 0 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 1 1 )) 6) (>= (- (* 2 1) (+ 1 1 )) 0) ) (and (< (- (* 2 1) (+ 1 2 )) 6) (>= (- (* 2 1) (+ 1 2 )) 0) ) ) (and (< (- 1 (+ 1 1 )) 6) (>= (- 1 (+ 1 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 1 1 ))) (select x (- 1 (+ 1 1 )))) (= (select x (- (* 2 1) (+ 1 2 ))) (select x (- 1 (+ 1 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 2 1 )) 6) (>= (- (* 2 1) (+ 2 1 )) 0) ) (and (< (- (* 2 1) (+ 2 2 )) 6) (>= (- (* 2 1) (+ 2 2 )) 0) ) ) (and (< (- 1 (+ 2 1 )) 6) (>= (- 1 (+ 2 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 2 1 ))) (select x (- 1 (+ 2 1 )))) (= (select x (- (* 2 1) (+ 2 2 ))) (select x (- 1 (+ 2 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 3 1 )) 6) (>= (- (* 2 1) (+ 3 1 )) 0) ) (and (< (- (* 2 1) (+ 3 2 )) 6) (>= (- (* 2 1) (+ 3 2 )) 0) ) ) (and (< (- 1 (+ 3 1 )) 6) (>= (- 1 (+ 3 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 3 1 ))) (select x (- 1 (+ 3 1 )))) (= (select x (- (* 2 1) (+ 3 2 ))) (select x (- 1 (+ 3 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 4 1 )) 6) (>= (- (* 2 1) (+ 4 1 )) 0) ) (and (< (- (* 2 1) (+ 4 2 )) 6) (>= (- (* 2 1) (+ 4 2 )) 0) ) ) (and (< (- 1 (+ 4 1 )) 6) (>= (- 1 (+ 4 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 4 1 ))) (select x (- 1 (+ 4 1 )))) (= (select x (- (* 2 1) (+ 4 2 ))) (select x (- 1 (+ 4 1 )))) )) (=> (and (and (and (< (- (* 2 1) (+ 5 1 )) 6) (>= (- (* 2 1) (+ 5 1 )) 0) ) (and (< (- (* 2 1) (+ 5 2 )) 6) (>= (- (* 2 1) (+ 5 2 )) 0) ) ) (and (< (- 1 (+ 5 1 )) 6) (>= (- 1 (+ 5 1 )) 0) ) )(and (= (select x (- (* 2 1) (+ 5 1 ))) (select x (- 1 (+ 5 1 )))) (= (select x (- (* 2 1) (+ 5 2 ))) (select x (- 1 (+ 5 1 )))) )) )(inv-fn x )))
(constraint (=> (inv-fn x )(and (=> (and (and (< (* 2 0) 6) (>= (* 2 0) 0) ) (and (< (+ (* 2 0) 1 ) 6) (>= (+ (* 2 0) 1 ) 0) ) )(= (select x (* 2 0)) (select x (+ (* 2 0) 1 )))) (=> (and (and (< (* 2 1) 6) (>= (* 2 1) 0) ) (and (< (+ (* 2 1) 1 ) 6) (>= (+ (* 2 1) 1 ) 0) ) )(= (select x (* 2 1)) (select x (+ (* 2 1) 1 )))) (=> (and (and (< (* 2 2) 6) (>= (* 2 2) 0) ) (and (< (+ (* 2 2) 1 ) 6) (>= (+ (* 2 2) 1 ) 0) ) )(= (select x (* 2 2)) (select x (+ (* 2 2) 1 )))) (=> (and (and (< (* 2 3) 6) (>= (* 2 3) 0) ) (and (< (+ (* 2 3) 1 ) 6) (>= (+ (* 2 3) 1 ) 0) ) )(= (select x (* 2 3)) (select x (+ (* 2 3) 1 )))) (=> (and (and (< (* 2 4) 6) (>= (* 2 4) 0) ) (and (< (+ (* 2 4) 1 ) 6) (>= (+ (* 2 4) 1 ) 0) ) )(= (select x (* 2 4)) (select x (+ (* 2 4) 1 )))) (=> (and (and (< (* 2 5) 6) (>= (* 2 5) 0) ) (and (< (+ (* 2 5) 1 ) 6) (>= (+ (* 2 5) 1 ) 0) ) )(= (select x (* 2 5)) (select x (+ (* 2 5) 1 )))) )))
(check-synth)

 no solution with array bound 6
Reached max array size 7
equal_arrays.sl
 Declared variable x
 Declared variable y
 Declared variable x!
 Declared variable y!
Starting to bound arrays to width 2
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var y (Array Int Int))
(declare-var x! (Array Int Int))
(declare-var y! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (and (and (= (select y 0) 10) (= (select y 1) 10) ) (and (= (select x 0) 10) (= (select x 1) 10) ) )(inv-fn x y )))
(constraint (=> (and (inv-fn x y ) (and (and (= (select x! 0) (+ (select y 0) 1 )) (= (select y! 0) (+ (select x 0) 1 )) ) (and (= (select x! 1) (+ (select y 1) 1 )) (= (select y! 1) (+ (select x 1) 1 )) ) ) )(inv-fn x! y! )))
(constraint (=> (inv-fn x y )(and (=> (>= 0 0)(= (- (select x 0) (select y 0)) 0)) (=> (>= 1 0)(= (- (select x 1) (select y 1)) 0)) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(and (= (select synth::parameter1 0) (select synth::parameter0 0)) (= (select synth::parameter1 1) (select synth::parameter0 1)) )
after expanding let:
(and (= (select synth::parameter1 0) (select synth::parameter0 0)) (= (select synth::parameter1 1) (select synth::parameter0 1)) )
after removing implications :
(and (= (select synth::parameter1 0) (select synth::parameter0 0)) (= (select synth::parameter1 1) (select synth::parameter0 1)) )
ATTEMPTING TO ADD quant back for (and (= (select synth::parameter1 0) (select synth::parameter0 0)) (= (select synth::parameter1 1) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 0)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 1, which is operand 1
Do any of the constants match? 
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 0)) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var0, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 0 with local_var0, vector idx 0and constant idx 0
replace array indices in (= (select synth::parameter1 local_var0) (select synth::parameter0 0)) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 local_var0) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var0, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 0
About to verify: 

synth_fun::inv-fn -> forall { integer local_var0; local_var0 >= 0 ==> parameter1[local_var0] == parameter0[local_var0] }
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |y| () (Array Int Int))
; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |x!| () (Array Int Int))
; find_symbols
(declare-fun |y!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (forall ((|index#0| Int)) (= (select |y| |index#0|) 10)) (forall ((|index#1| Int)) (= (select |x| |index#1|) 10))) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (= (select |y| |local_var0|) (select |x| |local_var0|))))) (=> (and (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (= (select |y| |local_var0|) (select |x| |local_var0|)))) (forall ((|index#2| Int)) (and (= (select |x!| |index#2|) (+ (select |y| |index#2|) 1)) (= (select |y!| |index#2|) (+ (select |x| |index#2|) 1))))) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (= (select |y!| |local_var0|) (select |x!| |local_var0|))))) (=> (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (= (select |y| |local_var0|) (select |x| |local_var0|)))) (forall ((|index#3| Int)) (=> (>= |index#3| 0) (= (- (select |x| |index#3|) (select |y| |index#3|)) 0)))))))
UNSAT, got solution 
 
DOING ARRAY SYNTHESHS
Result: synth_fun::inv-fn -> forall { integer local_var0; local_var0 >= 0 ==> parameter1[local_var0] == parameter0[local_var0] }
; SMT 2
; Generated for Z3
(set-info :source "")
(set-option :produce-models true)
SMT: synth_fun::inv-fn -> 
; find_symbols
(declare-fun |synth::parameter1| () (Array Int Int))
; find_symbols
(declare-fun |synth::parameter0| () (Array Int Int))
; convert
(define-fun |B0| () Bool (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (= (select |synth::parameter1| |local_var0|) (select |synth::parameter0| |local_var0|)))))


Synthesis time: 0.0490578s
equal_arrays_2.sl
 Declared variable x
 Declared variable y
 Declared variable c1
 Declared variable x!
 Declared variable y!
 Declared variable c1!
Starting to bound arrays to width 2
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var y (Array Int Int))
(declare-var c1 Int)
(declare-var x! (Array Int Int))
(declare-var y! (Array Int Int))
(declare-var c1! Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int))(parameter2 Int))Bool) 
(constraint (=> (and (and (= (select y 0) 10) (= (select y 1) 10) ) (and (= (select x 0) 10) (= (select x 1) 10) ) )(inv-fn x y c1 )))
(constraint (=> (and (inv-fn x y c1 ) (and (and (and (= (select x! 0) (+ (select y 0) c1 )) (= (select y! 0) (+ (select x 0) c1 )) ) (and (= (select x! 1) (+ (select y 1) c1 )) (= (select y! 1) (+ (select x 1) c1 )) ) ) (= c1! c1) ) )(inv-fn x! y! c1 )))
(constraint (=> (inv-fn x y c1 )(and (=> (>= 0 0)(= (- (select x 0) (select y 0)) 0)) (=> (>= 1 0)(= (- (select x 1) (select y 1)) 0)) )))
(check-synth)

exists.sl
 Declared variable x
 Declared variable x!
Starting to bound arrays to width 2
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (or (= (select x 0) 1) (= (select x 1) 1) ) (or (= (select x 0) 0) (= (select x 1) 0) ) )(inv-fn x )))
(constraint (=> (and (inv-fn x ) (and (and (ite (= (select x 0) 0) (= (select x! 0) 1) (ite (= (select x 0) 1) (= (select x! 0) 0) (= (select x! 0) (select x 0)))) ) (and (ite (= (select x 1) 0) (= (select x! 1) 1) (ite (= (select x 1) 1) (= (select x! 1) 0) (= (select x! 1) (select x 1)))) ) ) )(inv-fn x! )))
(constraint (=> (inv-fn x )(or (= (select x 0) 1) (= (select x 1) 1) )))
(check-synth)

exists3.sl
 Declared variable x
 Declared variable x!
Starting to bound arrays to width 2
Is index! Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (= (select x 0) 0) (= (select x 1) 1) )(inv-fn x )))
(constraint (=> (and (inv-fn x ) (= x! (store x 0 0)) )(inv-fn x! )))
(constraint (=> (inv-fn x )(or (= (select x 0) 1) (= (select x 1) 1) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(and (or (= (select synth::parameter0 0) 1) (= (select synth::parameter0 1) 1) ) (= synth::parameter0 (store synth::parameter0 0 0)) )
after expanding let:
(and (or (= (select synth::parameter0 0) 1) (= (select synth::parameter0 1) 1) ) (= synth::parameter0 (store synth::parameter0 0 0)) )
after removing implications :
(and (or (= (select synth::parameter0 0) 1) (= (select synth::parameter0 1) 1) ) (= synth::parameter0 (store synth::parameter0 0 0)) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) 1) (= (select synth::parameter0 1) 1) )
Looking for array index in (= (select synth::parameter0 0) 1) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (= (select synth::parameter0 1) 1) =
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 0
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 0
This and the last comparison
 Comp: 0 and 1 = 0
replace array indices in (= (select synth::parameter0 0) 1) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var0, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var0, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 1
next constant idx 1
ATTEMPTING TO ADD quant back for (and (exists ((local_var0 Int)) (= (select synth::parameter0 local_var0) 1)) (= synth::parameter0 (store synth::parameter0 0 0)) )
Looking for array index in (exists ((local_var0 Int)) (= (select synth::parameter0 local_var0) 1)) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var0
Looking for array index in (tuple) tuple
Looking for array index in local_var0 symbol
Looking for array index in (= (select synth::parameter0 local_var0) 1) =
Looking for array index in (select synth::parameter0 local_var0) index
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (= synth::parameter0 (store synth::parameter0 0 0)) =
Looking for array index in synth::parameter0 symbol
Looking for array index in (store synth::parameter0 0 0) with
Looking for array index in synth::parameter0 symbol
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
About to verify: 

synth_fun::inv-fn -> (exists { integer local_var0; parameter0[local_var0] == 1 }) && parameter0 == parameter0 WITH [0:=0]
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |x!| () (Array Int Int))
; set_to false
(assert (not (and (=> (forall ((|index#0| Int)) (= (select |x| |index#0|) |index#0|)) (and (exists ((|local_var0| Int)) (= (select |x| |local_var0|) 1)) (= |x| (store |x| 0 0)))) (=> (and (and (exists ((|local_var0| Int)) (= (select |x| |local_var0|) 1)) (= |x| (store |x| 0 0))) (= |x!| (store |x| 0 0))) (and (exists ((|local_var0| Int)) (= (select |x!| |local_var0|) 1)) (= |x!| (store |x!| 0 0)))) (=> (and (exists ((|local_var0| Int)) (= (select |x| |local_var0|) 1)) (= |x| (store |x| 0 0))) (exists ((|index#1| Int)) (= (select |x| |index#1|) 1))))))
UNSAT, got solution 
 
DOING ARRAY SYNTHESHS
Result: synth_fun::inv-fn -> (exists { integer local_var0; parameter0[local_var0] == 1 }) && parameter0 == parameter0 WITH [0:=0]
; SMT 2
; Generated for Z3
(set-info :source "")
(set-option :produce-models true)
SMT: synth_fun::inv-fn -> 
; find_symbols
(declare-fun |synth::parameter0| () (Array Int Int))
; convert
(define-fun |B0| () Bool (and (exists ((|local_var0| Int)) (= (select |synth::parameter0| |local_var0|) 1)) (= |synth::parameter0| (store |synth::parameter0| 0 0))))


Synthesis time: 0.259229s
fill1.sl
 Declared variable c
 Declared variable x
 Declared variable x!
 Declared variable c!
Starting to bound arrays to width 2
Is index! Is index! Is declared variable 
Is index! Is index! Adding bounds outside of constraint 
Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var c Int)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(declare-var c! Int)
(synth-fun inv-fn((parameter0 Int)(parameter1 (Array Int Int)))Bool) 
(constraint (=> (and (= c 0) (= (select x 0) 0) )(inv-fn c x )))
(constraint (=> (and (< c 2) (>= c 0) )(=> (and (inv-fn c x ) (and (= c! (+ c 1 )) (and (= (select x! c) 0) (and (=> (not (= 0 c))(= (select x! 0) (select x 0))) (=> (not (= 1 c))(= (select x! 1) (select x 1))) ) ) ) )(inv-fn c! x! ))))
(constraint (=> (inv-fn c x )(and (=> (and (>= 0 0) (< 0 c) )(= (select x 0) 0)) (=> (and (>= 1 0) (< 1 c) )(= (select x 1) 0)) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(and (or (not (bvuge synth::parameter0 1)) (= (select synth::parameter1 0) 0) ) (or (not (bvuge synth::parameter0 2)) (= (select synth::parameter1 1) 0) ) )
after expanding let:
(and (or (not (>= synth::parameter0 1)) (= (select synth::parameter1 0) 0) ) (or (not (>= synth::parameter0 2)) (= (select synth::parameter1 1) 0) ) )
after removing implications :
(and (or (not (>= synth::parameter0 1)) (= (select synth::parameter1 0) 0) ) (or (not (>= synth::parameter0 2)) (= (select synth::parameter1 1) 0) ) )
ATTEMPTING TO ADD quant back for (or (not (>= synth::parameter0 1)) (= (select synth::parameter1 0) 0) )
Looking for array index in (not (bvuge synth::parameter0 1)) not
Looking for array index in (bvuge synth::parameter0 1) >=
Looking for array index in synth::parameter0 symbol
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (= (select synth::parameter1 0) 0) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
ATTEMPTING TO ADD quant back for (or (not (>= synth::parameter0 2)) (= (select synth::parameter1 1) 0) )
Looking for array index in (not (bvuge synth::parameter0 2)) not
Looking for array index in (bvuge synth::parameter0 2) >=
Looking for array index in synth::parameter0 symbol
Looking for array index in 2 constant
Pushing back constant value constant
  * type: integer
  * value: 2
Looking for array index in (= (select synth::parameter1 1) 0) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
ATTEMPTING TO ADD quant back for (and (or (not (>= synth::parameter0 1)) (= (select synth::parameter1 0) 0) ) (or (not (>= synth::parameter0 2)) (= (select synth::parameter1 1) 0) ) )
Looking for array index in (or (not (bvuge synth::parameter0 1)) (= (select synth::parameter1 0) 0) ) or
Looking for array index in (not (bvuge synth::parameter0 1)) not
Looking for array index in (bvuge synth::parameter0 1) >=
Looking for array index in synth::parameter0 symbol
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (= (select synth::parameter1 0) 0) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 0
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (or (not (bvuge synth::parameter0 2)) (= (select synth::parameter1 1) 0) ) or
Looking for array index in (not (bvuge synth::parameter0 2)) not
Looking for array index in (bvuge synth::parameter0 2) >=
Looking for array index in synth::parameter0 symbol
Looking for array index in 2 constant
Pushing back constant value constant
  * type: integer
  * value: 2
Looking for array index in (= (select synth::parameter1 1) 0) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 2, 0
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 1
constant adjustments 0 -1
This and the last comparison
 Comp: 1 and 1 = 1
Comp: 0 and 1 = 0
replace array indices in (or (not (>= synth::parameter0 1)) (= (select synth::parameter1 0) 0) ) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (not (>= synth::parameter0 1)) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (>= synth::parameter0 1) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var0, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 2
REPLACED 
next constant idx 1
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 0and constant idx 1
calling from the bottom 
replace array indices in 1 with local_var0, vector idx 0and constant idx 1
Attempting to replace constant, constant vector idx: 1 and size of constant adjustments 2
next constant idx 2
calling from the bottom 
replace array indices in (= (select synth::parameter1 0) 0) with local_var0, vector idx 0and constant idx 2
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var0, vector idx 0and constant idx 2
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var0, vector idx 1and constant idx 2
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 2
calling from the bottom 
replace array indices in 0 with local_var0, vector idx 0and constant idx 2
About to verify: 

synth_fun::inv-fn -> forall { integer local_var0; local_var0 >= 0 ==> !(parameter0 >= local_var0 + 1) || parameter1[local_var0] == 0 }
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |c| () Int)
; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |c!| () Int)
; find_symbols
(declare-fun |x!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= |c| 0) (= (select |x| 0) 0)) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (or (not (>= |c| (+ |local_var0| 1))) (= (select |x| |local_var0|) 0))))) (=> (and (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (or (not (>= |c| (+ |local_var0| 1))) (= (select |x| |local_var0|) 0)))) (and (= |c!| (+ |c| 1)) (and (= (select |x!| |c|) 0) (forall ((|index#0| Int)) (=> (not (= |index#0| |c|)) (= (select |x!| |index#0|) (select |x| |index#0|))))))) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (or (not (>= |c!| (+ |local_var0| 1))) (= (select |x!| |local_var0|) 0))))) (=> (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (or (not (>= |c| (+ |local_var0| 1))) (= (select |x| |local_var0|) 0)))) (forall ((|index#1| Int)) (=> (and (>= |index#1| 0) (< |index#1| |c|)) (= (select |x| |index#1|) 0)))))))
UNSAT, got solution 
 
DOING ARRAY SYNTHESHS
Result: synth_fun::inv-fn -> forall { integer local_var0; local_var0 >= 0 ==> !(parameter0 >= local_var0 + 1) || parameter1[local_var0] == 0 }
; SMT 2
; Generated for Z3
(set-info :source "")
(set-option :produce-models true)
SMT: synth_fun::inv-fn -> 
; find_symbols
(declare-fun |synth::parameter0| () Int)
; find_symbols
(declare-fun |synth::parameter1| () (Array Int Int))
; convert
(define-fun |B0| () Bool (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (or (not (>= |synth::parameter0| (+ |local_var0| 1))) (= (select |synth::parameter1| |local_var0|) 0)))))


Synthesis time: 0.0496809s
fill2.sl
 Declared variable c
 Declared variable k
 Declared variable x
Starting to bound arrays to width 2
Is index! Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var c Int)
(declare-var k Int)
(declare-var x (Array Int Int))
(synth-fun inv-fn((parameter0 Int)(parameter1 Int)(parameter2 (Array Int Int)))Bool) 
(constraint (=> (and (= k 1000) (and (=> (< 0 k)(= (select x 0) c)) (=> (< 1 k)(= (select x 1) c)) ) )(inv-fn c k x )))
(constraint (=> (inv-fn c k x )(or (and (= (select x 0) c) (and (=> (and (>= 0 0) (< 0 0) )(= (select x 0) c)) (=> (and (>= 1 0) (< 1 0) )(= (select x 1) c)) ) ) (and (= (select x 1) c) (and (=> (and (>= 0 0) (< 0 1) )(= (select x 0) c)) (=> (and (>= 1 0) (< 1 1) )(= (select x 1) c)) ) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(= synth::parameter0 (select synth::parameter2 0))
after expanding let:
(= synth::parameter0 (select synth::parameter2 0))
after removing implications :
(= synth::parameter0 (select synth::parameter2 0))
About to verify: 

synth_fun::inv-fn -> parameter0 == parameter2[0]
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |k| () Int)
; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |c| () Int)
; set_to false
(assert (not (and (=> (and (= |k| 1000) (forall ((|index#0| Int)) (=> (< |index#0| |k|) (= (select |x| |index#0|) |c|)))) (= |c| (select |x| 0))) (=> (= |c| (select |x| 0)) (exists ((|index#1| Int)) (and (= (select |x| |index#1|) |c|) (forall ((|index2#0| Int)) (=> (and (>= |index2#0| 0) (< |index2#0| |index#1|)) (= (select |x| |index2#0|) |c|)))))))))
UNSAT, got solution 
 
DOING ARRAY SYNTHESHS
Result: synth_fun::inv-fn -> parameter0 == parameter2[0]
; SMT 2
; Generated for Z3
(set-info :source "")
(set-option :produce-models true)
SMT: synth_fun::inv-fn -> 
; find_symbols
(declare-fun |synth::parameter0| () Int)
; find_symbols
(declare-fun |synth::parameter2| () (Array Int Int))
; convert
(define-fun |B0| () Bool (= |synth::parameter0| (select |synth::parameter2| 0)))


Synthesis time: 0.0414003s
fill3.sl
 Declared variable c
 Declared variable x
 Declared variable x!
 Declared variable c!
Starting to bound arrays to width 2
Is index! Is index! Is declared variable 
Is index! Is index! Adding bounds outside of constraint 
Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var c Int)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(declare-var c! Int)
(synth-fun inv-fn((parameter0 Int)(parameter1 (Array Int Int)))Bool) 
(constraint (=> (and (= c 0) (= (select x 0) 0) )(inv-fn c x )))
(constraint (=> (and (< c 2) (>= c 0) )(=> (and (inv-fn c x ) (and (= c! (+ c 1 )) (and (= (select x! c) 0) (and (=> (not (= 0 c))(= (select x! 0) (select x 0))) (=> (not (= 1 c))(= (select x! 1) (select x 1))) ) ) ) )(inv-fn c! x! ))))
(constraint (=> (and (>= c 3) (inv-fn c x ) )(and (=> (and (>= 0 0) (< 0 3) )(= (select x 0) 0)) (=> (and (>= 1 0) (< 1 3) )(= (select x 1) 0)) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(or (not (bvuge synth::parameter0 3)) (and (= (select synth::parameter1 0) 0) (= (select synth::parameter1 1) 0) ) )
after expanding let:
(or (not (>= synth::parameter0 3)) (and (= (select synth::parameter1 0) 0) (= (select synth::parameter1 1) 0) ) )
after removing implications :
(or (not (>= synth::parameter0 3)) (and (= (select synth::parameter1 0) 0) (= (select synth::parameter1 1) 0) ) )
ATTEMPTING TO ADD quant back for (and (= (select synth::parameter1 0) 0) (= (select synth::parameter1 1) 0) )
Looking for array index in (= (select synth::parameter1 0) 0) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (= (select synth::parameter1 1) 0) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 0 -1
This and the last comparison
 Comp: 0 and 1 = 0
replace array indices in (= (select synth::parameter1 0) 0) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var0, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in 0 with local_var0, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 1
next constant idx 1
ATTEMPTING TO ADD quant back for (or (not (>= synth::parameter0 3)) (forall ((local_var0 Int)) (=> (>= local_var0 0)(= (select synth::parameter1 local_var0) 0))) )
Looking for array index in (not (bvuge synth::parameter0 3)) not
Looking for array index in (bvuge synth::parameter0 3) >=
Looking for array index in synth::parameter0 symbol
Looking for array index in 3 constant
Pushing back constant value constant
  * type: integer
  * value: 3
Looking for array index in (forall ((local_var0 Int)) (=> (bvuge local_var0 0)(= (select synth::parameter1 local_var0) 0))) forall
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var0
Looking for array index in (tuple) tuple
Looking for array index in local_var0 symbol
Looking for array index in (=> (bvuge local_var0 0)(= (select synth::parameter1 local_var0) 0)) =>
Looking for array index in (bvuge local_var0 0) >=
Looking for array index in local_var0 symbol
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (= (select synth::parameter1 local_var0) 0) =
Looking for array index in (select synth::parameter1 local_var0) index
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
About to verify: 

synth_fun::inv-fn -> !(parameter0 >= 3) || (forall { integer local_var0; local_var0 >= 0 ==> parameter1[local_var0] == 0 })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |c| () Int)
; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |c!| () Int)
; find_symbols
(declare-fun |x!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= |c| 0) (= (select |x| 0) 0)) (or (not (>= |c| 3)) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (= (select |x| |local_var0|) 0))))) (=> (and (or (not (>= |c| 3)) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (= (select |x| |local_var0|) 0)))) (and (= |c!| (+ |c| 1)) (and (= (select |x!| |c|) 0) (forall ((|index#0| Int)) (=> (not (= |index#0| |c|)) (= (select |x!| |index#0|) (select |x| |index#0|))))))) (or (not (>= |c!| 3)) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (= (select |x!| |local_var0|) 0))))) (=> (and (>= |c| 3) (or (not (>= |c| 3)) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (= (select |x| |local_var0|) 0))))) (forall ((|index#1| Int)) (=> (and (>= |index#1| 0) (< |index#1| 3)) (= (select |x| |index#1|) 0)))))))
SAT, got counterexample.

Starting to bound arrays to width 3
Is index! Is index! Is declared variable 
Is index! Is index! Adding bounds outside of constraint 
Is index! Array size bounded to width 3
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var c Int)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(declare-var c! Int)
(synth-fun inv-fn((parameter0 Int)(parameter1 (Array Int Int)))Bool) 
(constraint (=> (and (= c 0) (= (select x 0) 0) )(inv-fn c x )))
(constraint (=> (and (< c 3) (>= c 0) )(=> (and (inv-fn c x ) (and (= c! (+ c 1 )) (and (= (select x! c) 0) (and (=> (not (= 0 c))(= (select x! 0) (select x 0))) (=> (not (= 1 c))(= (select x! 1) (select x 1))) (=> (not (= 2 c))(= (select x! 2) (select x 2))) ) ) ) )(inv-fn c! x! ))))
(constraint (=> (and (>= c 3) (inv-fn c x ) )(and (=> (and (>= 0 0) (< 0 3) )(= (select x 0) 0)) (=> (and (>= 1 0) (< 1 3) )(= (select x 1) 0)) (=> (and (>= 2 0) (< 2 3) )(= (select x 2) 0)) )))
(check-synth)

fill_harder.sl
 Declared variable c
 Declared variable k
 Declared variable x
 Declared variable x!
 Declared variable c!
 Declared variable k!
Starting to bound arrays to width 2
Is index! Is index! Is index! Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var c Int)
(declare-var k Int)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(declare-var c! Int)
(declare-var k! Int)
(synth-fun inv-fn((parameter0 Int)(parameter1 Int)(parameter2 (Array Int Int)))Bool) 
(constraint (=> (and (= k 1000) (and (=> (< 0 k)(= (select x 0) c)) (=> (< 1 k)(= (select x 1) c)) ) )(inv-fn c k x )))
(constraint (=> (and (inv-fn c k x ) (and (and (= (select x! 0) (+ (select x 0) 1 )) (= (select x! 1) (+ (select x 1) 1 )) ) (= c! (+ c 1 )) ) )(inv-fn c! k! x! )))
(constraint (=> (inv-fn c k x )(or (and (= (select x 0) c) (and (=> (and (>= 0 0) (< 0 0) )(= (select x 0) c)) (=> (and (>= 1 0) (< 1 0) )(= (select x 1) c)) ) ) (and (= (select x 1) c) (and (=> (and (>= 0 0) (< 0 1) )(= (select x 0) c)) (=> (and (>= 1 0) (< 1 1) )(= (select x 1) c)) ) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(= synth::parameter0 (select synth::parameter2 0))
after expanding let:
(= synth::parameter0 (select synth::parameter2 0))
after removing implications :
(= synth::parameter0 (select synth::parameter2 0))
About to verify: 

synth_fun::inv-fn -> parameter0 == parameter2[0]
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |k| () Int)
; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |c| () Int)
; find_symbols
(declare-fun |x!| () (Array Int Int))
; find_symbols
(declare-fun |c!| () Int)
; set_to false
(assert (not (and (=> (and (= |k| 1000) (forall ((|index#0| Int)) (=> (< |index#0| |k|) (= (select |x| |index#0|) |c|)))) (= |c| (select |x| 0))) (=> (and (= |c| (select |x| 0)) (and (forall ((|index#1| Int)) (= (select |x!| |index#1|) (+ (select |x| |index#1|) 1))) (= |c!| (+ |c| 1)))) (= |c!| (select |x!| 0))) (=> (= |c| (select |x| 0)) (exists ((|index#2| Int)) (and (= (select |x| |index#2|) |c|) (forall ((|index2#0| Int)) (=> (and (>= |index2#0| 0) (< |index2#0| |index#2|)) (= (select |x| |index2#0|) |c|)))))))))
UNSAT, got solution 
 
DOING ARRAY SYNTHESHS
Result: synth_fun::inv-fn -> parameter0 == parameter2[0]
; SMT 2
; Generated for Z3
(set-info :source "")
(set-option :produce-models true)
SMT: synth_fun::inv-fn -> 
; find_symbols
(declare-fun |synth::parameter0| () Int)
; find_symbols
(declare-fun |synth::parameter2| () (Array Int Int))
; convert
(define-fun |B0| () Bool (= |synth::parameter0| (select |synth::parameter2| 0)))


Synthesis time: 0.103198s
find_first.sl
 Declared variable x
 Declared variable c
Starting to bound arrays to width 2
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var c Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 Int))Bool) 
(constraint (=> (and (< c 2) (>= c 0) )(=> (= (select x c) 10)(inv-fn x c ))))
(constraint (=> (inv-fn x c )(or (=> (>= 0 0)(and (= (select x 0) 10) (and (=> (and (>= 0 0) (< 0 0) )(not (= (select x 0) 10))) (=> (and (>= 1 0) (< 1 0) )(not (= (select x 1) 10))) ) )) (=> (>= 1 0)(and (= (select x 1) 10) (and (=> (and (>= 0 0) (< 0 1) )(not (= (select x 0) 10))) (=> (and (>= 1 0) (< 1 1) )(not (= (select x 1) 10))) ) )) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(or (= (select synth::parameter0 0) 10) (= (select synth::parameter0 1) 10) )
after expanding let:
(or (= (select synth::parameter0 0) 10) (= (select synth::parameter0 1) 10) )
after removing implications :
(or (= (select synth::parameter0 0) 10) (= (select synth::parameter0 1) 10) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) 10) (= (select synth::parameter0 1) 10) )
Looking for array index in (= (select synth::parameter0 0) 10) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in 10 constant
Pushing back constant value constant
  * type: integer
  * value: 10
Looking for array index in (= (select synth::parameter0 1) 10) =
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 0
Looking for array index in 10 constant
Pushing back constant value constant
  * type: integer
  * value: 10
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 10 9
This and the last comparison
 Comp: 0 and 1 = 0
replace array indices in (= (select synth::parameter0 0) 10) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var0, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in 10 with local_var0, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 1
next constant idx 1
About to verify: 

synth_fun::inv-fn -> exists { integer local_var0; parameter0[local_var0] == 10 }
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |c| () Int)
; set_to false
(assert (not (and (=> (= (select |x| |c|) 10) (exists ((|local_var0| Int)) (= (select |x| |local_var0|) 10))) (=> (exists ((|local_var0| Int)) (= (select |x| |local_var0|) 10)) (exists ((|index#0| Int)) (=> (>= |index#0| 0) (and (= (select |x| |index#0|) 10) (forall ((|index2#0| Int)) (=> (and (>= |index2#0| 0) (< |index2#0| |index#0|)) (not (= (select |x| |index2#0|) 10)))))))))))
UNSAT, got solution 
 
DOING ARRAY SYNTHESHS
Result: synth_fun::inv-fn -> exists { integer local_var0; parameter0[local_var0] == 10 }
; SMT 2
; Generated for Z3
(set-info :source "")
(set-option :produce-models true)
SMT: synth_fun::inv-fn -> 
; find_symbols
(declare-fun |synth::parameter0| () (Array Int Int))
; convert
(define-fun |B0| () Bool (exists ((|local_var0| Int)) (= (select |synth::parameter0| |local_var0|) 10)))


Synthesis time: 0.0536444s
find_first_harder.sl
 Declared variable x
 Declared variable c
 Declared variable x!
 Declared variable c!
Starting to bound arrays to width 2
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var c Int)
(declare-var x! (Array Int Int))
(declare-var c! Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 Int))Bool) 
(constraint (=> (and (< c 2) (>= c 0) )(=> (= (select x c) 10)(inv-fn x c ))))
(constraint (=> (and (inv-fn x c ) (and (and (ite (= (select x 0) 10) (= (select x! 0) 10) (= (select x! 0) (+ (select x 0) 1 ))) (= c! c) ) (and (ite (= (select x 1) 10) (= (select x! 1) 10) (= (select x! 1) (+ (select x 1) 1 ))) (= c! c) ) ) )(inv-fn x! c! )))
(constraint (=> (inv-fn x c )(or (=> (>= 0 0)(and (= (select x 0) 10) (and (=> (and (>= 0 0) (< 0 0) )(not (= (select x 0) 10))) (=> (and (>= 1 0) (< 1 0) )(not (= (select x 1) 10))) ) )) (=> (>= 1 0)(and (= (select x 1) 10) (and (=> (and (>= 0 0) (< 0 1) )(not (= (select x 0) 10))) (=> (and (>= 1 0) (< 1 1) )(not (= (select x 1) 10))) ) )) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(or (= (select synth::parameter0 0) 10) (= (select synth::parameter0 1) 10) )
after expanding let:
(or (= (select synth::parameter0 0) 10) (= (select synth::parameter0 1) 10) )
after removing implications :
(or (= (select synth::parameter0 0) 10) (= (select synth::parameter0 1) 10) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) 10) (= (select synth::parameter0 1) 10) )
Looking for array index in (= (select synth::parameter0 0) 10) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in 10 constant
Pushing back constant value constant
  * type: integer
  * value: 10
Looking for array index in (= (select synth::parameter0 1) 10) =
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 0
Looking for array index in 10 constant
Pushing back constant value constant
  * type: integer
  * value: 10
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 10 9
This and the last comparison
 Comp: 0 and 1 = 0
replace array indices in (= (select synth::parameter0 0) 10) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var0, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in 10 with local_var0, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 1
next constant idx 1
About to verify: 

synth_fun::inv-fn -> exists { integer local_var0; parameter0[local_var0] == 10 }
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |c| () Int)
; find_symbols
(declare-fun |x!| () (Array Int Int))
; find_symbols
(declare-fun |c!| () Int)
; set_to false
(assert (not (and (=> (= (select |x| |c|) 10) (exists ((|local_var0| Int)) (= (select |x| |local_var0|) 10))) (=> (and (exists ((|local_var0| Int)) (= (select |x| |local_var0|) 10)) (forall ((|index#0| Int)) (and (ite (= (select |x| |index#0|) 10) (= (select |x!| |index#0|) 10) (= (select |x!| |index#0|) (+ (select |x| |index#0|) 1))) (= |c!| |c|)))) (exists ((|local_var0| Int)) (= (select |x!| |local_var0|) 10))) (=> (exists ((|local_var0| Int)) (= (select |x| |local_var0|) 10)) (exists ((|index#1| Int)) (=> (>= |index#1| 0) (and (= (select |x| |index#1|) 10) (forall ((|index2#0| Int)) (=> (and (>= |index2#0| 0) (< |index2#0| |index#1|)) (not (= (select |x| |index2#0|) 10)))))))))))
UNSAT, got solution 
 
DOING ARRAY SYNTHESHS
Result: synth_fun::inv-fn -> exists { integer local_var0; parameter0[local_var0] == 10 }
; SMT 2
; Generated for Z3
(set-info :source "")
(set-option :produce-models true)
SMT: synth_fun::inv-fn -> 
; find_symbols
(declare-fun |synth::parameter0| () (Array Int Int))
; convert
(define-fun |B0| () Bool (exists ((|local_var0| Int)) (= (select |synth::parameter0| |local_var0|) 10)))


Synthesis time: 0.0551096s
marker.sl
 Declared variable a
 Declared variable i
 Declared variable pos
 Declared variable a!
 Declared variable i!
 Declared variable pos!
Starting to bound arrays to width 2
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Is declared variable 
Adding bounds outside of constraint 
Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var i Int)
(declare-var pos Int)
(declare-var a! (Array Int Int))
(declare-var i! Int)
(declare-var pos! Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 Int)(parameter2 Int))Bool) 
(constraint (=> (and (< pos 2) (>= pos 0) )(=> (and (= (select a pos) 7) (= i 0) (>= 0 pos) )(inv-fn a i pos ))))
(constraint (=> (and (< i 2) (>= i 0) )(=> (and (inv-fn a i pos ) (and (ite (= (select a i) 7) (= i! i) (= i! (+ i 1 ))) (= pos! pos) (= a! a) ) )(inv-fn a! i! pos! ))))
(constraint (=> (inv-fn a i i )(<= i i)))
(check-synth)

Verifying solution from CVC4

SOLUTIONtrue
after expanding let:
true
after removing implications :
true
About to verify: 

synth_fun::inv-fn -> TRUE
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |pos| () Int)
; find_symbols
(declare-fun |i| () Int)
; find_symbols
(declare-fun |i!| () Int)
; find_symbols
(declare-fun |pos!| () Int)
; find_symbols
(declare-fun |a!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= (select |a| |pos|) 7) (= |i| 0) (>= 0 |pos|)) true) (=> (and true (and (ite (= (select |a| |i|) 7) (= |i!| |i|) (= |i!| (+ |i| 1))) (= |pos!| |pos|) (= |a!| |a|))) true) (=> true (<= |i| |i|)))))
UNSAT, got solution 
 
DOING ARRAY SYNTHESHS
Result: synth_fun::inv-fn -> TRUE
; SMT 2
; Generated for Z3
(set-info :source "")
(set-option :produce-models true)
SMT: synth_fun::inv-fn -> 

Synthesis time: 0.0376893s
max.sl
 Declared variable a
 Declared variable max
 Declared variable i
 Declared variable a!
 Declared variable max!
 Declared variable i!
Starting to bound arrays to width 2
Is index! Is index! Is declared variable 
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var max Int)
(declare-var i Int)
(declare-var a! (Array Int Int))
(declare-var max! Int)
(declare-var i! Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 Int)(parameter2 Int))Bool) 
(constraint (=> (and (= max (select a 0)) (= i 0) )(inv-fn a max i )))
(constraint (=> (and (< i 2) (>= i 0) )(=> (and (inv-fn a max i ) (and (= i! (+ i 1 )) (=> (> (select a i) max)(= max! (select a i))) ) )(inv-fn a! max! i! ))))
(constraint (=> (inv-fn a max i )(and (=> (and (>= 0 0) (< 0 i) )(<= (select a 0) max)) (=> (and (>= 1 0) (< 1 i) )(<= (select a 1) max)) )))
(check-synth)

min.sl
 Declared variable a
 Declared variable min
 Declared variable i
 Declared variable a!
 Declared variable min!
 Declared variable i!
Starting to bound arrays to width 2
Is index! Is declared variable 
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var min Int)
(declare-var i Int)
(declare-var a! (Array Int Int))
(declare-var min! Int)
(declare-var i! Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 Int)(parameter2 Int))Bool) 
(constraint (=> (and (= min 0) (= i 0) )(inv-fn a min i )))
(constraint (=> (and (< i 2) (>= i 0) )(=> (and (inv-fn a min i ) (or (> i 100) (and (= i! (+ i 1 )) (=> (< (select a i) min)(= min! (select a i))) ) ) )(inv-fn a! min! i! ))))
(constraint (=> (and (inv-fn a min i ) (>= i 100) )(and (=> (< 0 100)(> (select a 0) min)) (=> (< 1 100)(> (select a 1) min)) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(or (not (bvuge synth::parameter2 100)) (and (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0)) ) )
after expanding let:
(or (not (>= synth::parameter2 100)) (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) ) )
after removing implications :
(or (not (>= synth::parameter2 100)) (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) ) )
ATTEMPTING TO ADD quant back for (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) )
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 0)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 1)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 0
constant adjustments 0 -1
This and the last comparison
 Comp: 0 and 1 = 0
Comp: 0 and 1 = 0
replace array indices in (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (* -1 (select synth::parameter0 0)) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in -1 with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var0, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 2
next constant idx 1
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var0, vector idx 0and constant idx 1
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var0, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in 0 with local_var0, vector idx 0and constant idx 1
Attempting to replace constant, constant vector idx: 1 and size of constant adjustments 2
next constant idx 2
ATTEMPTING TO ADD quant back for (or (not (>= synth::parameter2 100)) (forall ((local_var0 Int)) (=> (>= local_var0 0)(not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 local_var0)) ) 0)))) )
Looking for array index in (not (bvuge synth::parameter2 100)) not
Looking for array index in (bvuge synth::parameter2 100) >=
Looking for array index in synth::parameter2 symbol
Looking for array index in 100 constant
Pushing back constant value constant
  * type: integer
  * value: 100
Looking for array index in (forall ((local_var0 Int)) (=> (bvuge local_var0 0)(not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var0)) ) 0)))) forall
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var0
Looking for array index in (tuple) tuple
Looking for array index in local_var0 symbol
Looking for array index in (=> (bvuge local_var0 0)(not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var0)) ) 0))) =>
Looking for array index in (bvuge local_var0 0) >=
Looking for array index in local_var0 symbol
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var0)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var0)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var0)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 local_var0)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 local_var0) index
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
About to verify: 

synth_fun::inv-fn -> !(parameter2 >= 100) || (forall { integer local_var0; local_var0 >= 0 ==> !(parameter1 + -1 * parameter0[local_var0] >= 0) })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |min| () Int)
; find_symbols
(declare-fun |i| () Int)
; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |i!| () Int)
; find_symbols
(declare-fun |min!| () Int)
; find_symbols
(declare-fun |a!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= |min| 0) (= |i| 0)) (or (not (>= |i| 100)) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var0|))) 0)))))) (=> (and (or (not (>= |i| 100)) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var0|))) 0))))) (or (> |i| 100) (and (= |i!| (+ |i| 1)) (=> (< (select |a| |i|) |min|) (= |min!| (select |a| |i|)))))) (or (not (>= |i!| 100)) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (not (>= (+ |min!| (* (- 1) (select |a!| |local_var0|))) 0)))))) (=> (and (or (not (>= |i| 100)) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var0|))) 0))))) (>= |i| 100)) (forall ((|index#0| Int)) (=> (< |index#0| 100) (> (select |a| |index#0|) |min|)))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a!
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 3
Is index! Is declared variable 
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Array size bounded to width 3
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var min Int)
(declare-var i Int)
(declare-var a! (Array Int Int))
(declare-var min! Int)
(declare-var i! Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 Int)(parameter2 Int))Bool) 
(constraint (=> (and (= min 0) (= i 0) )(inv-fn a min i )))
(constraint (=> (and (< i 3) (>= i 0) )(=> (and (inv-fn a min i ) (or (> i 100) (and (= i! (+ i 1 )) (=> (< (select a i) min)(= min! (select a i))) ) ) )(inv-fn a! min! i! ))))
(constraint (=> (and (inv-fn a min i ) (>= i 100) )(and (=> (< 0 100)(> (select a 0) min)) (=> (< 1 100)(> (select a 1) min)) (=> (< 2 100)(> (select a 2) min)) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(or (not (bvuge synth::parameter2 100)) (and (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) 0)) ) )
after expanding let:
(or (not (>= synth::parameter2 100)) (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 2)) ) 0)) ) )
after removing implications :
(or (not (>= synth::parameter2 100)) (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 2)) ) 0)) ) )
ATTEMPTING TO ADD quant back for (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 2)) ) 0)) )
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 0)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 1)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 2)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 0
constant adjustments 0 -1
This and the last comparison
 Comp: 0 and 1 = 0
Comp: 0 and 1 = 0
Checking this for 2, which is operand 2
Do any of the constants match? 
constant adjustments 1 -1
constant adjustments 0 -2
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
replace array indices in (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (* -1 (select synth::parameter0 0)) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in -1 with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var1, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 2
next constant idx 1
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var1, vector idx 0and constant idx 1
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var1, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in local_var1 with local_var1, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in 0 with local_var1, vector idx 0and constant idx 1
Attempting to replace constant, constant vector idx: 1 and size of constant adjustments 2
next constant idx 2
ATTEMPTING TO ADD quant back for (or (not (>= synth::parameter2 100)) (forall ((local_var1 Int)) (=> (>= local_var1 0)(not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 local_var1)) ) 0)))) )
Looking for array index in (not (bvuge synth::parameter2 100)) not
Looking for array index in (bvuge synth::parameter2 100) >=
Looking for array index in synth::parameter2 symbol
Looking for array index in 100 constant
Pushing back constant value constant
  * type: integer
  * value: 100
Looking for array index in (forall ((local_var1 Int)) (=> (bvuge local_var1 0)(not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var1)) ) 0)))) forall
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var1
Looking for array index in (tuple) tuple
Looking for array index in local_var1 symbol
Looking for array index in (=> (bvuge local_var1 0)(not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var1)) ) 0))) =>
Looking for array index in (bvuge local_var1 0) >=
Looking for array index in local_var1 symbol
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var1)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var1)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var1)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 local_var1)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 local_var1) index
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
About to verify: 

synth_fun::inv-fn -> !(parameter2 >= 100) || (forall { integer local_var1; local_var1 >= 0 ==> !(parameter1 + -1 * parameter0[local_var1] >= 0) })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |min| () Int)
; find_symbols
(declare-fun |i| () Int)
; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |i!| () Int)
; find_symbols
(declare-fun |min!| () Int)
; find_symbols
(declare-fun |a!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= |min| 0) (= |i| 0)) (or (not (>= |i| 100)) (forall ((|local_var1| Int)) (=> (>= |local_var1| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var1|))) 0)))))) (=> (and (or (not (>= |i| 100)) (forall ((|local_var1| Int)) (=> (>= |local_var1| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var1|))) 0))))) (or (> |i| 100) (and (= |i!| (+ |i| 1)) (=> (< (select |a| |i|) |min|) (= |min!| (select |a| |i|)))))) (or (not (>= |i!| 100)) (forall ((|local_var1| Int)) (=> (>= |local_var1| 0) (not (>= (+ |min!| (* (- 1) (select |a!| |local_var1|))) 0)))))) (=> (and (or (not (>= |i| 100)) (forall ((|local_var1| Int)) (=> (>= |local_var1| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var1|))) 0))))) (>= |i| 100)) (forall ((|index#0| Int)) (=> (< |index#0| 100) (> (select |a| |index#0|) |min|)))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 4
Is index! Is declared variable 
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Array size bounded to width 4
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var min Int)
(declare-var i Int)
(declare-var a! (Array Int Int))
(declare-var min! Int)
(declare-var i! Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 Int)(parameter2 Int))Bool) 
(constraint (=> (and (= min 0) (= i 0) )(inv-fn a min i )))
(constraint (=> (and (< i 4) (>= i 0) )(=> (and (inv-fn a min i ) (or (> i 100) (and (= i! (+ i 1 )) (=> (< (select a i) min)(= min! (select a i))) ) ) )(inv-fn a! min! i! ))))
(constraint (=> (and (inv-fn a min i ) (>= i 100) )(and (=> (< 0 100)(> (select a 0) min)) (=> (< 1 100)(> (select a 1) min)) (=> (< 2 100)(> (select a 2) min)) (=> (< 3 100)(> (select a 3) min)) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(or (not (bvuge synth::parameter2 100)) (and (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 3)) ) 0)) ) )
after expanding let:
(or (not (>= synth::parameter2 100)) (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 2)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 3)) ) 0)) ) )
after removing implications :
(or (not (>= synth::parameter2 100)) (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 2)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 3)) ) 0)) ) )
ATTEMPTING TO ADD quant back for (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 2)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 3)) ) 0)) )
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 0)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 1)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 2)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 3)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 3)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 3)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 3)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 0
constant adjustments 0 -1
This and the last comparison
 Comp: 0 and 1 = 0
Comp: 0 and 1 = 0
Checking this for 2, which is operand 2
Do any of the constants match? 
constant adjustments 1 -1
constant adjustments 0 -2
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
Checking this for 3, which is operand 3
Do any of the constants match? 
constant adjustments 1 -2
constant adjustments 0 -3
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
replace array indices in (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0) with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (* -1 (select synth::parameter0 0)) with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in -1 with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var2, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 2
next constant idx 1
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var2, vector idx 0and constant idx 1
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var2, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in local_var2 with local_var2, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in 0 with local_var2, vector idx 0and constant idx 1
Attempting to replace constant, constant vector idx: 1 and size of constant adjustments 2
next constant idx 2
ATTEMPTING TO ADD quant back for (or (not (>= synth::parameter2 100)) (forall ((local_var2 Int)) (=> (>= local_var2 0)(not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 local_var2)) ) 0)))) )
Looking for array index in (not (bvuge synth::parameter2 100)) not
Looking for array index in (bvuge synth::parameter2 100) >=
Looking for array index in synth::parameter2 symbol
Looking for array index in 100 constant
Pushing back constant value constant
  * type: integer
  * value: 100
Looking for array index in (forall ((local_var2 Int)) (=> (bvuge local_var2 0)(not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var2)) ) 0)))) forall
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var2
Looking for array index in (tuple) tuple
Looking for array index in local_var2 symbol
Looking for array index in (=> (bvuge local_var2 0)(not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var2)) ) 0))) =>
Looking for array index in (bvuge local_var2 0) >=
Looking for array index in local_var2 symbol
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var2)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var2)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var2)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 local_var2)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 local_var2) index
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
About to verify: 

synth_fun::inv-fn -> !(parameter2 >= 100) || (forall { integer local_var2; local_var2 >= 0 ==> !(parameter1 + -1 * parameter0[local_var2] >= 0) })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |min| () Int)
; find_symbols
(declare-fun |i| () Int)
; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |i!| () Int)
; find_symbols
(declare-fun |min!| () Int)
; find_symbols
(declare-fun |a!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= |min| 0) (= |i| 0)) (or (not (>= |i| 100)) (forall ((|local_var2| Int)) (=> (>= |local_var2| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var2|))) 0)))))) (=> (and (or (not (>= |i| 100)) (forall ((|local_var2| Int)) (=> (>= |local_var2| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var2|))) 0))))) (or (> |i| 100) (and (= |i!| (+ |i| 1)) (=> (< (select |a| |i|) |min|) (= |min!| (select |a| |i|)))))) (or (not (>= |i!| 100)) (forall ((|local_var2| Int)) (=> (>= |local_var2| 0) (not (>= (+ |min!| (* (- 1) (select |a!| |local_var2|))) 0)))))) (=> (and (or (not (>= |i| 100)) (forall ((|local_var2| Int)) (=> (>= |local_var2| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var2|))) 0))))) (>= |i| 100)) (forall ((|index#0| Int)) (=> (< |index#0| 100) (> (select |a| |index#0|) |min|)))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 5
Is index! Is declared variable 
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Array size bounded to width 5
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var min Int)
(declare-var i Int)
(declare-var a! (Array Int Int))
(declare-var min! Int)
(declare-var i! Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 Int)(parameter2 Int))Bool) 
(constraint (=> (and (= min 0) (= i 0) )(inv-fn a min i )))
(constraint (=> (and (< i 5) (>= i 0) )(=> (and (inv-fn a min i ) (or (> i 100) (and (= i! (+ i 1 )) (=> (< (select a i) min)(= min! (select a i))) ) ) )(inv-fn a! min! i! ))))
(constraint (=> (and (inv-fn a min i ) (>= i 100) )(and (=> (< 0 100)(> (select a 0) min)) (=> (< 1 100)(> (select a 1) min)) (=> (< 2 100)(> (select a 2) min)) (=> (< 3 100)(> (select a 3) min)) (=> (< 4 100)(> (select a 4) min)) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(or (not (bvuge synth::parameter2 100)) (and (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 3)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 4)) ) 0)) ) )
after expanding let:
(or (not (>= synth::parameter2 100)) (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 2)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 3)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 4)) ) 0)) ) )
after removing implications :
(or (not (>= synth::parameter2 100)) (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 2)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 3)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 4)) ) 0)) ) )
ATTEMPTING TO ADD quant back for (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 2)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 3)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 4)) ) 0)) )
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 0)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 1)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 2)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 3)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 3)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 3)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 3)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 4)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 4)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 4)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 4)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 0
constant adjustments 0 -1
This and the last comparison
 Comp: 0 and 1 = 0
Comp: 0 and 1 = 0
Checking this for 2, which is operand 2
Do any of the constants match? 
constant adjustments 1 -1
constant adjustments 0 -2
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
Checking this for 3, which is operand 3
Do any of the constants match? 
constant adjustments 1 -2
constant adjustments 0 -3
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
Checking this for 4, which is operand 4
Do any of the constants match? 
constant adjustments 1 -3
constant adjustments 0 -4
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
replace array indices in (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (* -1 (select synth::parameter0 0)) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in -1 with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var3, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 2
next constant idx 1
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var3, vector idx 0and constant idx 1
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var3, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in local_var3 with local_var3, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in 0 with local_var3, vector idx 0and constant idx 1
Attempting to replace constant, constant vector idx: 1 and size of constant adjustments 2
next constant idx 2
ATTEMPTING TO ADD quant back for (or (not (>= synth::parameter2 100)) (forall ((local_var3 Int)) (=> (>= local_var3 0)(not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 local_var3)) ) 0)))) )
Looking for array index in (not (bvuge synth::parameter2 100)) not
Looking for array index in (bvuge synth::parameter2 100) >=
Looking for array index in synth::parameter2 symbol
Looking for array index in 100 constant
Pushing back constant value constant
  * type: integer
  * value: 100
Looking for array index in (forall ((local_var3 Int)) (=> (bvuge local_var3 0)(not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var3)) ) 0)))) forall
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var3
Looking for array index in (tuple) tuple
Looking for array index in local_var3 symbol
Looking for array index in (=> (bvuge local_var3 0)(not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var3)) ) 0))) =>
Looking for array index in (bvuge local_var3 0) >=
Looking for array index in local_var3 symbol
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var3)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var3)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var3)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 local_var3)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 local_var3) index
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
About to verify: 

synth_fun::inv-fn -> !(parameter2 >= 100) || (forall { integer local_var3; local_var3 >= 0 ==> !(parameter1 + -1 * parameter0[local_var3] >= 0) })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |min| () Int)
; find_symbols
(declare-fun |i| () Int)
; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |i!| () Int)
; find_symbols
(declare-fun |min!| () Int)
; find_symbols
(declare-fun |a!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= |min| 0) (= |i| 0)) (or (not (>= |i| 100)) (forall ((|local_var3| Int)) (=> (>= |local_var3| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var3|))) 0)))))) (=> (and (or (not (>= |i| 100)) (forall ((|local_var3| Int)) (=> (>= |local_var3| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var3|))) 0))))) (or (> |i| 100) (and (= |i!| (+ |i| 1)) (=> (< (select |a| |i|) |min|) (= |min!| (select |a| |i|)))))) (or (not (>= |i!| 100)) (forall ((|local_var3| Int)) (=> (>= |local_var3| 0) (not (>= (+ |min!| (* (- 1) (select |a!| |local_var3|))) 0)))))) (=> (and (or (not (>= |i| 100)) (forall ((|local_var3| Int)) (=> (>= |local_var3| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var3|))) 0))))) (>= |i| 100)) (forall ((|index#0| Int)) (=> (< |index#0| 100) (> (select |a| |index#0|) |min|)))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 6
Is index! Is declared variable 
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Array size bounded to width 6
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var min Int)
(declare-var i Int)
(declare-var a! (Array Int Int))
(declare-var min! Int)
(declare-var i! Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 Int)(parameter2 Int))Bool) 
(constraint (=> (and (= min 0) (= i 0) )(inv-fn a min i )))
(constraint (=> (and (< i 6) (>= i 0) )(=> (and (inv-fn a min i ) (or (> i 100) (and (= i! (+ i 1 )) (=> (< (select a i) min)(= min! (select a i))) ) ) )(inv-fn a! min! i! ))))
(constraint (=> (and (inv-fn a min i ) (>= i 100) )(and (=> (< 0 100)(> (select a 0) min)) (=> (< 1 100)(> (select a 1) min)) (=> (< 2 100)(> (select a 2) min)) (=> (< 3 100)(> (select a 3) min)) (=> (< 4 100)(> (select a 4) min)) (=> (< 5 100)(> (select a 5) min)) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(or (not (bvuge synth::parameter2 100)) (and (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 3)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 4)) ) 0)) (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 5)) ) 0)) ) )
after expanding let:
(or (not (>= synth::parameter2 100)) (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 2)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 3)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 4)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 5)) ) 0)) ) )
after removing implications :
(or (not (>= synth::parameter2 100)) (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 2)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 3)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 4)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 5)) ) 0)) ) )
ATTEMPTING TO ADD quant back for (and (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 1)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 2)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 3)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 4)) ) 0)) (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 5)) ) 0)) )
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 0)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 0)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 1)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 1)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 2)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 2)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 3)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 3)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 3)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 3)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 4)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 4)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 4)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 4)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 5)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 5)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 5)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 5)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 4, 1
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 0
constant adjustments 0 -1
This and the last comparison
 Comp: 0 and 1 = 0
Comp: 0 and 1 = 0
Checking this for 2, which is operand 2
Do any of the constants match? 
constant adjustments 1 -1
constant adjustments 0 -2
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
Checking this for 3, which is operand 3
Do any of the constants match? 
constant adjustments 1 -2
constant adjustments 0 -3
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
Checking this for 4, which is operand 4
Do any of the constants match? 
constant adjustments 1 -3
constant adjustments 0 -4
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
Checking this for 5, which is operand 5
Do any of the constants match? 
constant adjustments 1 -4
constant adjustments 0 -5
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
replace array indices in (not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0)) with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (>= (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) 0) with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (+ synth::parameter1 (* -1 (select synth::parameter0 0)) ) with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (* -1 (select synth::parameter0 0)) with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in -1 with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var4, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 2
next constant idx 1
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var4, vector idx 0and constant idx 1
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var4, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in local_var4 with local_var4, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in 0 with local_var4, vector idx 0and constant idx 1
Attempting to replace constant, constant vector idx: 1 and size of constant adjustments 2
next constant idx 2
ATTEMPTING TO ADD quant back for (or (not (>= synth::parameter2 100)) (forall ((local_var4 Int)) (=> (>= local_var4 0)(not (>= (+ synth::parameter1 (* -1 (select synth::parameter0 local_var4)) ) 0)))) )
Looking for array index in (not (bvuge synth::parameter2 100)) not
Looking for array index in (bvuge synth::parameter2 100) >=
Looking for array index in synth::parameter2 symbol
Looking for array index in 100 constant
Pushing back constant value constant
  * type: integer
  * value: 100
Looking for array index in (forall ((local_var4 Int)) (=> (bvuge local_var4 0)(not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var4)) ) 0)))) forall
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var4
Looking for array index in (tuple) tuple
Looking for array index in local_var4 symbol
Looking for array index in (=> (bvuge local_var4 0)(not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var4)) ) 0))) =>
Looking for array index in (bvuge local_var4 0) >=
Looking for array index in local_var4 symbol
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var4)) ) 0)) not
Looking for array index in (bvuge (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var4)) ) 0) >=
Looking for array index in (bvadd synth::parameter1 (bvmul (bvneg 1) (select synth::parameter0 local_var4)) ) +
Looking for array index in synth::parameter1 symbol
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 local_var4)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 local_var4) index
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
About to verify: 

synth_fun::inv-fn -> !(parameter2 >= 100) || (forall { integer local_var4; local_var4 >= 0 ==> !(parameter1 + -1 * parameter0[local_var4] >= 0) })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |min| () Int)
; find_symbols
(declare-fun |i| () Int)
; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |i!| () Int)
; find_symbols
(declare-fun |min!| () Int)
; find_symbols
(declare-fun |a!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= |min| 0) (= |i| 0)) (or (not (>= |i| 100)) (forall ((|local_var4| Int)) (=> (>= |local_var4| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var4|))) 0)))))) (=> (and (or (not (>= |i| 100)) (forall ((|local_var4| Int)) (=> (>= |local_var4| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var4|))) 0))))) (or (> |i| 100) (and (= |i!| (+ |i| 1)) (=> (< (select |a| |i|) |min|) (= |min!| (select |a| |i|)))))) (or (not (>= |i!| 100)) (forall ((|local_var4| Int)) (=> (>= |local_var4| 0) (not (>= (+ |min!| (* (- 1) (select |a!| |local_var4|))) 0)))))) (=> (and (or (not (>= |i| 100)) (forall ((|local_var4| Int)) (=> (>= |local_var4| 0) (not (>= (+ |min| (* (- 1) (select |a| |local_var4|))) 0))))) (>= |i| 100)) (forall ((|index#0| Int)) (=> (< |index#0| 100) (> (select |a| |index#0|) |min|)))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a!
Assume has been simplified out by solver.

SAT, got counterexample.

Reached max array size 7
paper_example.sl
 Declared variable i
 Declared variable x
 Declared variable x!
 Declared variable i!
Starting to bound arrays to width 2
Is index! Is index! Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var i Int)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(declare-var i! Int)
(synth-fun inv-fn((parameter0 Int)(parameter1 (Array Int Int)))Bool) 
(constraint (=> (and (> i 0) (and (= (select x 0) 10) (= (select x 1) 10) ) )(inv-fn i x )))
(constraint (=> (and (inv-fn i x ) (and (= i! i) (and (= (select x! 0) (+ (select x 0) i )) (= (select x! 1) (+ (select x 1) i )) ) ) )(inv-fn i! x! )))
(constraint (=> (inv-fn i x )(not (or (and (>= 0 0) (< (select x 0) 0) ) (and (>= 1 0) (< (select x 1) 0) ) ))))
(check-synth)

Verifying solution from CVC4

SOLUTION(and (bvuge (select synth::parameter1 0) 0) (bvuge (select synth::parameter1 1) 0) (bvuge synth::parameter0 0) )
after expanding let:
(and (>= (select synth::parameter1 0) 0) (>= (select synth::parameter1 1) 0) (>= synth::parameter0 0) )
after removing implications :
(and (>= (select synth::parameter1 0) 0) (>= (select synth::parameter1 1) 0) (>= synth::parameter0 0) )
ATTEMPTING TO ADD quant back for (and (>= (select synth::parameter1 0) 0) (>= (select synth::parameter1 1) 0) (>= synth::parameter0 0) )
Looking for array index in (bvuge (select synth::parameter1 0) 0) >=
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (bvuge (select synth::parameter1 1) 0) >=
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (bvuge synth::parameter0 0) >=
Looking for array index in synth::parameter0 symbol
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 0 -1
This and the last comparison
 Comp: 0 and 1 = 0
replace array indices in (>= (select synth::parameter1 0) 0) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var0, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in 0 with local_var0, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 1
next constant idx 1
About to verify: 

synth_fun::inv-fn -> parameter0 >= 0 && (forall { integer local_var0; local_var0 >= 0 ==> parameter1[local_var0] >= 0 })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |i| () Int)
; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |i!| () Int)
; find_symbols
(declare-fun |x!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (> |i| 0) (forall ((|index#0| Int)) (= (select |x| |index#0|) 10))) (and (>= |i| 0) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |x| |local_var0|) 0))))) (=> (and (and (>= |i| 0) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |x| |local_var0|) 0)))) (and (= |i!| |i|) (forall ((|index#1| Int)) (= (select |x!| |index#1|) (+ (select |x| |index#1|) |i|))))) (and (>= |i!| 0) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |x!| |local_var0|) 0))))) (=> (and (>= |i| 0) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |x| |local_var0|) 0)))) (not (exists ((|index#2| Int)) (and (>= |index#2| 0) (< (select |x| |index#2|) 0))))))))
UNSAT, got solution 
 
DOING ARRAY SYNTHESHS
Result: synth_fun::inv-fn -> parameter0 >= 0 && (forall { integer local_var0; local_var0 >= 0 ==> parameter1[local_var0] >= 0 })
; SMT 2
; Generated for Z3
(set-info :source "")
(set-option :produce-models true)
SMT: synth_fun::inv-fn -> 
; find_symbols
(declare-fun |synth::parameter0| () Int)
; find_symbols
(declare-fun |synth::parameter1| () (Array Int Int))
; convert
(define-fun |B0| () Bool (and (>= |synth::parameter0| 0) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |synth::parameter1| |local_var0|) 0)))))


Synthesis time: 0.15985s
permutation.sl
 Declared variable a
 Declared variable b
 Declared variable a!
 Declared variable b!
 Declared variable idx1
 Declared variable idx2
Starting to bound arrays to width 2
Is index! Is declared variable 
Is index! Is declared variable 
Is index! Is declared variable 
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(declare-var idx1 Int)
(declare-var idx2 Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (and (< idx1 2) (>= idx1 0) ) (and (< idx2 2) (>= idx2 0) ) )(=> (and (inv-fn a b ) (and (= a! (store (store a idx1 (select a idx2)) idx2 (select a idx1))) (= b! b) ) )(inv-fn a! b! ))))
(constraint (=> (inv-fn a b )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) ) )))
(check-synth)

permutation2.sl
 Declared variable a
 Declared variable b
 Declared variable a!
 Declared variable b!
 Declared variable idx1
 Declared variable idx2
Starting to bound arrays to width 2
Is index! constant expr takes value greater than max array index
constant
  * type: integer
  * value: 7
Is index! Is index! Warning bounding array didn't work 
Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(declare-var idx1 Int)
(declare-var idx2 Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store a 10 (select a 7))) (= a! (store a 7 (select a 10))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter0 1))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) ) (or (= _let_1 _let_3) (= _let_2 _let_3) ) )))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var1, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var1, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var1 with local_var1, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var1, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var0 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var1 Int)) (= (select synth::parameter1 local_var1) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var0 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var0
Looking for array index in (tuple) tuple
Looking for array index in local_var0 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var1 Int)) (= (select synth::parameter1 local_var1) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var1
Looking for array index in (tuple) tuple
Looking for array index in local_var1 symbol
Looking for array index in (= (select synth::parameter1 local_var1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var1) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
About to verify: 

synth_fun::inv-fn -> (exists { integer local_var0; parameter0[0] == parameter1[0] }) && (exists { integer local_var1; parameter1[local_var1] == parameter0[1] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (exists ((|local_var0| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var1| Int)) (= (select |b| |local_var1|) (select |a| 1))))) (=> (and (and (exists ((|local_var0| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var1| Int)) (= (select |b| |local_var1|) (select |a| 1)))) (and (= |a!| (store |a| 10 (select |a| 7))) (= |a!| (store |a| 7 (select |a| 10))) (= |b!| |b|))) (and (exists ((|local_var0| Int)) (= (select |a!| 0) (select |b!| 0))) (exists ((|local_var1| Int)) (= (select |b!| |local_var1|) (select |a!| 1))))) (=> (and (exists ((|local_var0| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var1| Int)) (= (select |b| |local_var1|) (select |a| 1)))) (forall ((|index1#0| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#0|) (select |b| |index2#0|))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx1
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx2
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 3
Is index! constant expr takes value greater than max array index
constant
  * type: integer
  * value: 7
Is index! Is index! Warning bounding array didn't work 
Array size bounded to width 3
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(declare-var idx1 Int)
(declare-var idx2 Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store a 10 (select a 7))) (= a! (store a 7 (select a 10))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) ) (or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter0 1))) (let ((_let_5 (select synth::parameter0 2))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) ) (or (= _let_1 _let_4) (= _let_2 _let_4) (= _let_3 _let_4) ) (or (= _let_1 _let_5) (= _let_2 _let_5) (= _let_3 _let_5) ) )))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var3, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var3, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var3 with local_var3, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var3, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 2)) with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var4, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var4, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var4 with local_var4, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 2 with local_var4, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var2 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var3 Int)) (= (select synth::parameter1 local_var3) (select synth::parameter0 1))) (exists ((local_var4 Int)) (= (select synth::parameter1 local_var4) (select synth::parameter0 2))) )
Looking for array index in (exists ((local_var2 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var2
Looking for array index in (tuple) tuple
Looking for array index in local_var2 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var3 Int)) (= (select synth::parameter1 local_var3) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var3
Looking for array index in (tuple) tuple
Looking for array index in local_var3 symbol
Looking for array index in (= (select synth::parameter1 local_var3) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var3) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
Looking for array index in (exists ((local_var4 Int)) (= (select synth::parameter1 local_var4) (select synth::parameter0 2))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var4
Looking for array index in (tuple) tuple
Looking for array index in local_var4 symbol
Looking for array index in (= (select synth::parameter1 local_var4) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 local_var4) index
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 2, 1
Checking this for 1, which is operand 2
Do any of the constants match? 
replace array indices in (exists ((local_var3 Int)) (= (select synth::parameter1 local_var3) (select synth::parameter0 1))) with local_var5, vector idx 0and constant idx 0
calling from the bottom 
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var3
replace array indices in (tuple) with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var3 with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (= (select synth::parameter1 local_var3) (select synth::parameter0 1)) with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 local_var3) with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var3 with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var5, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var5, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var5 with local_var5, vector idx 1and constant idx 0
About to verify: 

synth_fun::inv-fn -> (forall { integer local_var5; local_var5 >= 0 ==> (exists { integer local_var2; parameter0[0] == parameter1[0] }) }) && (exists { integer local_var2; parameter0[0] == parameter1[0] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (forall ((|local_var5| Int)) (=> (>= |local_var5| 0) (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))))) (=> (and (and (forall ((|local_var5| Int)) (=> (>= |local_var5| 0) (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0)))) (and (= |a!| (store |a| 10 (select |a| 7))) (= |a!| (store |a| 7 (select |a| 10))) (= |b!| |b|))) (and (forall ((|local_var5| Int)) (=> (>= |local_var5| 0) (exists ((|local_var2| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var2| Int)) (= (select |a!| 0) (select |b!| 0))))) (=> (and (forall ((|local_var5| Int)) (=> (>= |local_var5| 0) (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0)))) (forall ((|index1#0| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#0|) (select |b| |index2#0|))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx1
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx2
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 4
Is index! constant expr takes value greater than max array index
constant
  * type: integer
  * value: 7
Is index! Is index! Warning bounding array didn't work 
Array size bounded to width 4
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(declare-var idx1 Int)
(declare-var idx2 Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store a 10 (select a 7))) (= a! (store a 7 (select a 10))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) (= (select a 0) (select b 3)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) (= (select a 1) (select b 3)) ) (or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) (= (select a 2) (select b 3)) ) (or (= (select a 3) (select b 0)) (= (select a 3) (select b 1)) (= (select a 3) (select b 2)) (= (select a 3) (select b 3)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter1 3))) (let ((_let_5 (select synth::parameter0 1))) (let ((_let_6 (select synth::parameter0 2))) (let ((_let_7 (select synth::parameter0 3))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) (= _let_0 _let_4) ) (or (= _let_1 _let_5) (= _let_2 _let_5) (= _let_3 _let_5) (= _let_4 _let_5) ) (or (= _let_1 _let_6) (= _let_2 _let_6) (= _let_3 _let_6) (= _let_4 _let_6) ) (or (= _let_1 _let_7) (= _let_2 _let_7) (= _let_3 _let_7) (= _let_4 _let_7) ) )))))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 3)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var7, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var7, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var7, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var7 with local_var7, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var7, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var7, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var7, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 2)) with local_var8, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var8, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var8, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var8 with local_var8, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var8, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var8, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 2 with local_var8, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 3)) with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var9, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var9, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var9 with local_var9, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 3) with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 3 with local_var9, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var6 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var7 Int)) (= (select synth::parameter1 local_var7) (select synth::parameter0 1))) (exists ((local_var8 Int)) (= (select synth::parameter1 local_var8) (select synth::parameter0 2))) (exists ((local_var9 Int)) (= (select synth::parameter1 local_var9) (select synth::parameter0 3))) )
Looking for array index in (exists ((local_var6 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var6
Looking for array index in (tuple) tuple
Looking for array index in local_var6 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var7 Int)) (= (select synth::parameter1 local_var7) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var7
Looking for array index in (tuple) tuple
Looking for array index in local_var7 symbol
Looking for array index in (= (select synth::parameter1 local_var7) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var7) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
Looking for array index in (exists ((local_var8 Int)) (= (select synth::parameter1 local_var8) (select synth::parameter0 2))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var8
Looking for array index in (tuple) tuple
Looking for array index in local_var8 symbol
Looking for array index in (= (select synth::parameter1 local_var8) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 local_var8) index
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 2, 1
Looking for array index in (exists ((local_var9 Int)) (= (select synth::parameter1 local_var9) (select synth::parameter0 3))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var9
Looking for array index in (tuple) tuple
Looking for array index in local_var9 symbol
Looking for array index in (= (select synth::parameter1 local_var9) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 local_var9) index
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 2, 1
Checking this for 1, which is operand 2
Do any of the constants match? 
Checking this for 2, which is operand 3
Do any of the constants match? 
replace array indices in (exists ((local_var7 Int)) (= (select synth::parameter1 local_var7) (select synth::parameter0 1))) with local_var10, vector idx 0and constant idx 0
calling from the bottom 
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var7
replace array indices in (tuple) with local_var10, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var7 with local_var10, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (= (select synth::parameter1 local_var7) (select synth::parameter0 1)) with local_var10, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 local_var7) with local_var10, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var10, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var7 with local_var10, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var10, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var10, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var10 with local_var10, vector idx 1and constant idx 0
About to verify: 

synth_fun::inv-fn -> (forall { integer local_var10; local_var10 >= 0 ==> (exists { integer local_var6; parameter0[0] == parameter1[0] }) }) && (exists { integer local_var6; parameter0[0] == parameter1[0] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (forall ((|local_var10| Int)) (=> (>= |local_var10| 0) (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0))))) (=> (and (and (forall ((|local_var10| Int)) (=> (>= |local_var10| 0) (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0)))) (and (= |a!| (store |a| 10 (select |a| 7))) (= |a!| (store |a| 7 (select |a| 10))) (= |b!| |b|))) (and (forall ((|local_var10| Int)) (=> (>= |local_var10| 0) (exists ((|local_var6| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var6| Int)) (= (select |a!| 0) (select |b!| 0))))) (=> (and (forall ((|local_var10| Int)) (=> (>= |local_var10| 0) (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0)))) (forall ((|index1#0| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#0|) (select |b| |index2#0|))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx1
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx2
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 5
Is index! constant expr takes value greater than max array index
constant
  * type: integer
  * value: 7
Is index! Is index! Warning bounding array didn't work 
Array size bounded to width 5
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(declare-var idx1 Int)
(declare-var idx2 Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store a 10 (select a 7))) (= a! (store a 7 (select a 10))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) (= (select a 0) (select b 3)) (= (select a 0) (select b 4)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) (= (select a 1) (select b 3)) (= (select a 1) (select b 4)) ) (or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) (= (select a 2) (select b 3)) (= (select a 2) (select b 4)) ) (or (= (select a 3) (select b 0)) (= (select a 3) (select b 1)) (= (select a 3) (select b 2)) (= (select a 3) (select b 3)) (= (select a 3) (select b 4)) ) (or (= (select a 4) (select b 0)) (= (select a 4) (select b 1)) (= (select a 4) (select b 2)) (= (select a 4) (select b 3)) (= (select a 4) (select b 4)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter1 3))) (let ((_let_5 (select synth::parameter1 4))) (let ((_let_6 (select synth::parameter0 1))) (let ((_let_7 (select synth::parameter0 2))) (let ((_let_8 (select synth::parameter0 3))) (let ((_let_9 (select synth::parameter0 4))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) (= _let_0 _let_4) (= _let_0 _let_5) ) (or (= _let_1 _let_6) (= _let_2 _let_6) (= _let_3 _let_6) (= _let_4 _let_6) (= _let_5 _let_6) ) (or (= _let_1 _let_7) (= _let_2 _let_7) (= _let_3 _let_7) (= _let_4 _let_7) (= _let_5 _let_7) ) (or (= _let_1 _let_8) (= _let_2 _let_8) (= _let_3 _let_8) (= _let_4 _let_8) (= _let_5 _let_8) ) (or (= _let_1 _let_9) (= _let_2 _let_9) (= _let_3 _let_9) (= _let_4 _let_9) (= _let_5 _let_9) ) )))))))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 3)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 4)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var12, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var12, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var12, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var12 with local_var12, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var12, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var12, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var12, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 2)) with local_var13, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var13, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var13, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var13 with local_var13, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var13, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var13, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 2 with local_var13, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 3)) with local_var14, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var14, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var14, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var14 with local_var14, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 3) with local_var14, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var14, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 3 with local_var14, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 4)) with local_var15, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var15, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var15, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var15 with local_var15, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 4) with local_var15, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var15, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 4 with local_var15, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var11 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var12 Int)) (= (select synth::parameter1 local_var12) (select synth::parameter0 1))) (exists ((local_var13 Int)) (= (select synth::parameter1 local_var13) (select synth::parameter0 2))) (exists ((local_var14 Int)) (= (select synth::parameter1 local_var14) (select synth::parameter0 3))) (exists ((local_var15 Int)) (= (select synth::parameter1 local_var15) (select synth::parameter0 4))) )
Looking for array index in (exists ((local_var11 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var11
Looking for array index in (tuple) tuple
Looking for array index in local_var11 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var12 Int)) (= (select synth::parameter1 local_var12) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var12
Looking for array index in (tuple) tuple
Looking for array index in local_var12 symbol
Looking for array index in (= (select synth::parameter1 local_var12) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var12) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
Looking for array index in (exists ((local_var13 Int)) (= (select synth::parameter1 local_var13) (select synth::parameter0 2))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var13
Looking for array index in (tuple) tuple
Looking for array index in local_var13 symbol
Looking for array index in (= (select synth::parameter1 local_var13) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 local_var13) index
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 2, 1
Looking for array index in (exists ((local_var14 Int)) (= (select synth::parameter1 local_var14) (select synth::parameter0 3))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var14
Looking for array index in (tuple) tuple
Looking for array index in local_var14 symbol
Looking for array index in (= (select synth::parameter1 local_var14) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 local_var14) index
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 2, 1
Looking for array index in (exists ((local_var15 Int)) (= (select synth::parameter1 local_var15) (select synth::parameter0 4))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var15
Looking for array index in (tuple) tuple
Looking for array index in local_var15 symbol
Looking for array index in (= (select synth::parameter1 local_var15) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 local_var15) index
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 2, 1
Checking this for 1, which is operand 2
Do any of the constants match? 
Checking this for 2, which is operand 3
Do any of the constants match? 
Checking this for 3, which is operand 4
Do any of the constants match? 
replace array indices in (exists ((local_var12 Int)) (= (select synth::parameter1 local_var12) (select synth::parameter0 1))) with local_var16, vector idx 0and constant idx 0
calling from the bottom 
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var12
replace array indices in (tuple) with local_var16, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var12 with local_var16, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (= (select synth::parameter1 local_var12) (select synth::parameter0 1)) with local_var16, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 local_var12) with local_var16, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var16, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var12 with local_var16, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var16, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var16, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var16 with local_var16, vector idx 1and constant idx 0
About to verify: 

synth_fun::inv-fn -> (forall { integer local_var16; local_var16 >= 0 ==> (exists { integer local_var11; parameter0[0] == parameter1[0] }) }) && (exists { integer local_var11; parameter0[0] == parameter1[0] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (forall ((|local_var16| Int)) (=> (>= |local_var16| 0) (exists ((|local_var11| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var11| Int)) (= (select |a| 0) (select |b| 0))))) (=> (and (and (forall ((|local_var16| Int)) (=> (>= |local_var16| 0) (exists ((|local_var11| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var11| Int)) (= (select |a| 0) (select |b| 0)))) (and (= |a!| (store |a| 10 (select |a| 7))) (= |a!| (store |a| 7 (select |a| 10))) (= |b!| |b|))) (and (forall ((|local_var16| Int)) (=> (>= |local_var16| 0) (exists ((|local_var11| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var11| Int)) (= (select |a!| 0) (select |b!| 0))))) (=> (and (forall ((|local_var16| Int)) (=> (>= |local_var16| 0) (exists ((|local_var11| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var11| Int)) (= (select |a| 0) (select |b| 0)))) (forall ((|index1#0| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#0|) (select |b| |index2#0|))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx1
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx2
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 6
Is index! constant expr takes value greater than max array index
constant
  * type: integer
  * value: 7
Is index! Is index! Warning bounding array didn't work 
Array size bounded to width 6
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(declare-var idx1 Int)
(declare-var idx2 Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store a 10 (select a 7))) (= a! (store a 7 (select a 10))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) (= (select a 0) (select b 3)) (= (select a 0) (select b 4)) (= (select a 0) (select b 5)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) (= (select a 1) (select b 3)) (= (select a 1) (select b 4)) (= (select a 1) (select b 5)) ) (or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) (= (select a 2) (select b 3)) (= (select a 2) (select b 4)) (= (select a 2) (select b 5)) ) (or (= (select a 3) (select b 0)) (= (select a 3) (select b 1)) (= (select a 3) (select b 2)) (= (select a 3) (select b 3)) (= (select a 3) (select b 4)) (= (select a 3) (select b 5)) ) (or (= (select a 4) (select b 0)) (= (select a 4) (select b 1)) (= (select a 4) (select b 2)) (= (select a 4) (select b 3)) (= (select a 4) (select b 4)) (= (select a 4) (select b 5)) ) (or (= (select a 5) (select b 0)) (= (select a 5) (select b 1)) (= (select a 5) (select b 2)) (= (select a 5) (select b 3)) (= (select a 5) (select b 4)) (= (select a 5) (select b 5)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter1 3))) (let ((_let_5 (select synth::parameter1 4))) (let ((_let_6 (select synth::parameter1 5))) (let ((_let_7 (select synth::parameter0 1))) (let ((_let_8 (select synth::parameter0 2))) (let ((_let_9 (select synth::parameter0 3))) (let ((_let_10 (select synth::parameter0 4))) (let ((_let_11 (select synth::parameter0 5))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) (= _let_0 _let_4) (= _let_0 _let_5) (= _let_0 _let_6) ) (or (= _let_1 _let_7) (= _let_2 _let_7) (= _let_3 _let_7) (= _let_4 _let_7) (= _let_5 _let_7) (= _let_6 _let_7) ) (or (= _let_1 _let_8) (= _let_2 _let_8) (= _let_3 _let_8) (= _let_4 _let_8) (= _let_5 _let_8) (= _let_6 _let_8) ) (or (= _let_1 _let_9) (= _let_2 _let_9) (= _let_3 _let_9) (= _let_4 _let_9) (= _let_5 _let_9) (= _let_6 _let_9) ) (or (= _let_1 _let_10) (= _let_2 _let_10) (= _let_3 _let_10) (= _let_4 _let_10) (= _let_5 _let_10) (= _let_6 _let_10) ) (or (= _let_1 _let_11) (= _let_2 _let_11) (= _let_3 _let_11) (= _let_4 _let_11) (= _let_5 _let_11) (= _let_6 _let_11) ) )))))))))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) (= (select synth::parameter0 0) (select synth::parameter1 5)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) (= (select synth::parameter1 5) (select synth::parameter0 1)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) (= (select synth::parameter1 5) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) (= (select synth::parameter1 5) (select synth::parameter0 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) (= (select synth::parameter1 5) (select synth::parameter0 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 5)) (= (select synth::parameter1 1) (select synth::parameter0 5)) (= (select synth::parameter1 2) (select synth::parameter0 5)) (= (select synth::parameter1 3) (select synth::parameter0 5)) (= (select synth::parameter1 4) (select synth::parameter0 5)) (= (select synth::parameter1 5) (select synth::parameter0 5)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) (= (select synth::parameter0 0) (select synth::parameter1 5)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) (= (select synth::parameter1 5) (select synth::parameter0 1)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) (= (select synth::parameter1 5) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) (= (select synth::parameter1 5) (select synth::parameter0 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) (= (select synth::parameter1 5) (select synth::parameter0 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 5)) (= (select synth::parameter1 1) (select synth::parameter0 5)) (= (select synth::parameter1 2) (select synth::parameter0 5)) (= (select synth::parameter1 3) (select synth::parameter0 5)) (= (select synth::parameter1 4) (select synth::parameter0 5)) (= (select synth::parameter1 5) (select synth::parameter0 5)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) (= (select synth::parameter0 0) (select synth::parameter1 5)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 3)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 4)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 5)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) (= (select synth::parameter1 5) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var18, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var18, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var18, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var18 with local_var18, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var18, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var18, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var18, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) (= (select synth::parameter1 5) (select synth::parameter0 2)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 2)) with local_var19, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var19, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var19, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var19 with local_var19, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var19, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var19, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 2 with local_var19, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) (= (select synth::parameter1 5) (select synth::parameter0 3)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 3)) with local_var20, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var20, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var20, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var20 with local_var20, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 3) with local_var20, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var20, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 3 with local_var20, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) (= (select synth::parameter1 5) (select synth::parameter0 4)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 4)) with local_var21, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var21, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var21, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var21 with local_var21, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 4) with local_var21, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var21, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 4 with local_var21, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 5)) (= (select synth::parameter1 1) (select synth::parameter0 5)) (= (select synth::parameter1 2) (select synth::parameter0 5)) (= (select synth::parameter1 3) (select synth::parameter0 5)) (= (select synth::parameter1 4) (select synth::parameter0 5)) (= (select synth::parameter1 5) (select synth::parameter0 5)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 5)) with local_var22, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var22, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var22, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var22 with local_var22, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 5) with local_var22, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var22, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 5 with local_var22, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var17 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var18 Int)) (= (select synth::parameter1 local_var18) (select synth::parameter0 1))) (exists ((local_var19 Int)) (= (select synth::parameter1 local_var19) (select synth::parameter0 2))) (exists ((local_var20 Int)) (= (select synth::parameter1 local_var20) (select synth::parameter0 3))) (exists ((local_var21 Int)) (= (select synth::parameter1 local_var21) (select synth::parameter0 4))) (exists ((local_var22 Int)) (= (select synth::parameter1 local_var22) (select synth::parameter0 5))) )
Looking for array index in (exists ((local_var17 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var17
Looking for array index in (tuple) tuple
Looking for array index in local_var17 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var18 Int)) (= (select synth::parameter1 local_var18) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var18
Looking for array index in (tuple) tuple
Looking for array index in local_var18 symbol
Looking for array index in (= (select synth::parameter1 local_var18) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var18) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
Looking for array index in (exists ((local_var19 Int)) (= (select synth::parameter1 local_var19) (select synth::parameter0 2))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var19
Looking for array index in (tuple) tuple
Looking for array index in local_var19 symbol
Looking for array index in (= (select synth::parameter1 local_var19) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 local_var19) index
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 2, 1
Looking for array index in (exists ((local_var20 Int)) (= (select synth::parameter1 local_var20) (select synth::parameter0 3))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var20
Looking for array index in (tuple) tuple
Looking for array index in local_var20 symbol
Looking for array index in (= (select synth::parameter1 local_var20) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 local_var20) index
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 2, 1
Looking for array index in (exists ((local_var21 Int)) (= (select synth::parameter1 local_var21) (select synth::parameter0 4))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var21
Looking for array index in (tuple) tuple
Looking for array index in local_var21 symbol
Looking for array index in (= (select synth::parameter1 local_var21) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 local_var21) index
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 2, 1
Looking for array index in (exists ((local_var22 Int)) (= (select synth::parameter1 local_var22) (select synth::parameter0 5))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var22
Looking for array index in (tuple) tuple
Looking for array index in local_var22 symbol
Looking for array index in (= (select synth::parameter1 local_var22) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 local_var22) index
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 2, 1
Checking this for 1, which is operand 2
Do any of the constants match? 
Checking this for 2, which is operand 3
Do any of the constants match? 
Checking this for 3, which is operand 4
Do any of the constants match? 
Checking this for 4, which is operand 5
Do any of the constants match? 
replace array indices in (exists ((local_var18 Int)) (= (select synth::parameter1 local_var18) (select synth::parameter0 1))) with local_var23, vector idx 0and constant idx 0
calling from the bottom 
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var18
replace array indices in (tuple) with local_var23, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var18 with local_var23, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (= (select synth::parameter1 local_var18) (select synth::parameter0 1)) with local_var23, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 local_var18) with local_var23, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var23, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var18 with local_var23, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var23, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var23, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var23 with local_var23, vector idx 1and constant idx 0
About to verify: 

synth_fun::inv-fn -> (forall { integer local_var23; local_var23 >= 0 ==> (exists { integer local_var17; parameter0[0] == parameter1[0] }) }) && (exists { integer local_var17; parameter0[0] == parameter1[0] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (forall ((|local_var23| Int)) (=> (>= |local_var23| 0) (exists ((|local_var17| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var17| Int)) (= (select |a| 0) (select |b| 0))))) (=> (and (and (forall ((|local_var23| Int)) (=> (>= |local_var23| 0) (exists ((|local_var17| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var17| Int)) (= (select |a| 0) (select |b| 0)))) (and (= |a!| (store |a| 10 (select |a| 7))) (= |a!| (store |a| 7 (select |a| 10))) (= |b!| |b|))) (and (forall ((|local_var23| Int)) (=> (>= |local_var23| 0) (exists ((|local_var17| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var17| Int)) (= (select |a!| 0) (select |b!| 0))))) (=> (and (forall ((|local_var23| Int)) (=> (>= |local_var23| 0) (exists ((|local_var17| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var17| Int)) (= (select |a| 0) (select |b| 0)))) (forall ((|index1#0| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#0|) (select |b| |index2#0|))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx1
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx2
Assume has been simplified out by solver.

SAT, got counterexample.

Reached max array size 7
permutation3.sl
 Declared variable a
 Declared variable b
 Declared variable a!
 Declared variable b!
Starting to bound arrays to width 2
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (and (inv-fn a b ) (and (and (= (select a! 0) (+ (select a! 0) 1 )) (= (select b! 0) (+ (select b! 0) 1 )) ) (and (= (select a! 1) (+ (select a! 1) 1 )) (= (select b! 1) (+ (select b! 1) 1 )) ) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter0 1))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) ) (or (= _let_1 _let_3) (= _let_2 _let_3) ) )))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var1, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var1, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var1 with local_var1, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var1, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var0 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var1 Int)) (= (select synth::parameter1 local_var1) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var0 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var0
Looking for array index in (tuple) tuple
Looking for array index in local_var0 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var1 Int)) (= (select synth::parameter1 local_var1) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var1
Looking for array index in (tuple) tuple
Looking for array index in local_var1 symbol
Looking for array index in (= (select synth::parameter1 local_var1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var1) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
About to verify: 

synth_fun::inv-fn -> (exists { integer local_var0; parameter0[0] == parameter1[0] }) && (exists { integer local_var1; parameter1[local_var1] == parameter0[1] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (exists ((|local_var0| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var1| Int)) (= (select |b| |local_var1|) (select |a| 1))))) (=> (and (and (exists ((|local_var0| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var1| Int)) (= (select |b| |local_var1|) (select |a| 1)))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (exists ((|local_var0| Int)) (= (select |a!| 0) (select |b!| 0))) (exists ((|local_var1| Int)) (= (select |b!| |local_var1|) (select |a!| 1))))) (=> (and (and (exists ((|local_var0| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var1| Int)) (= (select |b| |local_var1|) (select |a| 1)))) (forall ((|index1#0| Int)) (and (= (select |a!| |index1#0|) (+ (select |a!| |index1#0|) 1)) (= (select |b!| |index1#0|) (+ (select |b!| |index1#0|) 1))))) (and (exists ((|local_var0| Int)) (= (select |a!| 0) (select |b!| 0))) (exists ((|local_var1| Int)) (= (select |b!| |local_var1|) (select |a!| 1))))) (=> (and (exists ((|local_var0| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var1| Int)) (= (select |b| |local_var1|) (select |a| 1)))) (forall ((|index1#1| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#1|) (select |b| |index2#0|))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a!
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: b
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: b!
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 3
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 3
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (and (inv-fn a b ) (and (and (= (select a! 0) (+ (select a! 0) 1 )) (= (select b! 0) (+ (select b! 0) 1 )) ) (and (= (select a! 1) (+ (select a! 1) 1 )) (= (select b! 1) (+ (select b! 1) 1 )) ) (and (= (select a! 2) (+ (select a! 2) 1 )) (= (select b! 2) (+ (select b! 2) 1 )) ) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) ) (or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter0 1))) (let ((_let_5 (select synth::parameter0 2))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) ) (or (= _let_1 _let_5) (= _let_2 _let_5) (= _let_3 _let_5) ) (or (= _let_1 _let_4) (= _let_2 _let_4) (= _let_3 _let_4) ) )))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 2)) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var3, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var3, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var3 with local_var3, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 2 with local_var3, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var4, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var4, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var4 with local_var4, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var4, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var2 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var3 Int)) (= (select synth::parameter1 local_var3) (select synth::parameter0 2))) (exists ((local_var4 Int)) (= (select synth::parameter1 local_var4) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var2 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var2
Looking for array index in (tuple) tuple
Looking for array index in local_var2 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var3 Int)) (= (select synth::parameter1 local_var3) (select synth::parameter0 2))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var3
Looking for array index in (tuple) tuple
Looking for array index in local_var3 symbol
Looking for array index in (= (select synth::parameter1 local_var3) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 local_var3) index
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 2, 1
Looking for array index in (exists ((local_var4 Int)) (= (select synth::parameter1 local_var4) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var4
Looking for array index in (tuple) tuple
Looking for array index in local_var4 symbol
Looking for array index in (= (select synth::parameter1 local_var4) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var4) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
Checking this for 1, which is operand 2
Do any of the constants match? 
replace array indices in (exists ((local_var3 Int)) (= (select synth::parameter1 local_var3) (select synth::parameter0 2))) with local_var5, vector idx 0and constant idx 0
calling from the bottom 
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var3
replace array indices in (tuple) with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var3 with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (= (select synth::parameter1 local_var3) (select synth::parameter0 2)) with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 local_var3) with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var3 with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var5, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var5, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var5 with local_var5, vector idx 1and constant idx 0
About to verify: 

synth_fun::inv-fn -> (forall { integer local_var5; local_var5 >= 0 ==> (exists { integer local_var2; parameter0[0] == parameter1[0] }) }) && (exists { integer local_var2; parameter0[0] == parameter1[0] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (forall ((|local_var5| Int)) (=> (>= |local_var5| 0) (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))))) (=> (and (and (forall ((|local_var5| Int)) (=> (>= |local_var5| 0) (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0)))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (forall ((|local_var5| Int)) (=> (>= |local_var5| 0) (exists ((|local_var2| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var2| Int)) (= (select |a!| 0) (select |b!| 0))))) (=> (and (and (forall ((|local_var5| Int)) (=> (>= |local_var5| 0) (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0)))) (forall ((|index1#0| Int)) (and (= (select |a!| |index1#0|) (+ (select |a!| |index1#0|) 1)) (= (select |b!| |index1#0|) (+ (select |b!| |index1#0|) 1))))) (and (forall ((|local_var5| Int)) (=> (>= |local_var5| 0) (exists ((|local_var2| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var2| Int)) (= (select |a!| 0) (select |b!| 0))))) (=> (and (forall ((|local_var5| Int)) (=> (>= |local_var5| 0) (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0)))) (forall ((|index1#1| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#1|) (select |b| |index2#0|))))))))
SAT, got counterexample.

Starting to bound arrays to width 4
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 4
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (and (inv-fn a b ) (and (and (= (select a! 0) (+ (select a! 0) 1 )) (= (select b! 0) (+ (select b! 0) 1 )) ) (and (= (select a! 1) (+ (select a! 1) 1 )) (= (select b! 1) (+ (select b! 1) 1 )) ) (and (= (select a! 2) (+ (select a! 2) 1 )) (= (select b! 2) (+ (select b! 2) 1 )) ) (and (= (select a! 3) (+ (select a! 3) 1 )) (= (select b! 3) (+ (select b! 3) 1 )) ) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) (= (select a 0) (select b 3)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) (= (select a 1) (select b 3)) ) (or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) (= (select a 2) (select b 3)) ) (or (= (select a 3) (select b 0)) (= (select a 3) (select b 1)) (= (select a 3) (select b 2)) (= (select a 3) (select b 3)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter1 3))) (let ((_let_5 (select synth::parameter0 1))) (let ((_let_6 (select synth::parameter0 2))) (let ((_let_7 (select synth::parameter0 3))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) (= _let_0 _let_4) ) (or (= _let_1 _let_6) (= _let_2 _let_6) (= _let_3 _let_6) (= _let_4 _let_6) ) (or (= _let_1 _let_7) (= _let_2 _let_7) (= _let_3 _let_7) (= _let_4 _let_7) ) (or (= _let_1 _let_5) (= _let_2 _let_5) (= _let_3 _let_5) (= _let_4 _let_5) ) )))))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 3)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 2)) with local_var7, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var7, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var7, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var7 with local_var7, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var7, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var7, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 2 with local_var7, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 3)) with local_var8, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var8, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var8, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var8 with local_var8, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 3) with local_var8, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var8, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 3 with local_var8, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var9, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var9, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var9 with local_var9, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var9, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var6 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var7 Int)) (= (select synth::parameter1 local_var7) (select synth::parameter0 2))) (exists ((local_var8 Int)) (= (select synth::parameter1 local_var8) (select synth::parameter0 3))) (exists ((local_var9 Int)) (= (select synth::parameter1 local_var9) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var6 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var6
Looking for array index in (tuple) tuple
Looking for array index in local_var6 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var7 Int)) (= (select synth::parameter1 local_var7) (select synth::parameter0 2))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var7
Looking for array index in (tuple) tuple
Looking for array index in local_var7 symbol
Looking for array index in (= (select synth::parameter1 local_var7) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 local_var7) index
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 2, 1
Looking for array index in (exists ((local_var8 Int)) (= (select synth::parameter1 local_var8) (select synth::parameter0 3))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var8
Looking for array index in (tuple) tuple
Looking for array index in local_var8 symbol
Looking for array index in (= (select synth::parameter1 local_var8) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 local_var8) index
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 2, 1
Looking for array index in (exists ((local_var9 Int)) (= (select synth::parameter1 local_var9) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var9
Looking for array index in (tuple) tuple
Looking for array index in local_var9 symbol
Looking for array index in (= (select synth::parameter1 local_var9) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var9) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
Checking this for 1, which is operand 2
Do any of the constants match? 
Checking this for 2, which is operand 3
Do any of the constants match? 
replace array indices in (exists ((local_var7 Int)) (= (select synth::parameter1 local_var7) (select synth::parameter0 2))) with local_var10, vector idx 0and constant idx 0
calling from the bottom 
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var7
replace array indices in (tuple) with local_var10, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var7 with local_var10, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (= (select synth::parameter1 local_var7) (select synth::parameter0 2)) with local_var10, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 local_var7) with local_var10, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var10, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var7 with local_var10, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var10, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var10, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var10 with local_var10, vector idx 1and constant idx 0
About to verify: 

synth_fun::inv-fn -> (forall { integer local_var10; local_var10 >= 0 ==> (exists { integer local_var6; parameter0[0] == parameter1[0] }) }) && (exists { integer local_var6; parameter0[0] == parameter1[0] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (forall ((|local_var10| Int)) (=> (>= |local_var10| 0) (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0))))) (=> (and (and (forall ((|local_var10| Int)) (=> (>= |local_var10| 0) (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0)))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (forall ((|local_var10| Int)) (=> (>= |local_var10| 0) (exists ((|local_var6| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var6| Int)) (= (select |a!| 0) (select |b!| 0))))) (=> (and (and (forall ((|local_var10| Int)) (=> (>= |local_var10| 0) (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0)))) (forall ((|index1#0| Int)) (and (= (select |a!| |index1#0|) (+ (select |a!| |index1#0|) 1)) (= (select |b!| |index1#0|) (+ (select |b!| |index1#0|) 1))))) (and (forall ((|local_var10| Int)) (=> (>= |local_var10| 0) (exists ((|local_var6| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var6| Int)) (= (select |a!| 0) (select |b!| 0))))) (=> (and (forall ((|local_var10| Int)) (=> (>= |local_var10| 0) (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0)))) (forall ((|index1#1| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#1|) (select |b| |index2#0|))))))))
SAT, got counterexample.

Starting to bound arrays to width 5
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 5
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (and (inv-fn a b ) (and (and (= (select a! 0) (+ (select a! 0) 1 )) (= (select b! 0) (+ (select b! 0) 1 )) ) (and (= (select a! 1) (+ (select a! 1) 1 )) (= (select b! 1) (+ (select b! 1) 1 )) ) (and (= (select a! 2) (+ (select a! 2) 1 )) (= (select b! 2) (+ (select b! 2) 1 )) ) (and (= (select a! 3) (+ (select a! 3) 1 )) (= (select b! 3) (+ (select b! 3) 1 )) ) (and (= (select a! 4) (+ (select a! 4) 1 )) (= (select b! 4) (+ (select b! 4) 1 )) ) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) (= (select a 0) (select b 3)) (= (select a 0) (select b 4)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) (= (select a 1) (select b 3)) (= (select a 1) (select b 4)) ) (or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) (= (select a 2) (select b 3)) (= (select a 2) (select b 4)) ) (or (= (select a 3) (select b 0)) (= (select a 3) (select b 1)) (= (select a 3) (select b 2)) (= (select a 3) (select b 3)) (= (select a 3) (select b 4)) ) (or (= (select a 4) (select b 0)) (= (select a 4) (select b 1)) (= (select a 4) (select b 2)) (= (select a 4) (select b 3)) (= (select a 4) (select b 4)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter1 3))) (let ((_let_5 (select synth::parameter1 4))) (let ((_let_6 (select synth::parameter0 1))) (let ((_let_7 (select synth::parameter0 2))) (let ((_let_8 (select synth::parameter0 3))) (let ((_let_9 (select synth::parameter0 4))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) (= _let_0 _let_4) (= _let_0 _let_5) ) (or (= _let_1 _let_7) (= _let_2 _let_7) (= _let_3 _let_7) (= _let_4 _let_7) (= _let_5 _let_7) ) (or (= _let_1 _let_8) (= _let_2 _let_8) (= _let_3 _let_8) (= _let_4 _let_8) (= _let_5 _let_8) ) (or (= _let_1 _let_9) (= _let_2 _let_9) (= _let_3 _let_9) (= _let_4 _let_9) (= _let_5 _let_9) ) (or (= _let_1 _let_6) (= _let_2 _let_6) (= _let_3 _let_6) (= _let_4 _let_6) (= _let_5 _let_6) ) )))))))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 3)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 4)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 2)) with local_var12, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var12, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var12, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var12 with local_var12, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var12, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var12, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 2 with local_var12, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 3)) with local_var13, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var13, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var13, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var13 with local_var13, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 3) with local_var13, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var13, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 3 with local_var13, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 4)) with local_var14, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var14, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var14, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var14 with local_var14, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 4) with local_var14, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var14, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 4 with local_var14, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var15, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var15, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var15, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var15 with local_var15, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var15, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var15, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var15, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var11 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var12 Int)) (= (select synth::parameter1 local_var12) (select synth::parameter0 2))) (exists ((local_var13 Int)) (= (select synth::parameter1 local_var13) (select synth::parameter0 3))) (exists ((local_var14 Int)) (= (select synth::parameter1 local_var14) (select synth::parameter0 4))) (exists ((local_var15 Int)) (= (select synth::parameter1 local_var15) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var11 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var11
Looking for array index in (tuple) tuple
Looking for array index in local_var11 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var12 Int)) (= (select synth::parameter1 local_var12) (select synth::parameter0 2))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var12
Looking for array index in (tuple) tuple
Looking for array index in local_var12 symbol
Looking for array index in (= (select synth::parameter1 local_var12) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 local_var12) index
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 2, 1
Looking for array index in (exists ((local_var13 Int)) (= (select synth::parameter1 local_var13) (select synth::parameter0 3))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var13
Looking for array index in (tuple) tuple
Looking for array index in local_var13 symbol
Looking for array index in (= (select synth::parameter1 local_var13) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 local_var13) index
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 2, 1
Looking for array index in (exists ((local_var14 Int)) (= (select synth::parameter1 local_var14) (select synth::parameter0 4))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var14
Looking for array index in (tuple) tuple
Looking for array index in local_var14 symbol
Looking for array index in (= (select synth::parameter1 local_var14) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 local_var14) index
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 2, 1
Looking for array index in (exists ((local_var15 Int)) (= (select synth::parameter1 local_var15) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var15
Looking for array index in (tuple) tuple
Looking for array index in local_var15 symbol
Looking for array index in (= (select synth::parameter1 local_var15) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var15) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
Checking this for 1, which is operand 2
Do any of the constants match? 
Checking this for 2, which is operand 3
Do any of the constants match? 
Checking this for 3, which is operand 4
Do any of the constants match? 
replace array indices in (exists ((local_var12 Int)) (= (select synth::parameter1 local_var12) (select synth::parameter0 2))) with local_var16, vector idx 0and constant idx 0
calling from the bottom 
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var12
replace array indices in (tuple) with local_var16, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var12 with local_var16, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (= (select synth::parameter1 local_var12) (select synth::parameter0 2)) with local_var16, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 local_var12) with local_var16, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var16, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var12 with local_var16, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var16, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var16, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var16 with local_var16, vector idx 1and constant idx 0
About to verify: 

synth_fun::inv-fn -> (forall { integer local_var16; local_var16 >= 0 ==> (exists { integer local_var11; parameter0[0] == parameter1[0] }) }) && (exists { integer local_var11; parameter0[0] == parameter1[0] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (forall ((|local_var16| Int)) (=> (>= |local_var16| 0) (exists ((|local_var11| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var11| Int)) (= (select |a| 0) (select |b| 0))))) (=> (and (and (forall ((|local_var16| Int)) (=> (>= |local_var16| 0) (exists ((|local_var11| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var11| Int)) (= (select |a| 0) (select |b| 0)))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (forall ((|local_var16| Int)) (=> (>= |local_var16| 0) (exists ((|local_var11| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var11| Int)) (= (select |a!| 0) (select |b!| 0))))) (=> (and (and (forall ((|local_var16| Int)) (=> (>= |local_var16| 0) (exists ((|local_var11| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var11| Int)) (= (select |a| 0) (select |b| 0)))) (forall ((|index1#0| Int)) (and (= (select |a!| |index1#0|) (+ (select |a!| |index1#0|) 1)) (= (select |b!| |index1#0|) (+ (select |b!| |index1#0|) 1))))) (and (forall ((|local_var16| Int)) (=> (>= |local_var16| 0) (exists ((|local_var11| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var11| Int)) (= (select |a!| 0) (select |b!| 0))))) (=> (and (forall ((|local_var16| Int)) (=> (>= |local_var16| 0) (exists ((|local_var11| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var11| Int)) (= (select |a| 0) (select |b| 0)))) (forall ((|index1#1| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#1|) (select |b| |index2#0|))))))))
SAT, got counterexample.

Starting to bound arrays to width 6
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 6
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (and (inv-fn a b ) (and (and (= (select a! 0) (+ (select a! 0) 1 )) (= (select b! 0) (+ (select b! 0) 1 )) ) (and (= (select a! 1) (+ (select a! 1) 1 )) (= (select b! 1) (+ (select b! 1) 1 )) ) (and (= (select a! 2) (+ (select a! 2) 1 )) (= (select b! 2) (+ (select b! 2) 1 )) ) (and (= (select a! 3) (+ (select a! 3) 1 )) (= (select b! 3) (+ (select b! 3) 1 )) ) (and (= (select a! 4) (+ (select a! 4) 1 )) (= (select b! 4) (+ (select b! 4) 1 )) ) (and (= (select a! 5) (+ (select a! 5) 1 )) (= (select b! 5) (+ (select b! 5) 1 )) ) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) (= (select a 0) (select b 3)) (= (select a 0) (select b 4)) (= (select a 0) (select b 5)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) (= (select a 1) (select b 3)) (= (select a 1) (select b 4)) (= (select a 1) (select b 5)) ) (or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) (= (select a 2) (select b 3)) (= (select a 2) (select b 4)) (= (select a 2) (select b 5)) ) (or (= (select a 3) (select b 0)) (= (select a 3) (select b 1)) (= (select a 3) (select b 2)) (= (select a 3) (select b 3)) (= (select a 3) (select b 4)) (= (select a 3) (select b 5)) ) (or (= (select a 4) (select b 0)) (= (select a 4) (select b 1)) (= (select a 4) (select b 2)) (= (select a 4) (select b 3)) (= (select a 4) (select b 4)) (= (select a 4) (select b 5)) ) (or (= (select a 5) (select b 0)) (= (select a 5) (select b 1)) (= (select a 5) (select b 2)) (= (select a 5) (select b 3)) (= (select a 5) (select b 4)) (= (select a 5) (select b 5)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter1 3))) (let ((_let_5 (select synth::parameter1 4))) (let ((_let_6 (select synth::parameter1 5))) (let ((_let_7 (select synth::parameter0 1))) (let ((_let_8 (select synth::parameter0 2))) (let ((_let_9 (select synth::parameter0 3))) (let ((_let_10 (select synth::parameter0 4))) (let ((_let_11 (select synth::parameter0 5))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) (= _let_0 _let_4) (= _let_0 _let_5) (= _let_0 _let_6) ) (or (= _let_1 _let_8) (= _let_2 _let_8) (= _let_3 _let_8) (= _let_4 _let_8) (= _let_5 _let_8) (= _let_6 _let_8) ) (or (= _let_1 _let_9) (= _let_2 _let_9) (= _let_3 _let_9) (= _let_4 _let_9) (= _let_5 _let_9) (= _let_6 _let_9) ) (or (= _let_1 _let_10) (= _let_2 _let_10) (= _let_3 _let_10) (= _let_4 _let_10) (= _let_5 _let_10) (= _let_6 _let_10) ) (or (= _let_1 _let_11) (= _let_2 _let_11) (= _let_3 _let_11) (= _let_4 _let_11) (= _let_5 _let_11) (= _let_6 _let_11) ) (or (= _let_1 _let_7) (= _let_2 _let_7) (= _let_3 _let_7) (= _let_4 _let_7) (= _let_5 _let_7) (= _let_6 _let_7) ) )))))))))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) (= (select synth::parameter0 0) (select synth::parameter1 5)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) (= (select synth::parameter1 5) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) (= (select synth::parameter1 5) (select synth::parameter0 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) (= (select synth::parameter1 5) (select synth::parameter0 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 5)) (= (select synth::parameter1 1) (select synth::parameter0 5)) (= (select synth::parameter1 2) (select synth::parameter0 5)) (= (select synth::parameter1 3) (select synth::parameter0 5)) (= (select synth::parameter1 4) (select synth::parameter0 5)) (= (select synth::parameter1 5) (select synth::parameter0 5)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) (= (select synth::parameter1 5) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) (= (select synth::parameter0 0) (select synth::parameter1 5)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) (= (select synth::parameter1 5) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) (= (select synth::parameter1 5) (select synth::parameter0 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) (= (select synth::parameter1 5) (select synth::parameter0 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 5)) (= (select synth::parameter1 1) (select synth::parameter0 5)) (= (select synth::parameter1 2) (select synth::parameter0 5)) (= (select synth::parameter1 3) (select synth::parameter0 5)) (= (select synth::parameter1 4) (select synth::parameter0 5)) (= (select synth::parameter1 5) (select synth::parameter0 5)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) (= (select synth::parameter1 5) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) (= (select synth::parameter0 0) (select synth::parameter1 5)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 3)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 4)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 5)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) (= (select synth::parameter1 5) (select synth::parameter0 2)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 2)) with local_var18, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var18, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var18, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var18 with local_var18, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var18, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var18, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 2 with local_var18, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) (= (select synth::parameter1 5) (select synth::parameter0 3)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 3)) with local_var19, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var19, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var19, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var19 with local_var19, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 3) with local_var19, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var19, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 3 with local_var19, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) (= (select synth::parameter1 5) (select synth::parameter0 4)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 4)) with local_var20, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var20, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var20, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var20 with local_var20, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 4) with local_var20, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var20, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 4 with local_var20, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 5)) (= (select synth::parameter1 1) (select synth::parameter0 5)) (= (select synth::parameter1 2) (select synth::parameter0 5)) (= (select synth::parameter1 3) (select synth::parameter0 5)) (= (select synth::parameter1 4) (select synth::parameter0 5)) (= (select synth::parameter1 5) (select synth::parameter0 5)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 5)) with local_var21, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var21, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var21, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var21 with local_var21, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 5) with local_var21, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var21, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 5 with local_var21, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) (= (select synth::parameter1 5) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var22, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var22, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var22, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var22 with local_var22, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var22, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var22, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var22, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var17 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var18 Int)) (= (select synth::parameter1 local_var18) (select synth::parameter0 2))) (exists ((local_var19 Int)) (= (select synth::parameter1 local_var19) (select synth::parameter0 3))) (exists ((local_var20 Int)) (= (select synth::parameter1 local_var20) (select synth::parameter0 4))) (exists ((local_var21 Int)) (= (select synth::parameter1 local_var21) (select synth::parameter0 5))) (exists ((local_var22 Int)) (= (select synth::parameter1 local_var22) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var17 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var17
Looking for array index in (tuple) tuple
Looking for array index in local_var17 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var18 Int)) (= (select synth::parameter1 local_var18) (select synth::parameter0 2))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var18
Looking for array index in (tuple) tuple
Looking for array index in local_var18 symbol
Looking for array index in (= (select synth::parameter1 local_var18) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 local_var18) index
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 2, 1
Looking for array index in (exists ((local_var19 Int)) (= (select synth::parameter1 local_var19) (select synth::parameter0 3))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var19
Looking for array index in (tuple) tuple
Looking for array index in local_var19 symbol
Looking for array index in (= (select synth::parameter1 local_var19) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 local_var19) index
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 2, 1
Looking for array index in (exists ((local_var20 Int)) (= (select synth::parameter1 local_var20) (select synth::parameter0 4))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var20
Looking for array index in (tuple) tuple
Looking for array index in local_var20 symbol
Looking for array index in (= (select synth::parameter1 local_var20) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 local_var20) index
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 2, 1
Looking for array index in (exists ((local_var21 Int)) (= (select synth::parameter1 local_var21) (select synth::parameter0 5))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var21
Looking for array index in (tuple) tuple
Looking for array index in local_var21 symbol
Looking for array index in (= (select synth::parameter1 local_var21) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 local_var21) index
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 2, 1
Looking for array index in (exists ((local_var22 Int)) (= (select synth::parameter1 local_var22) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var22
Looking for array index in (tuple) tuple
Looking for array index in local_var22 symbol
Looking for array index in (= (select synth::parameter1 local_var22) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var22) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
Checking this for 1, which is operand 2
Do any of the constants match? 
Checking this for 2, which is operand 3
Do any of the constants match? 
Checking this for 3, which is operand 4
Do any of the constants match? 
Checking this for 4, which is operand 5
Do any of the constants match? 
replace array indices in (exists ((local_var18 Int)) (= (select synth::parameter1 local_var18) (select synth::parameter0 2))) with local_var23, vector idx 0and constant idx 0
calling from the bottom 
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var18
replace array indices in (tuple) with local_var23, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var18 with local_var23, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (= (select synth::parameter1 local_var18) (select synth::parameter0 2)) with local_var23, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 local_var18) with local_var23, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var23, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var18 with local_var23, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var23, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var23, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var23 with local_var23, vector idx 1and constant idx 0
About to verify: 

synth_fun::inv-fn -> (forall { integer local_var23; local_var23 >= 0 ==> (exists { integer local_var17; parameter0[0] == parameter1[0] }) }) && (exists { integer local_var17; parameter0[0] == parameter1[0] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (forall ((|local_var23| Int)) (=> (>= |local_var23| 0) (exists ((|local_var17| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var17| Int)) (= (select |a| 0) (select |b| 0))))) (=> (and (and (forall ((|local_var23| Int)) (=> (>= |local_var23| 0) (exists ((|local_var17| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var17| Int)) (= (select |a| 0) (select |b| 0)))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (forall ((|local_var23| Int)) (=> (>= |local_var23| 0) (exists ((|local_var17| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var17| Int)) (= (select |a!| 0) (select |b!| 0))))) (=> (and (and (forall ((|local_var23| Int)) (=> (>= |local_var23| 0) (exists ((|local_var17| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var17| Int)) (= (select |a| 0) (select |b| 0)))) (forall ((|index1#0| Int)) (and (= (select |a!| |index1#0|) (+ (select |a!| |index1#0|) 1)) (= (select |b!| |index1#0|) (+ (select |b!| |index1#0|) 1))))) (and (forall ((|local_var23| Int)) (=> (>= |local_var23| 0) (exists ((|local_var17| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var17| Int)) (= (select |a!| 0) (select |b!| 0))))) (=> (and (forall ((|local_var23| Int)) (=> (>= |local_var23| 0) (exists ((|local_var17| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var17| Int)) (= (select |a| 0) (select |b| 0)))) (forall ((|index1#1| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#1|) (select |b| |index2#0|))))))))
SAT, got counterexample.

Reached max array size 7
permutation5.sl
 Declared variable a
 Declared variable b
 Declared variable c
 Declared variable a!
 Declared variable b!
Starting to bound arrays to width 2
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var c Int)
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int))(parameter2 Int))Bool) 
(constraint (=> (and (= a b) (> c 1) )(inv-fn a b c )))
(constraint (=> (and (inv-fn a b c ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! c )))
(constraint (=> (and (inv-fn a b c ) (and (and (= (select a! 0) (+ (select a! 0) c )) (= (select b! 0) (+ (select b! 0) c )) ) (and (= (select a! 1) (+ (select a! 1) c )) (= (select b! 1) (+ (select b! 1) c )) ) ) )(inv-fn a! b! c )))
(constraint (=> (inv-fn a b c )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter0 1))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) ) (bvuge synth::parameter2 1) (or (= _let_1 _let_3) (= _let_2 _let_3) ) )))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) ) (>= synth::parameter2 1) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) ) (>= synth::parameter2 1) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var1, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var1, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var1 with local_var1, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var1, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var0 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (>= synth::parameter2 1) (exists ((local_var1 Int)) (= (select synth::parameter1 local_var1) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var0 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var0
Looking for array index in (tuple) tuple
Looking for array index in local_var0 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (bvuge synth::parameter2 1) >=
Looking for array index in synth::parameter2 symbol
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (exists ((local_var1 Int)) (= (select synth::parameter1 local_var1) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var1
Looking for array index in (tuple) tuple
Looking for array index in local_var1 symbol
Looking for array index in (= (select synth::parameter1 local_var1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var1) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
About to verify: 

synth_fun::inv-fn -> (exists { integer local_var0; parameter0[0] == parameter1[0] }) && parameter2 >= 1 && (exists { integer local_var1; parameter1[local_var1] == parameter0[1] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |c| () Int)
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= |a| |b|) (> |c| 1)) (and (exists ((|local_var0| Int)) (= (select |a| 0) (select |b| 0))) (>= |c| 1) (exists ((|local_var1| Int)) (= (select |b| |local_var1|) (select |a| 1))))) (=> (and (and (exists ((|local_var0| Int)) (= (select |a| 0) (select |b| 0))) (>= |c| 1) (exists ((|local_var1| Int)) (= (select |b| |local_var1|) (select |a| 1)))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (exists ((|local_var0| Int)) (= (select |a!| 0) (select |b!| 0))) (>= |c| 1) (exists ((|local_var1| Int)) (= (select |b!| |local_var1|) (select |a!| 1))))) (=> (and (and (exists ((|local_var0| Int)) (= (select |a| 0) (select |b| 0))) (>= |c| 1) (exists ((|local_var1| Int)) (= (select |b| |local_var1|) (select |a| 1)))) (forall ((|index1#0| Int)) (and (= (select |a!| |index1#0|) (+ (select |a!| |index1#0|) |c|)) (= (select |b!| |index1#0|) (+ (select |b!| |index1#0|) |c|))))) (and (exists ((|local_var0| Int)) (= (select |a!| 0) (select |b!| 0))) (>= |c| 1) (exists ((|local_var1| Int)) (= (select |b!| |local_var1|) (select |a!| 1))))) (=> (and (exists ((|local_var0| Int)) (= (select |a| 0) (select |b| 0))) (>= |c| 1) (exists ((|local_var1| Int)) (= (select |b| |local_var1|) (select |a| 1)))) (forall ((|index1#1| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#1|) (select |b| |index2#0|))))))))
SAT, got counterexample.

Starting to bound arrays to width 3
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 3
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var c Int)
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int))(parameter2 Int))Bool) 
(constraint (=> (and (= a b) (> c 1) )(inv-fn a b c )))
(constraint (=> (and (inv-fn a b c ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! c )))
(constraint (=> (and (inv-fn a b c ) (and (and (= (select a! 0) (+ (select a! 0) c )) (= (select b! 0) (+ (select b! 0) c )) ) (and (= (select a! 1) (+ (select a! 1) c )) (= (select b! 1) (+ (select b! 1) c )) ) (and (= (select a! 2) (+ (select a! 2) c )) (= (select b! 2) (+ (select b! 2) c )) ) ) )(inv-fn a! b! c )))
(constraint (=> (inv-fn a b c )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) ) (or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter0 1))) (let ((_let_5 (select synth::parameter0 2))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) ) (or (= _let_1 _let_5) (= _let_2 _let_5) (= _let_3 _let_5) ) (bvuge synth::parameter2 1) (or (= _let_1 _let_4) (= _let_2 _let_4) (= _let_3 _let_4) ) )))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) ) (>= synth::parameter2 1) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) ) (>= synth::parameter2 1) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 2)) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var3, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var3, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var3 with local_var3, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 2 with local_var3, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var4, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var4, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var4 with local_var4, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var4, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var4, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var2 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var3 Int)) (= (select synth::parameter1 local_var3) (select synth::parameter0 2))) (>= synth::parameter2 1) (exists ((local_var4 Int)) (= (select synth::parameter1 local_var4) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var2 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var2
Looking for array index in (tuple) tuple
Looking for array index in local_var2 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var3 Int)) (= (select synth::parameter1 local_var3) (select synth::parameter0 2))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var3
Looking for array index in (tuple) tuple
Looking for array index in local_var3 symbol
Looking for array index in (= (select synth::parameter1 local_var3) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 local_var3) index
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 2, 1
Looking for array index in (bvuge synth::parameter2 1) >=
Looking for array index in synth::parameter2 symbol
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (exists ((local_var4 Int)) (= (select synth::parameter1 local_var4) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var4
Looking for array index in (tuple) tuple
Looking for array index in local_var4 symbol
Looking for array index in (= (select synth::parameter1 local_var4) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var4) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
About to verify: 

synth_fun::inv-fn -> (exists { integer local_var2; parameter0[0] == parameter1[0] }) && (exists { integer local_var3; parameter1[local_var3] == parameter0[2] }) && parameter2 >= 1 && (exists { integer local_var4; parameter1[local_var4] == parameter0[1] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |c| () Int)
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= |a| |b|) (> |c| 1)) (and (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var3| Int)) (= (select |b| |local_var3|) (select |a| 2))) (>= |c| 1) (exists ((|local_var4| Int)) (= (select |b| |local_var4|) (select |a| 1))))) (=> (and (and (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var3| Int)) (= (select |b| |local_var3|) (select |a| 2))) (>= |c| 1) (exists ((|local_var4| Int)) (= (select |b| |local_var4|) (select |a| 1)))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (exists ((|local_var2| Int)) (= (select |a!| 0) (select |b!| 0))) (exists ((|local_var3| Int)) (= (select |b!| |local_var3|) (select |a!| 2))) (>= |c| 1) (exists ((|local_var4| Int)) (= (select |b!| |local_var4|) (select |a!| 1))))) (=> (and (and (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var3| Int)) (= (select |b| |local_var3|) (select |a| 2))) (>= |c| 1) (exists ((|local_var4| Int)) (= (select |b| |local_var4|) (select |a| 1)))) (forall ((|index1#0| Int)) (and (= (select |a!| |index1#0|) (+ (select |a!| |index1#0|) |c|)) (= (select |b!| |index1#0|) (+ (select |b!| |index1#0|) |c|))))) (and (exists ((|local_var2| Int)) (= (select |a!| 0) (select |b!| 0))) (exists ((|local_var3| Int)) (= (select |b!| |local_var3|) (select |a!| 2))) (>= |c| 1) (exists ((|local_var4| Int)) (= (select |b!| |local_var4|) (select |a!| 1))))) (=> (and (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var3| Int)) (= (select |b| |local_var3|) (select |a| 2))) (>= |c| 1) (exists ((|local_var4| Int)) (= (select |b| |local_var4|) (select |a| 1)))) (forall ((|index1#1| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#1|) (select |b| |index2#0|))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a!
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: b
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: b!
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 4
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 4
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var c Int)
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int))(parameter2 Int))Bool) 
(constraint (=> (and (= a b) (> c 1) )(inv-fn a b c )))
(constraint (=> (and (inv-fn a b c ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! c )))
(constraint (=> (and (inv-fn a b c ) (and (and (= (select a! 0) (+ (select a! 0) c )) (= (select b! 0) (+ (select b! 0) c )) ) (and (= (select a! 1) (+ (select a! 1) c )) (= (select b! 1) (+ (select b! 1) c )) ) (and (= (select a! 2) (+ (select a! 2) c )) (= (select b! 2) (+ (select b! 2) c )) ) (and (= (select a! 3) (+ (select a! 3) c )) (= (select b! 3) (+ (select b! 3) c )) ) ) )(inv-fn a! b! c )))
(constraint (=> (inv-fn a b c )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) (= (select a 0) (select b 3)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) (= (select a 1) (select b 3)) ) (or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) (= (select a 2) (select b 3)) ) (or (= (select a 3) (select b 0)) (= (select a 3) (select b 1)) (= (select a 3) (select b 2)) (= (select a 3) (select b 3)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter1 3))) (let ((_let_5 (select synth::parameter0 1))) (let ((_let_6 (select synth::parameter0 2))) (let ((_let_7 (select synth::parameter0 3))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) (= _let_0 _let_4) ) (or (= _let_1 _let_6) (= _let_2 _let_6) (= _let_3 _let_6) (= _let_4 _let_6) ) (or (= _let_1 _let_7) (= _let_2 _let_7) (= _let_3 _let_7) (= _let_4 _let_7) ) (bvuge synth::parameter2 1) (or (= _let_1 _let_5) (= _let_2 _let_5) (= _let_3 _let_5) (= _let_4 _let_5) ) )))))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) ) (>= synth::parameter2 1) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) ) (>= synth::parameter2 1) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 3)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 2)) with local_var6, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var6, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var6, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var6 with local_var6, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var6, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var6, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 2 with local_var6, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 3)) with local_var7, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var7, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var7, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var7 with local_var7, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 3) with local_var7, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var7, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 3 with local_var7, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var8, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var8, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var8, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var8 with local_var8, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var8, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var8, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var8, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var5 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var6 Int)) (= (select synth::parameter1 local_var6) (select synth::parameter0 2))) (exists ((local_var7 Int)) (= (select synth::parameter1 local_var7) (select synth::parameter0 3))) (>= synth::parameter2 1) (exists ((local_var8 Int)) (= (select synth::parameter1 local_var8) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var5 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var5
Looking for array index in (tuple) tuple
Looking for array index in local_var5 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var6 Int)) (= (select synth::parameter1 local_var6) (select synth::parameter0 2))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var6
Looking for array index in (tuple) tuple
Looking for array index in local_var6 symbol
Looking for array index in (= (select synth::parameter1 local_var6) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 local_var6) index
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 2, 1
Looking for array index in (exists ((local_var7 Int)) (= (select synth::parameter1 local_var7) (select synth::parameter0 3))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var7
Looking for array index in (tuple) tuple
Looking for array index in local_var7 symbol
Looking for array index in (= (select synth::parameter1 local_var7) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 local_var7) index
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 2, 1
Looking for array index in (bvuge synth::parameter2 1) >=
Looking for array index in synth::parameter2 symbol
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (exists ((local_var8 Int)) (= (select synth::parameter1 local_var8) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var8
Looking for array index in (tuple) tuple
Looking for array index in local_var8 symbol
Looking for array index in (= (select synth::parameter1 local_var8) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var8) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
Checking this for 1, which is operand 2
Do any of the constants match? 
replace array indices in (exists ((local_var6 Int)) (= (select synth::parameter1 local_var6) (select synth::parameter0 2))) with local_var9, vector idx 0and constant idx 0
calling from the bottom 
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var6
replace array indices in (tuple) with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var6 with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (= (select synth::parameter1 local_var6) (select synth::parameter0 2)) with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 local_var6) with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var6 with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var9, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var9, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var9 with local_var9, vector idx 1and constant idx 0
About to verify: 

synth_fun::inv-fn -> (exists { integer local_var8; parameter1[local_var8] == parameter0[1] }) && parameter2 >= 1 && (forall { integer local_var9; local_var9 >= 0 ==> (exists { integer local_var5; parameter0[0] == parameter1[0] }) }) && (exists { integer local_var5; parameter0[0] == parameter1[0] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |c| () Int)
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= |a| |b|) (> |c| 1)) (and (exists ((|local_var8| Int)) (= (select |b| |local_var8|) (select |a| 1))) (and (>= |c| 1) (and (forall ((|local_var9| Int)) (=> (>= |local_var9| 0) (exists ((|local_var5| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var5| Int)) (= (select |a| 0) (select |b| 0))))))) (=> (and (and (exists ((|local_var8| Int)) (= (select |b| |local_var8|) (select |a| 1))) (and (>= |c| 1) (and (forall ((|local_var9| Int)) (=> (>= |local_var9| 0) (exists ((|local_var5| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var5| Int)) (= (select |a| 0) (select |b| 0)))))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (exists ((|local_var8| Int)) (= (select |b!| |local_var8|) (select |a!| 1))) (and (>= |c| 1) (and (forall ((|local_var9| Int)) (=> (>= |local_var9| 0) (exists ((|local_var5| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var5| Int)) (= (select |a!| 0) (select |b!| 0))))))) (=> (and (and (exists ((|local_var8| Int)) (= (select |b| |local_var8|) (select |a| 1))) (and (>= |c| 1) (and (forall ((|local_var9| Int)) (=> (>= |local_var9| 0) (exists ((|local_var5| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var5| Int)) (= (select |a| 0) (select |b| 0)))))) (forall ((|index1#0| Int)) (and (= (select |a!| |index1#0|) (+ (select |a!| |index1#0|) |c|)) (= (select |b!| |index1#0|) (+ (select |b!| |index1#0|) |c|))))) (and (exists ((|local_var8| Int)) (= (select |b!| |local_var8|) (select |a!| 1))) (and (>= |c| 1) (and (forall ((|local_var9| Int)) (=> (>= |local_var9| 0) (exists ((|local_var5| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var5| Int)) (= (select |a!| 0) (select |b!| 0))))))) (=> (and (exists ((|local_var8| Int)) (= (select |b| |local_var8|) (select |a| 1))) (and (>= |c| 1) (and (forall ((|local_var9| Int)) (=> (>= |local_var9| 0) (exists ((|local_var5| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var5| Int)) (= (select |a| 0) (select |b| 0)))))) (forall ((|index1#1| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#1|) (select |b| |index2#0|))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 5
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 5
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var c Int)
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int))(parameter2 Int))Bool) 
(constraint (=> (and (= a b) (> c 1) )(inv-fn a b c )))
(constraint (=> (and (inv-fn a b c ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! c )))
(constraint (=> (and (inv-fn a b c ) (and (and (= (select a! 0) (+ (select a! 0) c )) (= (select b! 0) (+ (select b! 0) c )) ) (and (= (select a! 1) (+ (select a! 1) c )) (= (select b! 1) (+ (select b! 1) c )) ) (and (= (select a! 2) (+ (select a! 2) c )) (= (select b! 2) (+ (select b! 2) c )) ) (and (= (select a! 3) (+ (select a! 3) c )) (= (select b! 3) (+ (select b! 3) c )) ) (and (= (select a! 4) (+ (select a! 4) c )) (= (select b! 4) (+ (select b! 4) c )) ) ) )(inv-fn a! b! c )))
(constraint (=> (inv-fn a b c )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) (= (select a 0) (select b 3)) (= (select a 0) (select b 4)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) (= (select a 1) (select b 3)) (= (select a 1) (select b 4)) ) (or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) (= (select a 2) (select b 3)) (= (select a 2) (select b 4)) ) (or (= (select a 3) (select b 0)) (= (select a 3) (select b 1)) (= (select a 3) (select b 2)) (= (select a 3) (select b 3)) (= (select a 3) (select b 4)) ) (or (= (select a 4) (select b 0)) (= (select a 4) (select b 1)) (= (select a 4) (select b 2)) (= (select a 4) (select b 3)) (= (select a 4) (select b 4)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter1 3))) (let ((_let_5 (select synth::parameter1 4))) (let ((_let_6 (select synth::parameter0 1))) (let ((_let_7 (select synth::parameter0 2))) (let ((_let_8 (select synth::parameter0 3))) (let ((_let_9 (select synth::parameter0 4))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) (= _let_0 _let_4) (= _let_0 _let_5) ) (or (= _let_1 _let_7) (= _let_2 _let_7) (= _let_3 _let_7) (= _let_4 _let_7) (= _let_5 _let_7) ) (or (= _let_1 _let_8) (= _let_2 _let_8) (= _let_3 _let_8) (= _let_4 _let_8) (= _let_5 _let_8) ) (or (= _let_1 _let_9) (= _let_2 _let_9) (= _let_3 _let_9) (= _let_4 _let_9) (= _let_5 _let_9) ) (bvuge synth::parameter2 1) (or (= _let_1 _let_6) (= _let_2 _let_6) (= _let_3 _let_6) (= _let_4 _let_6) (= _let_5 _let_6) ) )))))))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) ) (>= synth::parameter2 1) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) ) (>= synth::parameter2 1) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 3)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 4)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 2)) with local_var11, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var11, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var11, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var11 with local_var11, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var11, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var11, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 2 with local_var11, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 3)) with local_var12, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var12, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var12, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var12 with local_var12, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 3) with local_var12, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var12, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 3 with local_var12, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 4)) with local_var13, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var13, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var13, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var13 with local_var13, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 4) with local_var13, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var13, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 4 with local_var13, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var14, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var14, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var14, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var14 with local_var14, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var14, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var14, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var14, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var10 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var11 Int)) (= (select synth::parameter1 local_var11) (select synth::parameter0 2))) (exists ((local_var12 Int)) (= (select synth::parameter1 local_var12) (select synth::parameter0 3))) (exists ((local_var13 Int)) (= (select synth::parameter1 local_var13) (select synth::parameter0 4))) (>= synth::parameter2 1) (exists ((local_var14 Int)) (= (select synth::parameter1 local_var14) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var10 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var10
Looking for array index in (tuple) tuple
Looking for array index in local_var10 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var11 Int)) (= (select synth::parameter1 local_var11) (select synth::parameter0 2))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var11
Looking for array index in (tuple) tuple
Looking for array index in local_var11 symbol
Looking for array index in (= (select synth::parameter1 local_var11) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 local_var11) index
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 2, 1
Looking for array index in (exists ((local_var12 Int)) (= (select synth::parameter1 local_var12) (select synth::parameter0 3))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var12
Looking for array index in (tuple) tuple
Looking for array index in local_var12 symbol
Looking for array index in (= (select synth::parameter1 local_var12) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 local_var12) index
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 2, 1
Looking for array index in (exists ((local_var13 Int)) (= (select synth::parameter1 local_var13) (select synth::parameter0 4))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var13
Looking for array index in (tuple) tuple
Looking for array index in local_var13 symbol
Looking for array index in (= (select synth::parameter1 local_var13) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 local_var13) index
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 2, 1
Looking for array index in (bvuge synth::parameter2 1) >=
Looking for array index in synth::parameter2 symbol
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (exists ((local_var14 Int)) (= (select synth::parameter1 local_var14) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var14
Looking for array index in (tuple) tuple
Looking for array index in local_var14 symbol
Looking for array index in (= (select synth::parameter1 local_var14) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var14) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
Checking this for 1, which is operand 2
Do any of the constants match? 
Checking this for 2, which is operand 3
Do any of the constants match? 
replace array indices in (exists ((local_var11 Int)) (= (select synth::parameter1 local_var11) (select synth::parameter0 2))) with local_var15, vector idx 0and constant idx 0
calling from the bottom 
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var11
replace array indices in (tuple) with local_var15, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var11 with local_var15, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (= (select synth::parameter1 local_var11) (select synth::parameter0 2)) with local_var15, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 local_var11) with local_var15, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var15, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var11 with local_var15, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var15, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var15, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var15 with local_var15, vector idx 1and constant idx 0
About to verify: 

synth_fun::inv-fn -> (exists { integer local_var14; parameter1[local_var14] == parameter0[1] }) && parameter2 >= 1 && (forall { integer local_var15; local_var15 >= 0 ==> (exists { integer local_var10; parameter0[0] == parameter1[0] }) }) && (exists { integer local_var10; parameter0[0] == parameter1[0] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |c| () Int)
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= |a| |b|) (> |c| 1)) (and (exists ((|local_var14| Int)) (= (select |b| |local_var14|) (select |a| 1))) (and (>= |c| 1) (and (forall ((|local_var15| Int)) (=> (>= |local_var15| 0) (exists ((|local_var10| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var10| Int)) (= (select |a| 0) (select |b| 0))))))) (=> (and (and (exists ((|local_var14| Int)) (= (select |b| |local_var14|) (select |a| 1))) (and (>= |c| 1) (and (forall ((|local_var15| Int)) (=> (>= |local_var15| 0) (exists ((|local_var10| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var10| Int)) (= (select |a| 0) (select |b| 0)))))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (exists ((|local_var14| Int)) (= (select |b!| |local_var14|) (select |a!| 1))) (and (>= |c| 1) (and (forall ((|local_var15| Int)) (=> (>= |local_var15| 0) (exists ((|local_var10| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var10| Int)) (= (select |a!| 0) (select |b!| 0))))))) (=> (and (and (exists ((|local_var14| Int)) (= (select |b| |local_var14|) (select |a| 1))) (and (>= |c| 1) (and (forall ((|local_var15| Int)) (=> (>= |local_var15| 0) (exists ((|local_var10| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var10| Int)) (= (select |a| 0) (select |b| 0)))))) (forall ((|index1#0| Int)) (and (= (select |a!| |index1#0|) (+ (select |a!| |index1#0|) |c|)) (= (select |b!| |index1#0|) (+ (select |b!| |index1#0|) |c|))))) (and (exists ((|local_var14| Int)) (= (select |b!| |local_var14|) (select |a!| 1))) (and (>= |c| 1) (and (forall ((|local_var15| Int)) (=> (>= |local_var15| 0) (exists ((|local_var10| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var10| Int)) (= (select |a!| 0) (select |b!| 0))))))) (=> (and (exists ((|local_var14| Int)) (= (select |b| |local_var14|) (select |a| 1))) (and (>= |c| 1) (and (forall ((|local_var15| Int)) (=> (>= |local_var15| 0) (exists ((|local_var10| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var10| Int)) (= (select |a| 0) (select |b| 0)))))) (forall ((|index1#1| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#1|) (select |b| |index2#0|))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 6
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 6
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var c Int)
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int))(parameter2 Int))Bool) 
(constraint (=> (and (= a b) (> c 1) )(inv-fn a b c )))
(constraint (=> (and (inv-fn a b c ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! c )))
(constraint (=> (and (inv-fn a b c ) (and (and (= (select a! 0) (+ (select a! 0) c )) (= (select b! 0) (+ (select b! 0) c )) ) (and (= (select a! 1) (+ (select a! 1) c )) (= (select b! 1) (+ (select b! 1) c )) ) (and (= (select a! 2) (+ (select a! 2) c )) (= (select b! 2) (+ (select b! 2) c )) ) (and (= (select a! 3) (+ (select a! 3) c )) (= (select b! 3) (+ (select b! 3) c )) ) (and (= (select a! 4) (+ (select a! 4) c )) (= (select b! 4) (+ (select b! 4) c )) ) (and (= (select a! 5) (+ (select a! 5) c )) (= (select b! 5) (+ (select b! 5) c )) ) ) )(inv-fn a! b! c )))
(constraint (=> (inv-fn a b c )(and (or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) (= (select a 0) (select b 3)) (= (select a 0) (select b 4)) (= (select a 0) (select b 5)) ) (or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) (= (select a 1) (select b 3)) (= (select a 1) (select b 4)) (= (select a 1) (select b 5)) ) (or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) (= (select a 2) (select b 3)) (= (select a 2) (select b 4)) (= (select a 2) (select b 5)) ) (or (= (select a 3) (select b 0)) (= (select a 3) (select b 1)) (= (select a 3) (select b 2)) (= (select a 3) (select b 3)) (= (select a 3) (select b 4)) (= (select a 3) (select b 5)) ) (or (= (select a 4) (select b 0)) (= (select a 4) (select b 1)) (= (select a 4) (select b 2)) (= (select a 4) (select b 3)) (= (select a 4) (select b 4)) (= (select a 4) (select b 5)) ) (or (= (select a 5) (select b 0)) (= (select a 5) (select b 1)) (= (select a 5) (select b 2)) (= (select a 5) (select b 3)) (= (select a 5) (select b 4)) (= (select a 5) (select b 5)) ) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter1 3))) (let ((_let_5 (select synth::parameter1 4))) (let ((_let_6 (select synth::parameter1 5))) (let ((_let_7 (select synth::parameter0 1))) (let ((_let_8 (select synth::parameter0 2))) (let ((_let_9 (select synth::parameter0 3))) (let ((_let_10 (select synth::parameter0 4))) (let ((_let_11 (select synth::parameter0 5))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) (= _let_0 _let_4) (= _let_0 _let_5) (= _let_0 _let_6) ) (or (= _let_1 _let_8) (= _let_2 _let_8) (= _let_3 _let_8) (= _let_4 _let_8) (= _let_5 _let_8) (= _let_6 _let_8) ) (or (= _let_1 _let_9) (= _let_2 _let_9) (= _let_3 _let_9) (= _let_4 _let_9) (= _let_5 _let_9) (= _let_6 _let_9) ) (or (= _let_1 _let_10) (= _let_2 _let_10) (= _let_3 _let_10) (= _let_4 _let_10) (= _let_5 _let_10) (= _let_6 _let_10) ) (or (= _let_1 _let_11) (= _let_2 _let_11) (= _let_3 _let_11) (= _let_4 _let_11) (= _let_5 _let_11) (= _let_6 _let_11) ) (bvuge synth::parameter2 1) (or (= _let_1 _let_7) (= _let_2 _let_7) (= _let_3 _let_7) (= _let_4 _let_7) (= _let_5 _let_7) (= _let_6 _let_7) ) )))))))))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) (= (select synth::parameter0 0) (select synth::parameter1 5)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) (= (select synth::parameter1 5) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) (= (select synth::parameter1 5) (select synth::parameter0 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) (= (select synth::parameter1 5) (select synth::parameter0 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 5)) (= (select synth::parameter1 1) (select synth::parameter0 5)) (= (select synth::parameter1 2) (select synth::parameter0 5)) (= (select synth::parameter1 3) (select synth::parameter0 5)) (= (select synth::parameter1 4) (select synth::parameter0 5)) (= (select synth::parameter1 5) (select synth::parameter0 5)) ) (>= synth::parameter2 1) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) (= (select synth::parameter1 5) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) (= (select synth::parameter0 0) (select synth::parameter1 5)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) (= (select synth::parameter1 5) (select synth::parameter0 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) (= (select synth::parameter1 5) (select synth::parameter0 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) (= (select synth::parameter1 5) (select synth::parameter0 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 5)) (= (select synth::parameter1 1) (select synth::parameter0 5)) (= (select synth::parameter1 2) (select synth::parameter0 5)) (= (select synth::parameter1 3) (select synth::parameter0 5)) (= (select synth::parameter1 4) (select synth::parameter0 5)) (= (select synth::parameter1 5) (select synth::parameter0 5)) ) (>= synth::parameter2 1) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) (= (select synth::parameter1 5) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) (= (select synth::parameter0 0) (select synth::parameter1 5)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 3)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 4)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 5)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 2)) (= (select synth::parameter1 1) (select synth::parameter0 2)) (= (select synth::parameter1 2) (select synth::parameter0 2)) (= (select synth::parameter1 3) (select synth::parameter0 2)) (= (select synth::parameter1 4) (select synth::parameter0 2)) (= (select synth::parameter1 5) (select synth::parameter0 2)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 2)) with local_var17, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var17, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var17, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var17 with local_var17, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var17, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var17, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 2 with local_var17, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 3)) (= (select synth::parameter1 1) (select synth::parameter0 3)) (= (select synth::parameter1 2) (select synth::parameter0 3)) (= (select synth::parameter1 3) (select synth::parameter0 3)) (= (select synth::parameter1 4) (select synth::parameter0 3)) (= (select synth::parameter1 5) (select synth::parameter0 3)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 3)) with local_var18, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var18, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var18, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var18 with local_var18, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 3) with local_var18, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var18, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 3 with local_var18, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 4)) (= (select synth::parameter1 1) (select synth::parameter0 4)) (= (select synth::parameter1 2) (select synth::parameter0 4)) (= (select synth::parameter1 3) (select synth::parameter0 4)) (= (select synth::parameter1 4) (select synth::parameter0 4)) (= (select synth::parameter1 5) (select synth::parameter0 4)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 4)) with local_var19, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var19, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var19, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var19 with local_var19, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 4) with local_var19, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var19, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 4 with local_var19, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 5)) (= (select synth::parameter1 1) (select synth::parameter0 5)) (= (select synth::parameter1 2) (select synth::parameter0 5)) (= (select synth::parameter1 3) (select synth::parameter0 5)) (= (select synth::parameter1 4) (select synth::parameter0 5)) (= (select synth::parameter1 5) (select synth::parameter0 5)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 5)) with local_var20, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var20, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var20, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var20 with local_var20, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 5) with local_var20, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var20, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 5 with local_var20, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) (= (select synth::parameter1 5) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var21, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var21, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var21, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var21 with local_var21, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var21, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var21, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var21, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var16 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var17 Int)) (= (select synth::parameter1 local_var17) (select synth::parameter0 2))) (exists ((local_var18 Int)) (= (select synth::parameter1 local_var18) (select synth::parameter0 3))) (exists ((local_var19 Int)) (= (select synth::parameter1 local_var19) (select synth::parameter0 4))) (exists ((local_var20 Int)) (= (select synth::parameter1 local_var20) (select synth::parameter0 5))) (>= synth::parameter2 1) (exists ((local_var21 Int)) (= (select synth::parameter1 local_var21) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var16 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var16
Looking for array index in (tuple) tuple
Looking for array index in local_var16 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var17 Int)) (= (select synth::parameter1 local_var17) (select synth::parameter0 2))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var17
Looking for array index in (tuple) tuple
Looking for array index in local_var17 symbol
Looking for array index in (= (select synth::parameter1 local_var17) (select synth::parameter0 2)) =
Looking for array index in (select synth::parameter1 local_var17) index
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 2, 1
Looking for array index in (exists ((local_var18 Int)) (= (select synth::parameter1 local_var18) (select synth::parameter0 3))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var18
Looking for array index in (tuple) tuple
Looking for array index in local_var18 symbol
Looking for array index in (= (select synth::parameter1 local_var18) (select synth::parameter0 3)) =
Looking for array index in (select synth::parameter1 local_var18) index
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 2, 1
Looking for array index in (exists ((local_var19 Int)) (= (select synth::parameter1 local_var19) (select synth::parameter0 4))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var19
Looking for array index in (tuple) tuple
Looking for array index in local_var19 symbol
Looking for array index in (= (select synth::parameter1 local_var19) (select synth::parameter0 4)) =
Looking for array index in (select synth::parameter1 local_var19) index
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 2, 1
Looking for array index in (exists ((local_var20 Int)) (= (select synth::parameter1 local_var20) (select synth::parameter0 5))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var20
Looking for array index in (tuple) tuple
Looking for array index in local_var20 symbol
Looking for array index in (= (select synth::parameter1 local_var20) (select synth::parameter0 5)) =
Looking for array index in (select synth::parameter1 local_var20) index
Looking for array index in (select synth::parameter0 5) index
index value: 5 at 2, 1
Looking for array index in (bvuge synth::parameter2 1) >=
Looking for array index in synth::parameter2 symbol
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (exists ((local_var21 Int)) (= (select synth::parameter1 local_var21) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var21
Looking for array index in (tuple) tuple
Looking for array index in local_var21 symbol
Looking for array index in (= (select synth::parameter1 local_var21) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var21) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
Checking this for 1, which is operand 2
Do any of the constants match? 
Checking this for 2, which is operand 3
Do any of the constants match? 
Checking this for 3, which is operand 4
Do any of the constants match? 
replace array indices in (exists ((local_var17 Int)) (= (select synth::parameter1 local_var17) (select synth::parameter0 2))) with local_var22, vector idx 0and constant idx 0
calling from the bottom 
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var17
replace array indices in (tuple) with local_var22, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var17 with local_var22, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (= (select synth::parameter1 local_var17) (select synth::parameter0 2)) with local_var22, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 local_var17) with local_var22, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var22, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in local_var17 with local_var22, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 2) with local_var22, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var22, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var22 with local_var22, vector idx 1and constant idx 0
About to verify: 

synth_fun::inv-fn -> (exists { integer local_var21; parameter1[local_var21] == parameter0[1] }) && parameter2 >= 1 && (forall { integer local_var22; local_var22 >= 0 ==> (exists { integer local_var16; parameter0[0] == parameter1[0] }) }) && (exists { integer local_var16; parameter0[0] == parameter1[0] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |c| () Int)
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= |a| |b|) (> |c| 1)) (and (exists ((|local_var21| Int)) (= (select |b| |local_var21|) (select |a| 1))) (and (>= |c| 1) (and (forall ((|local_var22| Int)) (=> (>= |local_var22| 0) (exists ((|local_var16| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var16| Int)) (= (select |a| 0) (select |b| 0))))))) (=> (and (and (exists ((|local_var21| Int)) (= (select |b| |local_var21|) (select |a| 1))) (and (>= |c| 1) (and (forall ((|local_var22| Int)) (=> (>= |local_var22| 0) (exists ((|local_var16| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var16| Int)) (= (select |a| 0) (select |b| 0)))))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (exists ((|local_var21| Int)) (= (select |b!| |local_var21|) (select |a!| 1))) (and (>= |c| 1) (and (forall ((|local_var22| Int)) (=> (>= |local_var22| 0) (exists ((|local_var16| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var16| Int)) (= (select |a!| 0) (select |b!| 0))))))) (=> (and (and (exists ((|local_var21| Int)) (= (select |b| |local_var21|) (select |a| 1))) (and (>= |c| 1) (and (forall ((|local_var22| Int)) (=> (>= |local_var22| 0) (exists ((|local_var16| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var16| Int)) (= (select |a| 0) (select |b| 0)))))) (forall ((|index1#0| Int)) (and (= (select |a!| |index1#0|) (+ (select |a!| |index1#0|) |c|)) (= (select |b!| |index1#0|) (+ (select |b!| |index1#0|) |c|))))) (and (exists ((|local_var21| Int)) (= (select |b!| |local_var21|) (select |a!| 1))) (and (>= |c| 1) (and (forall ((|local_var22| Int)) (=> (>= |local_var22| 0) (exists ((|local_var16| Int)) (= (select |a!| 0) (select |b!| 0))))) (exists ((|local_var16| Int)) (= (select |a!| 0) (select |b!| 0))))))) (=> (and (exists ((|local_var21| Int)) (= (select |b| |local_var21|) (select |a| 1))) (and (>= |c| 1) (and (forall ((|local_var22| Int)) (=> (>= |local_var22| 0) (exists ((|local_var16| Int)) (= (select |a| 0) (select |b| 0))))) (exists ((|local_var16| Int)) (= (select |a| 0) (select |b| 0)))))) (forall ((|index1#1| Int)) (exists ((|index2#0| Int)) (= (select |a| |index1#1|) (select |b| |index2#0|))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

SAT, got counterexample.

Reached max array size 7
permutation_4.sl
 Declared variable a
 Declared variable b
 Declared variable a!
 Declared variable b!
 Declared variable idx1
 Declared variable idx2
Starting to bound arrays to width 2
Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(declare-var idx1 Int)
(declare-var idx2 Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (=> (< 0 2)(or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) )) (=> (< 1 2)(or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) )) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter0 1))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) ) (or (= _let_1 _let_3) (= _let_2 _let_3) ) )))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var1, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var1, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var1 with local_var1, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var1, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var0 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var1 Int)) (= (select synth::parameter1 local_var1) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var0 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var0
Looking for array index in (tuple) tuple
Looking for array index in local_var0 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var1 Int)) (= (select synth::parameter1 local_var1) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var1
Looking for array index in (tuple) tuple
Looking for array index in local_var1 symbol
Looking for array index in (= (select synth::parameter1 local_var1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var1) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
About to verify: 

synth_fun::inv-fn -> (exists { integer local_var0; parameter0[0] == parameter1[0] }) && (exists { integer local_var1; parameter1[local_var1] == parameter0[1] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (exists ((|local_var0| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var1| Int)) (= (select |b| |local_var1|) (select |a| 1))))) (=> (and (and (exists ((|local_var0| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var1| Int)) (= (select |b| |local_var1|) (select |a| 1)))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (exists ((|local_var0| Int)) (= (select |a!| 0) (select |b!| 0))) (exists ((|local_var1| Int)) (= (select |b!| |local_var1|) (select |a!| 1))))) (=> (and (exists ((|local_var0| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var1| Int)) (= (select |b| |local_var1|) (select |a| 1)))) (forall ((|index1#0| Int)) (=> (< |index1#0| 2) (exists ((|index2#0| Int)) (= (select |a| |index1#0|) (select |b| |index2#0|)))))))))
Warning: unable to find value for symbol
  * type: integer
  * identifier: idx1
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx2
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 3
Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 3
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(declare-var idx1 Int)
(declare-var idx2 Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (=> (< 0 2)(or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) )) (=> (< 1 2)(or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) )) (=> (< 2 2)(or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) )) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter0 1))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) ) (or (= _let_1 _let_4) (= _let_2 _let_4) (= _let_3 _let_4) ) ))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var3, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var3, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var3 with local_var3, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var3, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var2 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var3 Int)) (= (select synth::parameter1 local_var3) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var2 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var2
Looking for array index in (tuple) tuple
Looking for array index in local_var2 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var3 Int)) (= (select synth::parameter1 local_var3) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var3
Looking for array index in (tuple) tuple
Looking for array index in local_var3 symbol
Looking for array index in (= (select synth::parameter1 local_var3) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var3) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
About to verify: 

synth_fun::inv-fn -> (exists { integer local_var2; parameter0[0] == parameter1[0] }) && (exists { integer local_var3; parameter1[local_var3] == parameter0[1] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var3| Int)) (= (select |b| |local_var3|) (select |a| 1))))) (=> (and (and (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var3| Int)) (= (select |b| |local_var3|) (select |a| 1)))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (exists ((|local_var2| Int)) (= (select |a!| 0) (select |b!| 0))) (exists ((|local_var3| Int)) (= (select |b!| |local_var3|) (select |a!| 1))))) (=> (and (exists ((|local_var2| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var3| Int)) (= (select |b| |local_var3|) (select |a| 1)))) (forall ((|index1#0| Int)) (=> (< |index1#0| 2) (exists ((|index2#0| Int)) (= (select |a| |index1#0|) (select |b| |index2#0|)))))))))
Warning: unable to find value for symbol
  * type: integer
  * identifier: idx1
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx2
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 4
Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 4
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(declare-var idx1 Int)
(declare-var idx2 Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (=> (< 0 2)(or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) (= (select a 0) (select b 3)) )) (=> (< 1 2)(or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) (= (select a 1) (select b 3)) )) (=> (< 2 2)(or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) (= (select a 2) (select b 3)) )) (=> (< 3 2)(or (= (select a 3) (select b 0)) (= (select a 3) (select b 1)) (= (select a 3) (select b 2)) (= (select a 3) (select b 3)) )) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter1 3))) (let ((_let_5 (select synth::parameter0 1))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) (= _let_0 _let_4) ) (or (= _let_1 _let_5) (= _let_2 _let_5) (= _let_3 _let_5) (= _let_4 _let_5) ) )))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 3)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var5, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var5, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var5 with local_var5, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var5, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var5, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var4 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var5 Int)) (= (select synth::parameter1 local_var5) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var4 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var4
Looking for array index in (tuple) tuple
Looking for array index in local_var4 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var5 Int)) (= (select synth::parameter1 local_var5) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var5
Looking for array index in (tuple) tuple
Looking for array index in local_var5 symbol
Looking for array index in (= (select synth::parameter1 local_var5) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var5) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
About to verify: 

synth_fun::inv-fn -> (exists { integer local_var4; parameter0[0] == parameter1[0] }) && (exists { integer local_var5; parameter1[local_var5] == parameter0[1] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (exists ((|local_var4| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var5| Int)) (= (select |b| |local_var5|) (select |a| 1))))) (=> (and (and (exists ((|local_var4| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var5| Int)) (= (select |b| |local_var5|) (select |a| 1)))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (exists ((|local_var4| Int)) (= (select |a!| 0) (select |b!| 0))) (exists ((|local_var5| Int)) (= (select |b!| |local_var5|) (select |a!| 1))))) (=> (and (exists ((|local_var4| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var5| Int)) (= (select |b| |local_var5|) (select |a| 1)))) (forall ((|index1#0| Int)) (=> (< |index1#0| 2) (exists ((|index2#0| Int)) (= (select |a| |index1#0|) (select |b| |index2#0|)))))))))
Warning: unable to find value for symbol
  * type: integer
  * identifier: idx1
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx2
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 5
Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 5
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(declare-var idx1 Int)
(declare-var idx2 Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (=> (< 0 2)(or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) (= (select a 0) (select b 3)) (= (select a 0) (select b 4)) )) (=> (< 1 2)(or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) (= (select a 1) (select b 3)) (= (select a 1) (select b 4)) )) (=> (< 2 2)(or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) (= (select a 2) (select b 3)) (= (select a 2) (select b 4)) )) (=> (< 3 2)(or (= (select a 3) (select b 0)) (= (select a 3) (select b 1)) (= (select a 3) (select b 2)) (= (select a 3) (select b 3)) (= (select a 3) (select b 4)) )) (=> (< 4 2)(or (= (select a 4) (select b 0)) (= (select a 4) (select b 1)) (= (select a 4) (select b 2)) (= (select a 4) (select b 3)) (= (select a 4) (select b 4)) )) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter1 3))) (let ((_let_5 (select synth::parameter1 4))) (let ((_let_6 (select synth::parameter0 1))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) (= _let_0 _let_4) (= _let_0 _let_5) ) (or (= _let_1 _let_6) (= _let_2 _let_6) (= _let_3 _let_6) (= _let_4 _let_6) (= _let_5 _let_6) ) ))))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 3)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 4)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var7, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var7, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var7, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var7 with local_var7, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var7, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var7, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var7, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var6 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var7 Int)) (= (select synth::parameter1 local_var7) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var6 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var6
Looking for array index in (tuple) tuple
Looking for array index in local_var6 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var7 Int)) (= (select synth::parameter1 local_var7) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var7
Looking for array index in (tuple) tuple
Looking for array index in local_var7 symbol
Looking for array index in (= (select synth::parameter1 local_var7) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var7) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
About to verify: 

synth_fun::inv-fn -> (exists { integer local_var6; parameter0[0] == parameter1[0] }) && (exists { integer local_var7; parameter1[local_var7] == parameter0[1] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var7| Int)) (= (select |b| |local_var7|) (select |a| 1))))) (=> (and (and (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var7| Int)) (= (select |b| |local_var7|) (select |a| 1)))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (exists ((|local_var6| Int)) (= (select |a!| 0) (select |b!| 0))) (exists ((|local_var7| Int)) (= (select |b!| |local_var7|) (select |a!| 1))))) (=> (and (exists ((|local_var6| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var7| Int)) (= (select |b| |local_var7|) (select |a| 1)))) (forall ((|index1#0| Int)) (=> (< |index1#0| 2) (exists ((|index2#0| Int)) (= (select |a| |index1#0|) (select |b| |index2#0|)))))))))
Warning: unable to find value for symbol
  * type: integer
  * identifier: idx1
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx2
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 6
Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 6
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b! (Array Int Int))
(declare-var idx1 Int)
(declare-var idx2 Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int)))Bool) 
(constraint (=> (= a b)(inv-fn a b )))
(constraint (=> (and (inv-fn a b ) (and (= a! (store (store a 1 (select a 0)) 0 (select a 1))) (= b! b) ) )(inv-fn a! b! )))
(constraint (=> (inv-fn a b )(and (=> (< 0 2)(or (= (select a 0) (select b 0)) (= (select a 0) (select b 1)) (= (select a 0) (select b 2)) (= (select a 0) (select b 3)) (= (select a 0) (select b 4)) (= (select a 0) (select b 5)) )) (=> (< 1 2)(or (= (select a 1) (select b 0)) (= (select a 1) (select b 1)) (= (select a 1) (select b 2)) (= (select a 1) (select b 3)) (= (select a 1) (select b 4)) (= (select a 1) (select b 5)) )) (=> (< 2 2)(or (= (select a 2) (select b 0)) (= (select a 2) (select b 1)) (= (select a 2) (select b 2)) (= (select a 2) (select b 3)) (= (select a 2) (select b 4)) (= (select a 2) (select b 5)) )) (=> (< 3 2)(or (= (select a 3) (select b 0)) (= (select a 3) (select b 1)) (= (select a 3) (select b 2)) (= (select a 3) (select b 3)) (= (select a 3) (select b 4)) (= (select a 3) (select b 5)) )) (=> (< 4 2)(or (= (select a 4) (select b 0)) (= (select a 4) (select b 1)) (= (select a 4) (select b 2)) (= (select a 4) (select b 3)) (= (select a 4) (select b 4)) (= (select a 4) (select b 5)) )) (=> (< 5 2)(or (= (select a 5) (select b 0)) (= (select a 5) (select b 1)) (= (select a 5) (select b 2)) (= (select a 5) (select b 3)) (= (select a 5) (select b 4)) (= (select a 5) (select b 5)) )) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 0))) (let ((_let_1 (select synth::parameter1 0))) (let ((_let_2 (select synth::parameter1 1))) (let ((_let_3 (select synth::parameter1 2))) (let ((_let_4 (select synth::parameter1 3))) (let ((_let_5 (select synth::parameter1 4))) (let ((_let_6 (select synth::parameter1 5))) (let ((_let_7 (select synth::parameter0 1))) (and (or (= _let_0 _let_1) (= _let_0 _let_2) (= _let_0 _let_3) (= _let_0 _let_4) (= _let_0 _let_5) (= _let_0 _let_6) ) (or (= _let_1 _let_7) (= _let_2 _let_7) (= _let_3 _let_7) (= _let_4 _let_7) (= _let_5 _let_7) (= _let_6 _let_7) ) )))))))))
after expanding let:
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) (= (select synth::parameter0 0) (select synth::parameter1 5)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) (= (select synth::parameter1 5) (select synth::parameter0 1)) ) )
after removing implications :
(and (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) (= (select synth::parameter0 0) (select synth::parameter1 5)) ) (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) (= (select synth::parameter1 5) (select synth::parameter0 1)) ) )
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter0 0) (select synth::parameter1 0)) (= (select synth::parameter0 0) (select synth::parameter1 1)) (= (select synth::parameter0 0) (select synth::parameter1 2)) (= (select synth::parameter0 0) (select synth::parameter1 3)) (= (select synth::parameter0 0) (select synth::parameter1 4)) (= (select synth::parameter0 0) (select synth::parameter1 5)) )
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 1)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 2)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 3)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 4)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 1
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 5)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 1
Checking this for 1, which is operand 1
Checking this for 1, which is operand 1
ATTEMPTING TO ADD quant back for (or (= (select synth::parameter1 0) (select synth::parameter0 1)) (= (select synth::parameter1 1) (select synth::parameter0 1)) (= (select synth::parameter1 2) (select synth::parameter0 1)) (= (select synth::parameter1 3) (select synth::parameter0 1)) (= (select synth::parameter1 4) (select synth::parameter0 1)) (= (select synth::parameter1 5) (select synth::parameter0 1)) )
Looking for array index in (= (select synth::parameter1 0) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 1) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 2) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 2) index
index value: 2 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 3) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 3) index
index value: 3 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 4) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 4) index
index value: 4 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Looking for array index in (= (select synth::parameter1 5) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 5) index
index value: 5 at 1, 0
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 1
Checking this for 1, which is operand 1
Do any of the constants match? 
Checking this for 2, which is operand 2
Do any of the constants match? 
Checking this for 3, which is operand 3
Do any of the constants match? 
Checking this for 4, which is operand 4
Do any of the constants match? 
Checking this for 5, which is operand 5
Do any of the constants match? 
Checking this for 1, which is operand 1
replace array indices in (= (select synth::parameter1 0) (select synth::parameter0 1)) with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var9, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var9, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var9 with local_var9, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var9, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var9, vector idx 0and constant idx 0
ATTEMPTING TO ADD quant back for (and (exists ((local_var8 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) (exists ((local_var9 Int)) (= (select synth::parameter1 local_var9) (select synth::parameter0 1))) )
Looking for array index in (exists ((local_var8 Int)) (= (select synth::parameter0 0) (select synth::parameter1 0))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var8
Looking for array index in (tuple) tuple
Looking for array index in local_var8 symbol
Looking for array index in (= (select synth::parameter0 0) (select synth::parameter1 0)) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 2, 0
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 2, 1
Looking for array index in (exists ((local_var9 Int)) (= (select synth::parameter1 local_var9) (select synth::parameter0 1))) exists
WARNING: unsupported expression typetuple
  * type: tuple
  0: symbol
      * type: integer
      * identifier: local_var9
Looking for array index in (tuple) tuple
Looking for array index in local_var9 symbol
Looking for array index in (= (select synth::parameter1 local_var9) (select synth::parameter0 1)) =
Looking for array index in (select synth::parameter1 local_var9) index
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 1
About to verify: 

synth_fun::inv-fn -> (exists { integer local_var8; parameter0[0] == parameter1[0] }) && (exists { integer local_var9; parameter1[local_var9] == parameter0[1] })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |b| () (Array Int Int))
; find_symbols
(declare-fun |a!| () (Array Int Int))
; find_symbols
(declare-fun |b!| () (Array Int Int))
; set_to false
(assert (not (and (=> (= |a| |b|) (and (exists ((|local_var8| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var9| Int)) (= (select |b| |local_var9|) (select |a| 1))))) (=> (and (and (exists ((|local_var8| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var9| Int)) (= (select |b| |local_var9|) (select |a| 1)))) (and (= |a!| (store (store |a| 1 (select |a| 0)) 0 (select |a| 1))) (= |b!| |b|))) (and (exists ((|local_var8| Int)) (= (select |a!| 0) (select |b!| 0))) (exists ((|local_var9| Int)) (= (select |b!| |local_var9|) (select |a!| 1))))) (=> (and (exists ((|local_var8| Int)) (= (select |a| 0) (select |b| 0))) (exists ((|local_var9| Int)) (= (select |b| |local_var9|) (select |a| 1)))) (forall ((|index1#0| Int)) (=> (< |index1#0| 2) (exists ((|index2#0| Int)) (= (select |a| |index1#0|) (select |b| |index2#0|)))))))))
Warning: unable to find value for symbol
  * type: integer
  * identifier: idx1
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: integer
  * identifier: idx2
Assume has been simplified out by solver.

SAT, got counterexample.

Reached max array size 7
simple_array.sl
 Declared variable x
 Declared variable x!
Starting to bound arrays to width 2
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (= (select x 0) 10) (= (select x 1) 10) )(inv-fn x )))
(constraint (=> (and (inv-fn x ) (and (ite (<= (select x 0) 100) (= (select x! 0) (+ (select x 0) 1 )) (= (select x! 0) (select x 0))) (ite (<= (select x 1) 100) (= (select x! 1) (+ (select x 1) 1 )) (= (select x! 1) (select x 1))) ) )(inv-fn x! )))
(constraint (=> (inv-fn x )(and (=> (>= 0 0)(>= (select x 0) 10)) (=> (>= 1 0)(>= (select x 1) 10)) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(and (bvuge (select synth::parameter0 0) 10) (bvuge (select synth::parameter0 1) 10) )
after expanding let:
(and (>= (select synth::parameter0 0) 10) (>= (select synth::parameter0 1) 10) )
after removing implications :
(and (>= (select synth::parameter0 0) 10) (>= (select synth::parameter0 1) 10) )
ATTEMPTING TO ADD quant back for (and (>= (select synth::parameter0 0) 10) (>= (select synth::parameter0 1) 10) )
Looking for array index in (bvuge (select synth::parameter0 0) 10) >=
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in 10 constant
Pushing back constant value constant
  * type: integer
  * value: 10
Looking for array index in (bvuge (select synth::parameter0 1) 10) >=
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 0
Looking for array index in 10 constant
Pushing back constant value constant
  * type: integer
  * value: 10
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 10 9
This and the last comparison
 Comp: 0 and 1 = 0
replace array indices in (>= (select synth::parameter0 0) 10) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var0, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in 10 with local_var0, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 1
next constant idx 1
About to verify: 

synth_fun::inv-fn -> forall { integer local_var0; local_var0 >= 0 ==> parameter0[local_var0] >= 10 }
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |x!| () (Array Int Int))
; set_to false
(assert (not (and (=> (forall ((|index#0| Int)) (= (select |x| |index#0|) 10)) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |x| |local_var0|) 10)))) (=> (and (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |x| |local_var0|) 10))) (forall ((|index#1| Int)) (ite (<= (select |x| |index#1|) 100) (= (select |x!| |index#1|) (+ (select |x| |index#1|) 1)) (= (select |x!| |index#1|) (select |x| |index#1|))))) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |x!| |local_var0|) 10)))) (=> (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |x| |local_var0|) 10))) (forall ((|index#2| Int)) (=> (>= |index#2| 0) (>= (select |x| |index#2|) 10)))))))
UNSAT, got solution 
 
DOING ARRAY SYNTHESHS
Result: synth_fun::inv-fn -> forall { integer local_var0; local_var0 >= 0 ==> parameter0[local_var0] >= 10 }
; SMT 2
; Generated for Z3
(set-info :source "")
(set-option :produce-models true)
SMT: synth_fun::inv-fn -> 
; find_symbols
(declare-fun |synth::parameter0| () (Array Int Int))
; convert
(define-fun |B0| () Bool (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |synth::parameter0| |local_var0|) 10))))


Synthesis time: 0.0477386s
simple_array_and_one_var.sl
 Declared variable i
 Declared variable x
 Declared variable x!
 Declared variable i!
Starting to bound arrays to width 2
Is index! Is index! Is index! Is index! Is index! Is index! Is index! Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var i Int)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(declare-var i! Int)
(synth-fun inv-fn((parameter0 Int)(parameter1 (Array Int Int)))Bool) 
(constraint (=> (and (> i 0) (and (= (select x 0) 10) (= (select x 1) 10) ) )(inv-fn i x )))
(constraint (=> (and (inv-fn i x ) (and (= i! i) (and (ite (< (select x 0) 100) (= (select x! 0) (+ (select x 0) i )) (= (select x! 0) (select x 0))) (ite (< (select x 1) 100) (= (select x! 1) (+ (select x 1) i )) (= (select x! 1) (select x 1))) ) ) )(inv-fn i! x! )))
(constraint (=> (inv-fn i x )(and (=> (>= 0 0)(>= (select x 0) 10)) (=> (>= 1 0)(>= (select x 1) 10)) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(and (bvuge (select synth::parameter1 0) 10) (bvuge (select synth::parameter1 1) 10) (bvuge synth::parameter0 1) )
after expanding let:
(and (>= (select synth::parameter1 0) 10) (>= (select synth::parameter1 1) 10) (>= synth::parameter0 1) )
after removing implications :
(and (>= (select synth::parameter1 0) 10) (>= (select synth::parameter1 1) 10) (>= synth::parameter0 1) )
ATTEMPTING TO ADD quant back for (and (>= (select synth::parameter1 0) 10) (>= (select synth::parameter1 1) 10) (>= synth::parameter0 1) )
Looking for array index in (bvuge (select synth::parameter1 0) 10) >=
Looking for array index in (select synth::parameter1 0) index
index value: 0 at 1, 0
Looking for array index in 10 constant
Pushing back constant value constant
  * type: integer
  * value: 10
Looking for array index in (bvuge (select synth::parameter1 1) 10) >=
Looking for array index in (select synth::parameter1 1) index
index value: 1 at 1, 0
Looking for array index in 10 constant
Pushing back constant value constant
  * type: integer
  * value: 10
Looking for array index in (bvuge synth::parameter0 1) >=
Looking for array index in synth::parameter0 symbol
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 10 9
This and the last comparison
 Comp: 0 and 1 = 0
replace array indices in (>= (select synth::parameter1 0) 10) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter1 0) with local_var0, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter1 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in 10 with local_var0, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 1
next constant idx 1
About to verify: 

synth_fun::inv-fn -> parameter0 >= 1 && (forall { integer local_var0; local_var0 >= 0 ==> parameter1[local_var0] >= 10 })
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |i| () Int)
; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |i!| () Int)
; find_symbols
(declare-fun |x!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (> |i| 0) (forall ((|index#0| Int)) (= (select |x| |index#0|) 10))) (and (>= |i| 1) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |x| |local_var0|) 10))))) (=> (and (and (>= |i| 1) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |x| |local_var0|) 10)))) (and (= |i!| |i|) (forall ((|index#1| Int)) (ite (< (select |x| |index#1|) 100) (= (select |x!| |index#1|) (+ (select |x| |index#1|) |i|)) (= (select |x!| |index#1|) (select |x| |index#1|)))))) (and (>= |i!| 1) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |x!| |local_var0|) 10))))) (=> (and (>= |i| 1) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |x| |local_var0|) 10)))) (forall ((|index#2| Int)) (=> (>= |index#2| 0) (>= (select |x| |index#2|) 10)))))))
UNSAT, got solution 
 
DOING ARRAY SYNTHESHS
Result: synth_fun::inv-fn -> parameter0 >= 1 && (forall { integer local_var0; local_var0 >= 0 ==> parameter1[local_var0] >= 10 })
; SMT 2
; Generated for Z3
(set-info :source "")
(set-option :produce-models true)
SMT: synth_fun::inv-fn -> 
; find_symbols
(declare-fun |synth::parameter0| () Int)
; find_symbols
(declare-fun |synth::parameter1| () (Array Int Int))
; convert
(define-fun |B0| () Bool (and (>= |synth::parameter0| 1) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (>= (select |synth::parameter1| |local_var0|) 10)))))


Synthesis time: 0.128466s
simple_sum.sl
standard_vararg_ground.sl
 Declared variable a
 Declared variable i
 Declared variable a!
 Declared variable i!
Starting to bound arrays to width 2
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Is declared variable 
Is index! Adding bounds outside of constraint 
Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var i Int)
(declare-var a! (Array Int Int))
(declare-var i! Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 Int))Bool) 
(constraint (=> (and (< i 2) (>= i 0) )(=> (and (= i 0) (= (select a i) 0) )(inv-fn a i ))))
(constraint (=> (and (< i 2) (>= i 0) )(=> (and (inv-fn a i ) (and (ite (>= (select a i) 0) (= i! (+ i 1 )) (= i! i)) (= a! a) ) )(inv-fn a! i! ))))
(constraint (=> (and (< i 2) (>= i 0) )(=> (and (inv-fn a i ) (< (select a i) 0) )(and (=> (and (< 0 i) (>= 0 0) )(>= (select a 0) 0)) (=> (and (< 1 i) (>= 1 0) )(>= (select a 1) 0)) ))))
(check-synth)

Verifying solution from CVC4

SOLUTION(or (bvuge synth::parameter1 2) (not (bvuge synth::parameter1 0)) (bvuge (select synth::parameter0 synth::parameter1) 0) (not (bvuge synth::parameter1 1)) (bvuge (select synth::parameter0 0) 0) )
after expanding let:
(or (>= synth::parameter1 2) (not (>= synth::parameter1 0)) (>= (select synth::parameter0 synth::parameter1) 0) (not (>= synth::parameter1 1)) (>= (select synth::parameter0 0) 0) )
after removing implications :
(or (>= (select synth::parameter0 synth::parameter1) 0) (not (>= synth::parameter1 1)) (>= (select synth::parameter0 0) 0) )
ATTEMPTING TO ADD quant back for (or (>= (select synth::parameter0 synth::parameter1) 0) (not (>= synth::parameter1 1)) (>= (select synth::parameter0 0) 0) )
Looking for array index in (bvuge (select synth::parameter0 synth::parameter1) 0) >=
Looking for array index in (select synth::parameter0 synth::parameter1) index
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge synth::parameter1 1)) not
Looking for array index in (bvuge synth::parameter1 1) >=
Looking for array index in synth::parameter1 symbol
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (bvuge (select synth::parameter0 0) 0) >=
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
About to verify: 

synth_fun::inv-fn -> parameter0[parameter1] >= 0 || !(parameter1 >= 1) || parameter0[0] >= 0
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |i| () Int)
; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |i!| () Int)
; find_symbols
(declare-fun |a!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= |i| 0) (= (select |a| |i|) 0)) (or (>= (select |a| |i|) 0) (not (>= |i| 1)) (>= (select |a| 0) 0))) (=> (and (or (>= (select |a| |i|) 0) (not (>= |i| 1)) (>= (select |a| 0) 0)) (and (ite (>= (select |a| |i|) 0) (= |i!| (+ |i| 1)) (= |i!| |i|)) (= |a!| |a|))) (or (>= (select |a!| |i!|) 0) (not (>= |i!| 1)) (>= (select |a!| 0) 0))) (=> (and (or (>= (select |a| |i|) 0) (not (>= |i| 1)) (>= (select |a| 0) 0)) (< (select |a| |i|) 0)) (forall ((|index#0| Int)) (=> (and (< |index#0| |i|) (>= |index#0| 0)) (>= (select |a| |index#0|) 0)))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a!
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 3
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Is declared variable 
Is index! Adding bounds outside of constraint 
Array size bounded to width 3
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var i Int)
(declare-var a! (Array Int Int))
(declare-var i! Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 Int))Bool) 
(constraint (=> (and (< i 3) (>= i 0) )(=> (and (= i 0) (= (select a i) 0) )(inv-fn a i ))))
(constraint (=> (and (< i 3) (>= i 0) )(=> (and (inv-fn a i ) (and (ite (>= (select a i) 0) (= i! (+ i 1 )) (= i! i)) (= a! a) ) )(inv-fn a! i! ))))
(constraint (=> (and (< i 3) (>= i 0) )(=> (and (inv-fn a i ) (< (select a i) 0) )(and (=> (and (< 0 i) (>= 0 0) )(>= (select a 0) 0)) (=> (and (< 1 i) (>= 1 0) )(>= (select a 1) 0)) (=> (and (< 2 i) (>= 2 0) )(>= (select a 2) 0)) ))))
(check-synth)

Verifying solution from CVC4

SOLUTION(and (= (select synth::parameter0 0) 0) (or (bvuge synth::parameter1 3) (not (bvuge synth::parameter1 0)) (bvuge (select synth::parameter0 synth::parameter1) 0) (not (bvuge synth::parameter1 2)) (bvuge (select synth::parameter0 1) 0) ) )
after expanding let:
(and (= (select synth::parameter0 0) 0) (or (>= synth::parameter1 3) (not (>= synth::parameter1 0)) (>= (select synth::parameter0 synth::parameter1) 0) (not (>= synth::parameter1 2)) (>= (select synth::parameter0 1) 0) ) )
after removing implications :
(and (= (select synth::parameter0 0) 0) (or (>= (select synth::parameter0 synth::parameter1) 0) (not (>= synth::parameter1 2)) (>= (select synth::parameter0 1) 0) ) )
ATTEMPTING TO ADD quant back for (or (>= (select synth::parameter0 synth::parameter1) 0) (not (>= synth::parameter1 2)) (>= (select synth::parameter0 1) 0) )
Looking for array index in (bvuge (select synth::parameter0 synth::parameter1) 0) >=
Looking for array index in (select synth::parameter0 synth::parameter1) index
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge synth::parameter1 2)) not
Looking for array index in (bvuge synth::parameter1 2) >=
Looking for array index in synth::parameter1 symbol
Looking for array index in 2 constant
Pushing back constant value constant
  * type: integer
  * value: 2
Looking for array index in (bvuge (select synth::parameter0 1) 0) >=
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 1, 0
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
ATTEMPTING TO ADD quant back for (and (= (select synth::parameter0 0) 0) (or (>= (select synth::parameter0 synth::parameter1) 0) (not (>= synth::parameter1 2)) (>= (select synth::parameter0 1) 0) ) )
Looking for array index in (= (select synth::parameter0 0) 0) =
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 1, 0
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (or (bvuge (select synth::parameter0 synth::parameter1) 0) (not (bvuge synth::parameter1 2)) (bvuge (select synth::parameter0 1) 0) ) or
Looking for array index in (bvuge (select synth::parameter0 synth::parameter1) 0) >=
Looking for array index in (select synth::parameter0 synth::parameter1) index
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
Looking for array index in (not (bvuge synth::parameter1 2)) not
Looking for array index in (bvuge synth::parameter1 2) >=
Looking for array index in synth::parameter1 symbol
Looking for array index in 2 constant
Pushing back constant value constant
  * type: integer
  * value: 2
Looking for array index in (bvuge (select synth::parameter0 1) 0) >=
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 2, 0
Looking for array index in 0 constant
Pushing back constant value constant
  * type: integer
  * value: 0
About to verify: 

synth_fun::inv-fn -> parameter0[0] == 0 && (parameter0[parameter1] >= 0 || !(parameter1 >= 2) || parameter0[1] >= 0)
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |i| () Int)
; find_symbols
(declare-fun |a| () (Array Int Int))
; find_symbols
(declare-fun |i!| () Int)
; find_symbols
(declare-fun |a!| () (Array Int Int))
; set_to false
(assert (not (and (=> (and (= |i| 0) (= (select |a| |i|) 0)) (and (= (select |a| 0) 0) (or (>= (select |a| |i|) 0) (not (>= |i| 2)) (>= (select |a| 1) 0)))) (=> (and (and (= (select |a| 0) 0) (or (>= (select |a| |i|) 0) (not (>= |i| 2)) (>= (select |a| 1) 0))) (and (ite (>= (select |a| |i|) 0) (= |i!| (+ |i| 1)) (= |i!| |i|)) (= |a!| |a|))) (and (= (select |a!| 0) 0) (or (>= (select |a!| |i!|) 0) (not (>= |i!| 2)) (>= (select |a!| 1) 0)))) (=> (and (and (= (select |a| 0) 0) (or (>= (select |a| |i|) 0) (not (>= |i| 2)) (>= (select |a| 1) 0))) (< (select |a| |i|) 0)) (forall ((|index#0| Int)) (=> (and (< |index#0| |i|) (>= |index#0| 0)) (>= (select |a| |index#0|) 0)))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: a!
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 4
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Is declared variable 
Adding bounds outside of constraint 
Is index! Is declared variable 
Is index! Adding bounds outside of constraint 
Array size bounded to width 4
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var i Int)
(declare-var a! (Array Int Int))
(declare-var i! Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 Int))Bool) 
(constraint (=> (and (< i 4) (>= i 0) )(=> (and (= i 0) (= (select a i) 0) )(inv-fn a i ))))
(constraint (=> (and (< i 4) (>= i 0) )(=> (and (inv-fn a i ) (and (ite (>= (select a i) 0) (= i! (+ i 1 )) (= i! i)) (= a! a) ) )(inv-fn a! i! ))))
(constraint (=> (and (< i 4) (>= i 0) )(=> (and (inv-fn a i ) (< (select a i) 0) )(and (=> (and (< 0 i) (>= 0 0) )(>= (select a 0) 0)) (=> (and (< 1 i) (>= 1 0) )(>= (select a 1) 0)) (=> (and (< 2 i) (>= 2 0) )(>= (select a 2) 0)) (=> (and (< 3 i) (>= 3 0) )(>= (select a 3) 0)) ))))
(check-synth)

two_indices_harder.sl
 Declared variable x
 Declared variable x!
Starting to bound arrays to width 2
Is index! Is index! Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvadd index 1 )
Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (= (select x 0) 0) (= (select x 1) 1) )(inv-fn x )))
(constraint (=> (and (inv-fn x ) (and (= (select x! 0) (+ (select x 0) 1 )) (= (select x! 1) (+ (select x 1) 1 )) ) )(inv-fn x! )))
(constraint (=> (inv-fn x )(and (=> (and (< (+ 0 1 ) 2) (>= (+ 0 1 ) 0) )(=> (>= 0 0)(<= (select x 0) (select x (+ 0 1 ))))) (=> (and (< (+ 1 1 ) 2) (>= (+ 1 1 ) 0) )(=> (>= 1 0)(<= (select x 1) (select x (+ 1 1 ))))) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1))
after expanding let:
(not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1))
after removing implications :
(not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1))
About to verify: 

synth_fun::inv-fn -> !(parameter0[0] + -1 * parameter0[1] >= 1)
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |x!| () (Array Int Int))
; set_to false
(assert (not (and (=> (forall ((|index#0| Int)) (= (select |x| |index#0|) |index#0|)) (not (>= (+ (select |x| 0) (* (- 1) (select |x| 1))) 1))) (=> (and (not (>= (+ (select |x| 0) (* (- 1) (select |x| 1))) 1)) (forall ((|index#1| Int)) (= (select |x!| |index#1|) (+ (select |x| |index#1|) 1)))) (not (>= (+ (select |x!| 0) (* (- 1) (select |x!| 1))) 1))) (=> (not (>= (+ (select |x| 0) (* (- 1) (select |x| 1))) 1)) (forall ((|index#2| Int)) (=> (>= |index#2| 0) (<= (select |x| |index#2|) (select |x| (+ |index#2| 1)))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: x
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: x!
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 3
Is index! Is index! Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvadd index 1 )
Array size bounded to width 3
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (= (select x 0) 0) (= (select x 1) 1) (= (select x 2) 2) )(inv-fn x )))
(constraint (=> (and (inv-fn x ) (and (= (select x! 0) (+ (select x 0) 1 )) (= (select x! 1) (+ (select x 1) 1 )) (= (select x! 2) (+ (select x 2) 1 )) ) )(inv-fn x! )))
(constraint (=> (inv-fn x )(and (=> (and (< (+ 0 1 ) 3) (>= (+ 0 1 ) 0) )(=> (>= 0 0)(<= (select x 0) (select x (+ 0 1 ))))) (=> (and (< (+ 1 1 ) 3) (>= (+ 1 1 ) 0) )(=> (>= 1 0)(<= (select x 1) (select x (+ 1 1 ))))) (=> (and (< (+ 2 1 ) 3) (>= (+ 2 1 ) 0) )(=> (>= 2 0)(<= (select x 2) (select x (+ 2 1 ))))) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 1))) (and (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) _let_0) ) 1)) (not (bvuge (bvadd _let_0 (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1)) ))
after expanding let:
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) )
after removing implications :
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) )
ATTEMPTING TO ADD quant back for (and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) )
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) +
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 1)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 1) index
new array synth::parameter0
index value: 1 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) +
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 2)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 2) index
new array synth::parameter0
index value: 2 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 0
constant adjustments 1 0
This and the last comparison
 Comp: 0 and 1 = 0
Comp: 0 and 1 = 0
replace array indices in (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var0, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (* -1 (select synth::parameter0 1)) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in -1 with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var0, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 2
next constant idx 1
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var0, vector idx 0and constant idx 1
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var0, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in 1 with local_var0, vector idx 0and constant idx 1
Attempting to replace constant, constant vector idx: 1 and size of constant adjustments 2
next constant idx 2
About to verify: 

synth_fun::inv-fn -> forall { integer local_var0; local_var0 >= 0 ==> !(parameter0[local_var0] + -1 * parameter0[local_var0] >= 1) }
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |x!| () (Array Int Int))
; set_to false
(assert (not (and (=> (forall ((|index#0| Int)) (= (select |x| |index#0|) |index#0|)) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (not (>= (+ (select |x| |local_var0|) (* (- 1) (select |x| |local_var0|))) 1))))) (=> (and (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (not (>= (+ (select |x| |local_var0|) (* (- 1) (select |x| |local_var0|))) 1)))) (forall ((|index#1| Int)) (= (select |x!| |index#1|) (+ (select |x| |index#1|) 1)))) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (not (>= (+ (select |x!| |local_var0|) (* (- 1) (select |x!| |local_var0|))) 1))))) (=> (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (not (>= (+ (select |x| |local_var0|) (* (- 1) (select |x| |local_var0|))) 1)))) (forall ((|index#2| Int)) (=> (>= |index#2| 0) (<= (select |x| |index#2|) (select |x| (+ |index#2| 1)))))))))
SAT, got counterexample.

Starting to bound arrays to width 4
Is index! Is index! Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvadd index 1 )
Array size bounded to width 4
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (= (select x 0) 0) (= (select x 1) 1) (= (select x 2) 2) (= (select x 3) 3) )(inv-fn x )))
(constraint (=> (and (inv-fn x ) (and (= (select x! 0) (+ (select x 0) 1 )) (= (select x! 1) (+ (select x 1) 1 )) (= (select x! 2) (+ (select x 2) 1 )) (= (select x! 3) (+ (select x 3) 1 )) ) )(inv-fn x! )))
(constraint (=> (inv-fn x )(and (=> (and (< (+ 0 1 ) 4) (>= (+ 0 1 ) 0) )(=> (>= 0 0)(<= (select x 0) (select x (+ 0 1 ))))) (=> (and (< (+ 1 1 ) 4) (>= (+ 1 1 ) 0) )(=> (>= 1 0)(<= (select x 1) (select x (+ 1 1 ))))) (=> (and (< (+ 2 1 ) 4) (>= (+ 2 1 ) 0) )(=> (>= 2 0)(<= (select x 2) (select x (+ 2 1 ))))) (=> (and (< (+ 3 1 ) 4) (>= (+ 3 1 ) 0) )(=> (>= 3 0)(<= (select x 3) (select x (+ 3 1 ))))) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 1))) (let ((_let_1 (select synth::parameter0 2))) (and (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) _let_0) ) 1)) (not (bvuge (bvadd _let_0 (bvmul (bvneg 1) _let_1) ) 1)) (not (bvuge (bvadd _let_1 (bvmul (bvneg 1) (select synth::parameter0 3)) ) 1)) )))
after expanding let:
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) )
after removing implications :
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) )
ATTEMPTING TO ADD quant back for (and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) )
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) +
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 1)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 1) index
new array synth::parameter0
index value: 1 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) +
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 2)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 2) index
new array synth::parameter0
index value: 2 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) +
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 3)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 3) index
new array synth::parameter0
index value: 3 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 0
constant adjustments 1 0
This and the last comparison
 Comp: 0 and 1 = 0
Comp: 0 and 1 = 0
Checking this for 2, which is operand 2
Do any of the constants match? 
constant adjustments 1 -1
constant adjustments 1 -1
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
replace array indices in (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var1, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var1, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var1 with local_var1, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (* -1 (select synth::parameter0 1)) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in -1 with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var1, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 2
next constant idx 1
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var1, vector idx 0and constant idx 1
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var1, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in local_var1 with local_var1, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in 1 with local_var1, vector idx 0and constant idx 1
Attempting to replace constant, constant vector idx: 1 and size of constant adjustments 2
next constant idx 2
About to verify: 

synth_fun::inv-fn -> forall { integer local_var1; local_var1 >= 0 ==> !(parameter0[local_var1] + -1 * parameter0[local_var1] >= 1) }
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |x!| () (Array Int Int))
; set_to false
(assert (not (and (=> (forall ((|index#0| Int)) (= (select |x| |index#0|) |index#0|)) (forall ((|local_var1| Int)) (=> (>= |local_var1| 0) (not (>= (+ (select |x| |local_var1|) (* (- 1) (select |x| |local_var1|))) 1))))) (=> (and (forall ((|local_var1| Int)) (=> (>= |local_var1| 0) (not (>= (+ (select |x| |local_var1|) (* (- 1) (select |x| |local_var1|))) 1)))) (forall ((|index#1| Int)) (= (select |x!| |index#1|) (+ (select |x| |index#1|) 1)))) (forall ((|local_var1| Int)) (=> (>= |local_var1| 0) (not (>= (+ (select |x!| |local_var1|) (* (- 1) (select |x!| |local_var1|))) 1))))) (=> (forall ((|local_var1| Int)) (=> (>= |local_var1| 0) (not (>= (+ (select |x| |local_var1|) (* (- 1) (select |x| |local_var1|))) 1)))) (forall ((|index#2| Int)) (=> (>= |index#2| 0) (<= (select |x| |index#2|) (select |x| (+ |index#2| 1)))))))))
SAT, got counterexample.

Starting to bound arrays to width 5
Is index! Is index! Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvadd index 1 )
Array size bounded to width 5
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (= (select x 0) 0) (= (select x 1) 1) (= (select x 2) 2) (= (select x 3) 3) (= (select x 4) 4) )(inv-fn x )))
(constraint (=> (and (inv-fn x ) (and (= (select x! 0) (+ (select x 0) 1 )) (= (select x! 1) (+ (select x 1) 1 )) (= (select x! 2) (+ (select x 2) 1 )) (= (select x! 3) (+ (select x 3) 1 )) (= (select x! 4) (+ (select x 4) 1 )) ) )(inv-fn x! )))
(constraint (=> (inv-fn x )(and (=> (and (< (+ 0 1 ) 5) (>= (+ 0 1 ) 0) )(=> (>= 0 0)(<= (select x 0) (select x (+ 0 1 ))))) (=> (and (< (+ 1 1 ) 5) (>= (+ 1 1 ) 0) )(=> (>= 1 0)(<= (select x 1) (select x (+ 1 1 ))))) (=> (and (< (+ 2 1 ) 5) (>= (+ 2 1 ) 0) )(=> (>= 2 0)(<= (select x 2) (select x (+ 2 1 ))))) (=> (and (< (+ 3 1 ) 5) (>= (+ 3 1 ) 0) )(=> (>= 3 0)(<= (select x 3) (select x (+ 3 1 ))))) (=> (and (< (+ 4 1 ) 5) (>= (+ 4 1 ) 0) )(=> (>= 4 0)(<= (select x 4) (select x (+ 4 1 ))))) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 1))) (let ((_let_1 (select synth::parameter0 2))) (let ((_let_2 (select synth::parameter0 3))) (and (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) _let_0) ) 1)) (not (bvuge (bvadd _let_0 (bvmul (bvneg 1) _let_1) ) 1)) (not (bvuge (bvadd _let_1 (bvmul (bvneg 1) _let_2) ) 1)) (not (bvuge (bvadd _let_2 (bvmul (bvneg 1) (select synth::parameter0 4)) ) 1)) ))))
after expanding let:
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) (not (>= (+ (select synth::parameter0 3) (* -1 (select synth::parameter0 4)) ) 1)) )
after removing implications :
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) (not (>= (+ (select synth::parameter0 3) (* -1 (select synth::parameter0 4)) ) 1)) )
ATTEMPTING TO ADD quant back for (and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) (not (>= (+ (select synth::parameter0 3) (* -1 (select synth::parameter0 4)) ) 1)) )
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) +
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 1)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 1) index
new array synth::parameter0
index value: 1 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) +
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 2)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 2) index
new array synth::parameter0
index value: 2 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) +
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 3)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 3) index
new array synth::parameter0
index value: 3 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 3) (bvmul (bvneg 1) (select synth::parameter0 4)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 3) (bvmul (bvneg 1) (select synth::parameter0 4)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 3) (bvmul (bvneg 1) (select synth::parameter0 4)) ) +
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 4)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 4) index
new array synth::parameter0
index value: 4 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 0
constant adjustments 1 0
This and the last comparison
 Comp: 0 and 1 = 0
Comp: 0 and 1 = 0
Checking this for 2, which is operand 2
Do any of the constants match? 
constant adjustments 1 -1
constant adjustments 1 -1
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
Checking this for 3, which is operand 3
Do any of the constants match? 
constant adjustments 1 -2
constant adjustments 1 -2
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
replace array indices in (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1) with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var2, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var2, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var2 with local_var2, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (* -1 (select synth::parameter0 1)) with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in -1 with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var2, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 2
next constant idx 1
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var2, vector idx 0and constant idx 1
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var2, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in local_var2 with local_var2, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in 1 with local_var2, vector idx 0and constant idx 1
Attempting to replace constant, constant vector idx: 1 and size of constant adjustments 2
next constant idx 2
About to verify: 

synth_fun::inv-fn -> forall { integer local_var2; local_var2 >= 0 ==> !(parameter0[local_var2] + -1 * parameter0[local_var2] >= 1) }
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |x!| () (Array Int Int))
; set_to false
(assert (not (and (=> (forall ((|index#0| Int)) (= (select |x| |index#0|) |index#0|)) (forall ((|local_var2| Int)) (=> (>= |local_var2| 0) (not (>= (+ (select |x| |local_var2|) (* (- 1) (select |x| |local_var2|))) 1))))) (=> (and (forall ((|local_var2| Int)) (=> (>= |local_var2| 0) (not (>= (+ (select |x| |local_var2|) (* (- 1) (select |x| |local_var2|))) 1)))) (forall ((|index#1| Int)) (= (select |x!| |index#1|) (+ (select |x| |index#1|) 1)))) (forall ((|local_var2| Int)) (=> (>= |local_var2| 0) (not (>= (+ (select |x!| |local_var2|) (* (- 1) (select |x!| |local_var2|))) 1))))) (=> (forall ((|local_var2| Int)) (=> (>= |local_var2| 0) (not (>= (+ (select |x| |local_var2|) (* (- 1) (select |x| |local_var2|))) 1)))) (forall ((|index#2| Int)) (=> (>= |index#2| 0) (<= (select |x| |index#2|) (select |x| (+ |index#2| 1)))))))))
SAT, got counterexample.

Starting to bound arrays to width 6
Is index! Is index! Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvadd index 1 )
Array size bounded to width 6
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (= (select x 0) 0) (= (select x 1) 1) (= (select x 2) 2) (= (select x 3) 3) (= (select x 4) 4) (= (select x 5) 5) )(inv-fn x )))
(constraint (=> (and (inv-fn x ) (and (= (select x! 0) (+ (select x 0) 1 )) (= (select x! 1) (+ (select x 1) 1 )) (= (select x! 2) (+ (select x 2) 1 )) (= (select x! 3) (+ (select x 3) 1 )) (= (select x! 4) (+ (select x 4) 1 )) (= (select x! 5) (+ (select x 5) 1 )) ) )(inv-fn x! )))
(constraint (=> (inv-fn x )(and (=> (and (< (+ 0 1 ) 6) (>= (+ 0 1 ) 0) )(=> (>= 0 0)(<= (select x 0) (select x (+ 0 1 ))))) (=> (and (< (+ 1 1 ) 6) (>= (+ 1 1 ) 0) )(=> (>= 1 0)(<= (select x 1) (select x (+ 1 1 ))))) (=> (and (< (+ 2 1 ) 6) (>= (+ 2 1 ) 0) )(=> (>= 2 0)(<= (select x 2) (select x (+ 2 1 ))))) (=> (and (< (+ 3 1 ) 6) (>= (+ 3 1 ) 0) )(=> (>= 3 0)(<= (select x 3) (select x (+ 3 1 ))))) (=> (and (< (+ 4 1 ) 6) (>= (+ 4 1 ) 0) )(=> (>= 4 0)(<= (select x 4) (select x (+ 4 1 ))))) (=> (and (< (+ 5 1 ) 6) (>= (+ 5 1 ) 0) )(=> (>= 5 0)(<= (select x 5) (select x (+ 5 1 ))))) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 1))) (let ((_let_1 (select synth::parameter0 2))) (let ((_let_2 (select synth::parameter0 3))) (let ((_let_3 (select synth::parameter0 4))) (and (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) _let_0) ) 1)) (not (bvuge (bvadd _let_0 (bvmul (bvneg 1) _let_1) ) 1)) (not (bvuge (bvadd _let_1 (bvmul (bvneg 1) _let_2) ) 1)) (not (bvuge (bvadd _let_2 (bvmul (bvneg 1) _let_3) ) 1)) (not (bvuge (bvadd _let_3 (bvmul (bvneg 1) (select synth::parameter0 5)) ) 1)) )))))
after expanding let:
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) (not (>= (+ (select synth::parameter0 3) (* -1 (select synth::parameter0 4)) ) 1)) (not (>= (+ (select synth::parameter0 4) (* -1 (select synth::parameter0 5)) ) 1)) )
after removing implications :
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) (not (>= (+ (select synth::parameter0 3) (* -1 (select synth::parameter0 4)) ) 1)) (not (>= (+ (select synth::parameter0 4) (* -1 (select synth::parameter0 5)) ) 1)) )
ATTEMPTING TO ADD quant back for (and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) (not (>= (+ (select synth::parameter0 3) (* -1 (select synth::parameter0 4)) ) 1)) (not (>= (+ (select synth::parameter0 4) (* -1 (select synth::parameter0 5)) ) 1)) )
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) +
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 1)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 1) index
new array synth::parameter0
index value: 1 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) +
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 2)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 2) index
new array synth::parameter0
index value: 2 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) +
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 3)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 3) index
new array synth::parameter0
index value: 3 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 3) (bvmul (bvneg 1) (select synth::parameter0 4)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 3) (bvmul (bvneg 1) (select synth::parameter0 4)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 3) (bvmul (bvneg 1) (select synth::parameter0 4)) ) +
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 4)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 4) index
new array synth::parameter0
index value: 4 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 4) (bvmul (bvneg 1) (select synth::parameter0 5)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 4) (bvmul (bvneg 1) (select synth::parameter0 5)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 4) (bvmul (bvneg 1) (select synth::parameter0 5)) ) +
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 5)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 5) index
new array synth::parameter0
index value: 5 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 0
constant adjustments 1 0
This and the last comparison
 Comp: 0 and 1 = 0
Comp: 0 and 1 = 0
Checking this for 2, which is operand 2
Do any of the constants match? 
constant adjustments 1 -1
constant adjustments 1 -1
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
Checking this for 3, which is operand 3
Do any of the constants match? 
constant adjustments 1 -2
constant adjustments 1 -2
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
Checking this for 4, which is operand 4
Do any of the constants match? 
constant adjustments 1 -3
constant adjustments 1 -3
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
replace array indices in (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var3, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var3, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var3 with local_var3, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (* -1 (select synth::parameter0 1)) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in -1 with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var3, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 2
next constant idx 1
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var3, vector idx 0and constant idx 1
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var3, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in local_var3 with local_var3, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in 1 with local_var3, vector idx 0and constant idx 1
Attempting to replace constant, constant vector idx: 1 and size of constant adjustments 2
next constant idx 2
About to verify: 

synth_fun::inv-fn -> forall { integer local_var3; local_var3 >= 0 ==> !(parameter0[local_var3] + -1 * parameter0[local_var3] >= 1) }
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; find_symbols
(declare-fun |x!| () (Array Int Int))
; set_to false
(assert (not (and (=> (forall ((|index#0| Int)) (= (select |x| |index#0|) |index#0|)) (forall ((|local_var3| Int)) (=> (>= |local_var3| 0) (not (>= (+ (select |x| |local_var3|) (* (- 1) (select |x| |local_var3|))) 1))))) (=> (and (forall ((|local_var3| Int)) (=> (>= |local_var3| 0) (not (>= (+ (select |x| |local_var3|) (* (- 1) (select |x| |local_var3|))) 1)))) (forall ((|index#1| Int)) (= (select |x!| |index#1|) (+ (select |x| |index#1|) 1)))) (forall ((|local_var3| Int)) (=> (>= |local_var3| 0) (not (>= (+ (select |x!| |local_var3|) (* (- 1) (select |x!| |local_var3|))) 1))))) (=> (forall ((|local_var3| Int)) (=> (>= |local_var3| 0) (not (>= (+ (select |x| |local_var3|) (* (- 1) (select |x| |local_var3|))) 1)))) (forall ((|index#2| Int)) (=> (>= |index#2| 0) (<= (select |x| |index#2|) (select |x| (+ |index#2| 1)))))))))
SAT, got counterexample.

Reached max array size 7
two_indices_int.sl
 Declared variable x
 Declared variable x!
Starting to bound arrays to width 2
Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvadd index 1 )
Array size bounded to width 2
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (= (select x 0) 0) (= (select x 1) 1) )(inv-fn x )))
(constraint (=> (inv-fn x )(and (=> (and (< (+ 0 1 ) 2) (>= (+ 0 1 ) 0) )(<= (select x 0) (select x (+ 0 1 )))) (=> (and (< (+ 1 1 ) 2) (>= (+ 1 1 ) 0) )(<= (select x 1) (select x (+ 1 1 )))) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1))
after expanding let:
(not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1))
after removing implications :
(not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1))
About to verify: 

synth_fun::inv-fn -> !(parameter0[0] + -1 * parameter0[1] >= 1)
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; set_to false
(assert (not (and (=> (forall ((|index#0| Int)) (= (select |x| |index#0|) |index#0|)) (not (>= (+ (select |x| 0) (* (- 1) (select |x| 1))) 1))) (=> (not (>= (+ (select |x| 0) (* (- 1) (select |x| 1))) 1)) (forall ((|index#1| Int)) (<= (select |x| |index#1|) (select |x| (+ |index#1| 1))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: x
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: x!
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 3
Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvadd index 1 )
Array size bounded to width 3
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (= (select x 0) 0) (= (select x 1) 1) (= (select x 2) 2) )(inv-fn x )))
(constraint (=> (inv-fn x )(and (=> (and (< (+ 0 1 ) 3) (>= (+ 0 1 ) 0) )(<= (select x 0) (select x (+ 0 1 )))) (=> (and (< (+ 1 1 ) 3) (>= (+ 1 1 ) 0) )(<= (select x 1) (select x (+ 1 1 )))) (=> (and (< (+ 2 1 ) 3) (>= (+ 2 1 ) 0) )(<= (select x 2) (select x (+ 2 1 )))) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 1))) (and (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) _let_0) ) 1)) (not (bvuge (bvadd _let_0 (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1)) ))
after expanding let:
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) )
after removing implications :
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) )
ATTEMPTING TO ADD quant back for (and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) )
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) +
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 1)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 1) index
new array synth::parameter0
index value: 1 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) +
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 2)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 2) index
new array synth::parameter0
index value: 2 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 0
constant adjustments 1 0
This and the last comparison
 Comp: 0 and 1 = 0
Comp: 0 and 1 = 0
replace array indices in (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var0, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (* -1 (select synth::parameter0 1)) with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in -1 with local_var0, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var0, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 2
next constant idx 1
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var0, vector idx 0and constant idx 1
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var0, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in local_var0 with local_var0, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in 1 with local_var0, vector idx 0and constant idx 1
Attempting to replace constant, constant vector idx: 1 and size of constant adjustments 2
next constant idx 2
About to verify: 

synth_fun::inv-fn -> forall { integer local_var0; local_var0 >= 0 ==> !(parameter0[local_var0] + -1 * parameter0[local_var0] >= 1) }
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; set_to false
(assert (not (and (=> (forall ((|index#0| Int)) (= (select |x| |index#0|) |index#0|)) (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (not (>= (+ (select |x| |local_var0|) (* (- 1) (select |x| |local_var0|))) 1))))) (=> (forall ((|local_var0| Int)) (=> (>= |local_var0| 0) (not (>= (+ (select |x| |local_var0|) (* (- 1) (select |x| |local_var0|))) 1)))) (forall ((|index#1| Int)) (<= (select |x| |index#1|) (select |x| (+ |index#1| 1))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: x
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: x!
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 4
Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvadd index 1 )
Array size bounded to width 4
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (= (select x 0) 0) (= (select x 1) 1) (= (select x 2) 2) (= (select x 3) 3) )(inv-fn x )))
(constraint (=> (inv-fn x )(and (=> (and (< (+ 0 1 ) 4) (>= (+ 0 1 ) 0) )(<= (select x 0) (select x (+ 0 1 )))) (=> (and (< (+ 1 1 ) 4) (>= (+ 1 1 ) 0) )(<= (select x 1) (select x (+ 1 1 )))) (=> (and (< (+ 2 1 ) 4) (>= (+ 2 1 ) 0) )(<= (select x 2) (select x (+ 2 1 )))) (=> (and (< (+ 3 1 ) 4) (>= (+ 3 1 ) 0) )(<= (select x 3) (select x (+ 3 1 )))) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 1))) (let ((_let_1 (select synth::parameter0 2))) (and (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) _let_0) ) 1)) (not (bvuge (bvadd _let_0 (bvmul (bvneg 1) _let_1) ) 1)) (not (bvuge (bvadd _let_1 (bvmul (bvneg 1) (select synth::parameter0 3)) ) 1)) )))
after expanding let:
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) )
after removing implications :
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) )
ATTEMPTING TO ADD quant back for (and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) )
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) +
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 1)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 1) index
new array synth::parameter0
index value: 1 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) +
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 2)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 2) index
new array synth::parameter0
index value: 2 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) +
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 3)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 3) index
new array synth::parameter0
index value: 3 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 0
constant adjustments 1 0
This and the last comparison
 Comp: 0 and 1 = 0
Comp: 0 and 1 = 0
Checking this for 2, which is operand 2
Do any of the constants match? 
constant adjustments 1 -1
constant adjustments 1 -1
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
replace array indices in (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var1, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var1, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var1 with local_var1, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (* -1 (select synth::parameter0 1)) with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in -1 with local_var1, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var1, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 2
next constant idx 1
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var1, vector idx 0and constant idx 1
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var1, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in local_var1 with local_var1, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in 1 with local_var1, vector idx 0and constant idx 1
Attempting to replace constant, constant vector idx: 1 and size of constant adjustments 2
next constant idx 2
About to verify: 

synth_fun::inv-fn -> forall { integer local_var1; local_var1 >= 0 ==> !(parameter0[local_var1] + -1 * parameter0[local_var1] >= 1) }
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; set_to false
(assert (not (and (=> (forall ((|index#0| Int)) (= (select |x| |index#0|) |index#0|)) (forall ((|local_var1| Int)) (=> (>= |local_var1| 0) (not (>= (+ (select |x| |local_var1|) (* (- 1) (select |x| |local_var1|))) 1))))) (=> (forall ((|local_var1| Int)) (=> (>= |local_var1| 0) (not (>= (+ (select |x| |local_var1|) (* (- 1) (select |x| |local_var1|))) 1)))) (forall ((|index#1| Int)) (<= (select |x| |index#1|) (select |x| (+ |index#1| 1))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: x
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: x!
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 5
Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvadd index 1 )
Array size bounded to width 5
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (= (select x 0) 0) (= (select x 1) 1) (= (select x 2) 2) (= (select x 3) 3) (= (select x 4) 4) )(inv-fn x )))
(constraint (=> (inv-fn x )(and (=> (and (< (+ 0 1 ) 5) (>= (+ 0 1 ) 0) )(<= (select x 0) (select x (+ 0 1 )))) (=> (and (< (+ 1 1 ) 5) (>= (+ 1 1 ) 0) )(<= (select x 1) (select x (+ 1 1 )))) (=> (and (< (+ 2 1 ) 5) (>= (+ 2 1 ) 0) )(<= (select x 2) (select x (+ 2 1 )))) (=> (and (< (+ 3 1 ) 5) (>= (+ 3 1 ) 0) )(<= (select x 3) (select x (+ 3 1 )))) (=> (and (< (+ 4 1 ) 5) (>= (+ 4 1 ) 0) )(<= (select x 4) (select x (+ 4 1 )))) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 1))) (let ((_let_1 (select synth::parameter0 2))) (let ((_let_2 (select synth::parameter0 3))) (and (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) _let_0) ) 1)) (not (bvuge (bvadd _let_0 (bvmul (bvneg 1) _let_1) ) 1)) (not (bvuge (bvadd _let_1 (bvmul (bvneg 1) _let_2) ) 1)) (not (bvuge (bvadd _let_2 (bvmul (bvneg 1) (select synth::parameter0 4)) ) 1)) ))))
after expanding let:
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) (not (>= (+ (select synth::parameter0 3) (* -1 (select synth::parameter0 4)) ) 1)) )
after removing implications :
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) (not (>= (+ (select synth::parameter0 3) (* -1 (select synth::parameter0 4)) ) 1)) )
ATTEMPTING TO ADD quant back for (and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) (not (>= (+ (select synth::parameter0 3) (* -1 (select synth::parameter0 4)) ) 1)) )
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) +
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 1)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 1) index
new array synth::parameter0
index value: 1 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) +
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 2)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 2) index
new array synth::parameter0
index value: 2 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) +
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 3)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 3) index
new array synth::parameter0
index value: 3 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 3) (bvmul (bvneg 1) (select synth::parameter0 4)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 3) (bvmul (bvneg 1) (select synth::parameter0 4)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 3) (bvmul (bvneg 1) (select synth::parameter0 4)) ) +
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 4)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 4) index
new array synth::parameter0
index value: 4 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 0
constant adjustments 1 0
This and the last comparison
 Comp: 0 and 1 = 0
Comp: 0 and 1 = 0
Checking this for 2, which is operand 2
Do any of the constants match? 
constant adjustments 1 -1
constant adjustments 1 -1
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
Checking this for 3, which is operand 3
Do any of the constants match? 
constant adjustments 1 -2
constant adjustments 1 -2
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
replace array indices in (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1) with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var2, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var2, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var2 with local_var2, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (* -1 (select synth::parameter0 1)) with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in -1 with local_var2, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var2, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 2
next constant idx 1
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var2, vector idx 0and constant idx 1
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var2, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in local_var2 with local_var2, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in 1 with local_var2, vector idx 0and constant idx 1
Attempting to replace constant, constant vector idx: 1 and size of constant adjustments 2
next constant idx 2
About to verify: 

synth_fun::inv-fn -> forall { integer local_var2; local_var2 >= 0 ==> !(parameter0[local_var2] + -1 * parameter0[local_var2] >= 1) }
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; set_to false
(assert (not (and (=> (forall ((|index#0| Int)) (= (select |x| |index#0|) |index#0|)) (forall ((|local_var2| Int)) (=> (>= |local_var2| 0) (not (>= (+ (select |x| |local_var2|) (* (- 1) (select |x| |local_var2|))) 1))))) (=> (forall ((|local_var2| Int)) (=> (>= |local_var2| 0) (not (>= (+ (select |x| |local_var2|) (* (- 1) (select |x| |local_var2|))) 1)))) (forall ((|index#1| Int)) (<= (select |x| |index#1|) (select |x| (+ |index#1| 1))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: x
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: x!
Assume has been simplified out by solver.

SAT, got counterexample.

Starting to bound arrays to width 6
Is index! Is index! Is index! Inserting an expr into the symbol to bound set:(bvadd index 1 )
Array size bounded to width 6
Use integers 1
Output constraint, use integers 1
Output constraint, use integers 1
Solving query:
(set-logic ALL)
(declare-var x (Array Int Int))
(declare-var x! (Array Int Int))
(synth-fun inv-fn((parameter0 (Array Int Int)))Bool) 
(constraint (=> (and (= (select x 0) 0) (= (select x 1) 1) (= (select x 2) 2) (= (select x 3) 3) (= (select x 4) 4) (= (select x 5) 5) )(inv-fn x )))
(constraint (=> (inv-fn x )(and (=> (and (< (+ 0 1 ) 6) (>= (+ 0 1 ) 0) )(<= (select x 0) (select x (+ 0 1 )))) (=> (and (< (+ 1 1 ) 6) (>= (+ 1 1 ) 0) )(<= (select x 1) (select x (+ 1 1 )))) (=> (and (< (+ 2 1 ) 6) (>= (+ 2 1 ) 0) )(<= (select x 2) (select x (+ 2 1 )))) (=> (and (< (+ 3 1 ) 6) (>= (+ 3 1 ) 0) )(<= (select x 3) (select x (+ 3 1 )))) (=> (and (< (+ 4 1 ) 6) (>= (+ 4 1 ) 0) )(<= (select x 4) (select x (+ 4 1 )))) (=> (and (< (+ 5 1 ) 6) (>= (+ 5 1 ) 0) )(<= (select x 5) (select x (+ 5 1 )))) )))
(check-synth)

Verifying solution from CVC4

SOLUTION(let ((_let_0 (select synth::parameter0 1))) (let ((_let_1 (select synth::parameter0 2))) (let ((_let_2 (select synth::parameter0 3))) (let ((_let_3 (select synth::parameter0 4))) (and (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) _let_0) ) 1)) (not (bvuge (bvadd _let_0 (bvmul (bvneg 1) _let_1) ) 1)) (not (bvuge (bvadd _let_1 (bvmul (bvneg 1) _let_2) ) 1)) (not (bvuge (bvadd _let_2 (bvmul (bvneg 1) _let_3) ) 1)) (not (bvuge (bvadd _let_3 (bvmul (bvneg 1) (select synth::parameter0 5)) ) 1)) )))))
after expanding let:
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) (not (>= (+ (select synth::parameter0 3) (* -1 (select synth::parameter0 4)) ) 1)) (not (>= (+ (select synth::parameter0 4) (* -1 (select synth::parameter0 5)) ) 1)) )
after removing implications :
(and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) (not (>= (+ (select synth::parameter0 3) (* -1 (select synth::parameter0 4)) ) 1)) (not (>= (+ (select synth::parameter0 4) (* -1 (select synth::parameter0 5)) ) 1)) )
ATTEMPTING TO ADD quant back for (and (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) (not (>= (+ (select synth::parameter0 1) (* -1 (select synth::parameter0 2)) ) 1)) (not (>= (+ (select synth::parameter0 2) (* -1 (select synth::parameter0 3)) ) 1)) (not (>= (+ (select synth::parameter0 3) (* -1 (select synth::parameter0 4)) ) 1)) (not (>= (+ (select synth::parameter0 4) (* -1 (select synth::parameter0 5)) ) 1)) )
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 0) (bvmul (bvneg 1) (select synth::parameter0 1)) ) +
Looking for array index in (select synth::parameter0 0) index
index value: 0 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 1)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 1) index
new array synth::parameter0
index value: 1 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 1) (bvmul (bvneg 1) (select synth::parameter0 2)) ) +
Looking for array index in (select synth::parameter0 1) index
index value: 1 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 2)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 2) index
new array synth::parameter0
index value: 2 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 2) (bvmul (bvneg 1) (select synth::parameter0 3)) ) +
Looking for array index in (select synth::parameter0 2) index
index value: 2 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 3)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 3) index
new array synth::parameter0
index value: 3 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 3) (bvmul (bvneg 1) (select synth::parameter0 4)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 3) (bvmul (bvneg 1) (select synth::parameter0 4)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 3) (bvmul (bvneg 1) (select synth::parameter0 4)) ) +
Looking for array index in (select synth::parameter0 3) index
index value: 3 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 4)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 4) index
new array synth::parameter0
index value: 4 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (not (bvuge (bvadd (select synth::parameter0 4) (bvmul (bvneg 1) (select synth::parameter0 5)) ) 1)) not
Looking for array index in (bvuge (bvadd (select synth::parameter0 4) (bvmul (bvneg 1) (select synth::parameter0 5)) ) 1) >=
Looking for array index in (bvadd (select synth::parameter0 4) (bvmul (bvneg 1) (select synth::parameter0 5)) ) +
Looking for array index in (select synth::parameter0 4) index
index value: 4 at 3, 0
Looking for array index in (bvmul (bvneg 1) (select synth::parameter0 5)) *
Looking for array index in (bvneg 1) unary-
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Looking for array index in (select synth::parameter0 5) index
new array synth::parameter0
index value: 5 at 4, 1
Looking for array index in 1 constant
Pushing back constant value constant
  * type: integer
  * value: 1
Checking this for 1, which is operand 1
Do any of the constants match? 
constant adjustments 1 0
constant adjustments 1 0
This and the last comparison
 Comp: 0 and 1 = 0
Comp: 0 and 1 = 0
Checking this for 2, which is operand 2
Do any of the constants match? 
constant adjustments 1 -1
constant adjustments 1 -1
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
Checking this for 3, which is operand 3
Do any of the constants match? 
constant adjustments 1 -2
constant adjustments 1 -2
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
Checking this for 4, which is operand 4
Do any of the constants match? 
constant adjustments 1 -3
constant adjustments 1 -3
This and the last comparison
 Comp: 0 and 0 = 0
Comp: 0 and 0 = 0
replace array indices in (not (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1)) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (>= (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) 1) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (+ (select synth::parameter0 0) (* -1 (select synth::parameter0 1)) ) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in (select synth::parameter0 0) with local_var3, vector idx 0and constant idx 0
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var3, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in local_var3 with local_var3, vector idx 1and constant idx 0
calling from the bottom 
replace array indices in (* -1 (select synth::parameter0 1)) with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in -1 with local_var3, vector idx 0and constant idx 0
calling from the bottom 
replace array indices in 1 with local_var3, vector idx 0and constant idx 0
Attempting to replace constant, constant vector idx: 0 and size of constant adjustments 2
next constant idx 1
calling from the bottom 
replace array indices in (select synth::parameter0 1) with local_var3, vector idx 0and constant idx 1
Vector idx 0
calling from the bottom 
replace array indices in synth::parameter0 with local_var3, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in local_var3 with local_var3, vector idx 1and constant idx 1
calling from the bottom 
replace array indices in 1 with local_var3, vector idx 0and constant idx 1
Attempting to replace constant, constant vector idx: 1 and size of constant adjustments 2
next constant idx 2
About to verify: 

synth_fun::inv-fn -> forall { integer local_var3; local_var3 >= 0 ==> !(parameter0[local_var3] + -1 * parameter0[local_var3] >= 1) }
; SMT 2
; Generated for Z3
(set-info :source "created by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |x| () (Array Int Int))
; set_to false
(assert (not (and (=> (forall ((|index#0| Int)) (= (select |x| |index#0|) |index#0|)) (forall ((|local_var3| Int)) (=> (>= |local_var3| 0) (not (>= (+ (select |x| |local_var3|) (* (- 1) (select |x| |local_var3|))) 1))))) (=> (forall ((|local_var3| Int)) (=> (>= |local_var3| 0) (not (>= (+ (select |x| |local_var3|) (* (- 1) (select |x| |local_var3|))) 1)))) (forall ((|index#1| Int)) (<= (select |x| |index#1|) (select |x| (+ |index#1| 1))))))))
Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: x
Assume has been simplified out by solver.

Warning: unable to find value for symbol
  * type: array
      * size: infinity
          * type: integer
      0: integer
  * identifier: x!
Assume has been simplified out by solver.

SAT, got counterexample.

Reached max array size 7
