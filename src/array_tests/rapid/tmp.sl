(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var a! (Array Int Int))
(declare-var b (Array Int Int))
(declare-var b! (Array Int Int))
(declare-var c (Array Int Int))
(declare-var c! (Array Int Int))
(declare-var i Int)
(declare-var blength Int)
(declare-var clength Int)
(declare-var i! Int)
(declare-var blength! Int)
(declare-var clength! Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int))(parameter2 (Array Int Int))(parameter3 Int)(parameter4 Int)(parameter5 Int))Bool
((B Bool)(I Int))
((B Bool ((and B B) (or B B)(>= I I)(= I I)(< I I)
(<= 0 (select parameter1 0))
 (= 0 parameter4)
 (forall ((fresh_local_var Int)) (=> (and (<= I fresh_local_var)(< fresh_local_var I)) (<= 0 (select parameter1 fresh_local_var))))
))

(I Int (0 1 (- 1) (+ I I)
(- I)
parameter3
parameter4
parameter5
))
))
(constraint (=> (and (= i 0) (= blength 0) (= clength 0) )(inv-fn a b c i blength clength )))
(constraint (=> (inv-fn a b c i blength clength )(forall ((index Int)) (=> (and (< index blength) (>= index 0) )(>= (select b index) 0)))))
(constraint (=> (and (inv-fn a b c i blength clength ) (ite (>= (select a i) 0) (and (= b! (store b blength (select a i))) (= blength! (+ 1 blength )) (= clength! clength) (= i! (+ 1 i )) (= c! c) ) (and (= c! (store c clength (select a i))) (= clength! (+ 1 clength )) (= blength! blength) (= i! (+ 1 i )) (= b! b) )) )(inv-fn a b! c! i blength! clength! )))
(check-synth)