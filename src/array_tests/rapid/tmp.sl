(set-logic ALL)
(declare-var a (Array Int Int))
(declare-var b (Array Int Int))
(declare-var length Int)
(declare-var r Int)
(declare-var r! Int)
(declare-var i Int)
(declare-var i! Int)
(synth-fun inv-fn((parameter0 (Array Int Int))(parameter1 (Array Int Int))(parameter2 Int)(parameter3 Int)(parameter4 Int))Bool
((B Bool) (C Bool) (I Int))
((B Bool ((and B B) (or B B) (not B) (and C C) (or C C)))
(C Bool ((= I I) (<= I I) (>= I I)
(exists ((local_var2 Int)) (not (>= parameter2 0)))(exists ((local_var1 Int)) (not (= (select parameter0 local_var1) (select parameter1 local_var1))))(= 1 parameter3)
 (exists ((local_var0 Int)) (>= parameter2 2))))
(I Int (0 1 (- 1) (ite B I I)
(+ I I)
(- I)
(select parameter0 0)
(select parameter0 1)
(select parameter1 0)
(select parameter1 1)
parameter2
parameter3
parameter4
(select parameter0 parameter2)
(select parameter0 parameter3)
(select parameter0 parameter4)
(select parameter1 parameter2)
(select parameter1 parameter3)
(select parameter1 parameter4)
))
))
(constraint (=> (and (= r 0) (= i 0) )(inv-fn a b length r i )))
(constraint (=> (and (inv-fn a b length r i ) (ite (< i length) (and (ite (= (select a i) (select b i)) (= r! r) (= r! 1)) (= i! (+ i 1 )) ) (and (= r! r) (= i! i) )) )(inv-fn a b length r! i! )))
(constraint (=> (inv-fn a b length r i )(=> (and (<= 0 length) (= r 1) )(exists ((index Int)) (not (= (select a index) (select b index)))))))
(check-synth)
